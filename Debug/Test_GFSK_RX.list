
Test_GFSK_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000936c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  080094ac  080094ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b70  08009b70  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b78  08009b78  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b78  08009b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b7c  08009b7c  00019b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000060  08009be0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08009be0  00020588  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ebf0  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004151  00000000  00000000  0003ecbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d10  00000000  00000000  00042e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001645  00000000  00000000  00044b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c8d  00000000  00000000  00046165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d231  00000000  00000000  00066df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3e56  00000000  00000000  00084023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ee0  00000000  00000000  00147e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0014fd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	08009494 	.word	0x08009494

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	08009494 	.word	0x08009494

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <delay_us>:
#include "com_debug.h"
#include "stdio.h"
#include "stdarg.h"
#include "stdint.h"

void delay_us(uint32_t us) {
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <delay_us+0x30>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2200      	movs	r2, #0
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 800052c:	e002      	b.n	8000534 <delay_us+0x18>
		delay_counter_disp++;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3301      	adds	r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <delay_us+0x30>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	429a      	cmp	r2, r3
 800053e:	d8f6      	bhi.n	800052e <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	20000168 	.word	0x20000168

08000550 <myPrintf>:

void myPrintf(const char *fmt, ...) {
 8000550:	b40f      	push	{r0, r1, r2, r3}
 8000552:	b580      	push	{r7, lr}
 8000554:	b082      	sub	sp, #8
 8000556:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	2164      	movs	r1, #100	; 0x64
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <myPrintf+0x40>)
 8000566:	f008 fb05 	bl	8008b74 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 800056a:	4809      	ldr	r0, [pc, #36]	; (8000590 <myPrintf+0x40>)
 800056c:	f000 f814 	bl	8000598 <bufferSize>
 8000570:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	b29a      	uxth	r2, r3
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	4905      	ldr	r1, [pc, #20]	; (8000590 <myPrintf+0x40>)
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <myPrintf+0x44>)
 800057e:	f003 ffaf 	bl	80044e0 <HAL_UART_Transmit>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800058c:	b004      	add	sp, #16
 800058e:	4770      	bx	lr
 8000590:	2000007c 	.word	0x2000007c
 8000594:	200001b4 	.word	0x200001b4

08000598 <bufferSize>:

int bufferSize(char *buffer) {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	int i = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80005a4:	e002      	b.n	80005ac <bufferSize+0x14>
		i++;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3301      	adds	r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1f6      	bne.n	80005a6 <bufferSize+0xe>
	return i;
 80005b8:	68fb      	ldr	r3, [r7, #12]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4313      	orrs	r3, r2
 80005da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4013      	ands	r3, r2
 80005e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005e8:	68fb      	ldr	r3, [r7, #12]
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <HAL_TIM_PeriodElapsedCallback>:
void DioIrqHndlr(RadioIrqMasks_t radioIrq);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a2b      	ldr	r2, [pc, #172]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d14e      	bne.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0xae>
		mSEC++;
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800060e:	801a      	strh	r2, [r3, #0]

		if (mSEC > 999) {
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000618:	d308      	bcc.n	800062c <HAL_TIM_PeriodElapsedCallback+0x38>
			mSEC = 0;
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800061c:	2200      	movs	r2, #0
 800061e:	801a      	strh	r2, [r3, #0]
			sec++;
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800062a:	701a      	strb	r2, [r3, #0]
		}

		if (sec > 0) {
 800062c:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00f      	beq.n	8000654 <HAL_TIM_PeriodElapsedCallback+0x60>
			if (sec % 5 == 0) {
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800063a:	fba3 1302 	umull	r1, r3, r3, r2
 800063e:	0899      	lsrs	r1, r3, #2
 8000640:	460b      	mov	r3, r1
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d102      	bne.n	8000654 <HAL_TIM_PeriodElapsedCallback+0x60>
				TX_FLAG = 1;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
			}
		}

		if (sec > 59) {
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b3b      	cmp	r3, #59	; 0x3b
 800065a:	d908      	bls.n	800066e <HAL_TIM_PeriodElapsedCallback+0x7a>
			sec = 0;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
			min++;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800066c:	701a      	strb	r2, [r3, #0]
		}

		if (min > 59) {
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b3b      	cmp	r3, #59	; 0x3b
 8000674:	d908      	bls.n	8000688 <HAL_TIM_PeriodElapsedCallback+0x94>
			min = 0;
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
			hour++;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000686:	701a      	strb	r2, [r3, #0]
		}

		if (hour > 23) {
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b17      	cmp	r3, #23
 800068e:	d908      	bls.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0xae>
			hour = 0;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
			min = 0;
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
			sec = 0;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	2000011c 	.word	0x2000011c
 80006b0:	2000026e 	.word	0x2000026e
 80006b4:	20000270 	.word	0x20000270
 80006b8:	cccccccd 	.word	0xcccccccd
 80006bc:	2000026c 	.word	0x2000026c
 80006c0:	20000271 	.word	0x20000271
 80006c4:	20000272 	.word	0x20000272

080006c8 <calc_CRC>:

uint16_t calc_CRC(const uint8_t *data, uint8_t data_length) {
 80006c8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80006cc:	b08b      	sub	sp, #44	; 0x2c
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	460b      	mov	r3, r1
 80006d4:	70fb      	strb	r3, [r7, #3]
 80006d6:	466b      	mov	r3, sp
 80006d8:	4618      	mov	r0, r3

	uint16_t crcReg = 0xFFFF;	// Initialize the CRC register with 0xFFFF
 80006da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006de:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t calc = 0x8408;		// Polynomial for CRC-16
 80006e0:	f248 4308 	movw	r3, #33800	; 0x8408
 80006e4:	837b      	strh	r3, [r7, #26]
	uint16_t w;
	int i, j;
	uint8_t calc_data[DATA_SIZE];  // in 16 bytes, 14 are data bytes
 80006e6:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <calc_CRC+0xfc>)
 80006e8:	7819      	ldrb	r1, [r3, #0]
 80006ea:	460b      	mov	r3, r1
 80006ec:	3b01      	subs	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	b2cb      	uxtb	r3, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	4698      	mov	r8, r3
 80006f6:	4691      	mov	r9, r2
 80006f8:	f04f 0200 	mov.w	r2, #0
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000704:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000708:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800070c:	b2cb      	uxtb	r3, r1
 800070e:	2200      	movs	r2, #0
 8000710:	461c      	mov	r4, r3
 8000712:	4615      	mov	r5, r2
 8000714:	f04f 0200 	mov.w	r2, #0
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	00eb      	lsls	r3, r5, #3
 800071e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000722:	00e2      	lsls	r2, r4, #3
 8000724:	460b      	mov	r3, r1
 8000726:	3307      	adds	r3, #7
 8000728:	08db      	lsrs	r3, r3, #3
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	ebad 0d03 	sub.w	sp, sp, r3
 8000730:	466b      	mov	r3, sp
 8000732:	3300      	adds	r3, #0
 8000734:	613b      	str	r3, [r7, #16]

	// Copy data into calc_data
	for (i = 0; i < data_length; i++) {
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
 800073a:	e034      	b.n	80007a6 <calc_CRC+0xde>
		calc_data[i] = data[i];
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	7819      	ldrb	r1, [r3, #0]
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	4413      	add	r3, r2
 800074a:	460a      	mov	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
		// Iterate over each byte of data
		for (j = 0; j < 8; j++) {
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	e022      	b.n	800079a <calc_CRC+0xd2>
			w = (crcReg ^ calc_data[i]) & 0x0001; // XOR the LSB of crcReg with the LSB of calc_data
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b29a      	uxth	r2, r3
 800075e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000760:	4053      	eors	r3, r2
 8000762:	b29b      	uxth	r3, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	81fb      	strh	r3, [r7, #14]
			crcReg = crcReg >> 1;			// Right-shift the crcReg by 1 bit
 800076a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800076c:	085b      	lsrs	r3, r3, #1
 800076e:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (w == 1) {
 8000770:	89fb      	ldrh	r3, [r7, #14]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d103      	bne.n	800077e <calc_CRC+0xb6>
				crcReg = crcReg ^ calc;	// If w is 1, XOR the crcReg with the polynomial
 8000776:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000778:	8b7b      	ldrh	r3, [r7, #26]
 800077a:	4053      	eors	r3, r2
 800077c:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			calc_data[i] = calc_data[i] >> 1;// Right-shift the data byte by 1 bit
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	085b      	lsrs	r3, r3, #1
 8000788:	b2d9      	uxtb	r1, r3
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	4413      	add	r3, r2
 8000790:	460a      	mov	r2, r1
 8000792:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	3301      	adds	r3, #1
 8000798:	61fb      	str	r3, [r7, #28]
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	2b07      	cmp	r3, #7
 800079e:	ddd9      	ble.n	8000754 <calc_CRC+0x8c>
	for (i = 0; i < data_length; i++) {
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	3301      	adds	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	6a3a      	ldr	r2, [r7, #32]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	dbc6      	blt.n	800073c <calc_CRC+0x74>
		}
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
 80007ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007b0:	43db      	mvns	r3, r3
 80007b2:	84fb      	strh	r3, [r7, #38]	; 0x26
	return crcReg;
 80007b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007b6:	4685      	mov	sp, r0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	372c      	adds	r7, #44	; 0x2c
 80007bc:	46bd      	mov	sp, r7
 80007be:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80007c2:	4770      	bx	lr
 80007c4:	20000001 	.word	0x20000001

080007c8 <radioTxData>:

void radioTxData() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	tx_cmd[0] = 0x42;
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <radioTxData+0x90>)
 80007ce:	2242      	movs	r2, #66	; 0x42
 80007d0:	701a      	strb	r2, [r3, #0]
	tx_cmd[1] = 0x4D;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <radioTxData+0x90>)
 80007d4:	224d      	movs	r2, #77	; 0x4d
 80007d6:	705a      	strb	r2, [r3, #1]

	//getSoilSensorData();
	tx_cmd[2] = 0x01; 		       //gst data (GST ID)
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <radioTxData+0x90>)
 80007da:	2201      	movs	r2, #1
 80007dc:	709a      	strb	r2, [r3, #2]
	//tx_cmd[3] = read_soil_value >> 8 & 0xff; 	  //gst DATA (SOIL SENSOR - MSB)
	//tx_cmd[4] = read_soil_value & 0xff;     //gst data (SOIL SENSOR LSB)

	tx_cmd[3] = 0x1A; 	  //gst DATA (SOIL SENSOR - MSB)
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <radioTxData+0x90>)
 80007e0:	221a      	movs	r2, #26
 80007e2:	70da      	strb	r2, [r3, #3]
	tx_cmd[4] = 0x23;     //gst data (SOIL SENSOR LSB)
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <radioTxData+0x90>)
 80007e6:	2223      	movs	r2, #35	; 0x23
 80007e8:	711a      	strb	r2, [r3, #4]

	tx_cmd[5] = 0x33;    //gst data
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <radioTxData+0x90>)
 80007ec:	2233      	movs	r2, #51	; 0x33
 80007ee:	715a      	strb	r2, [r3, #5]
	tx_cmd[6] = 0x44;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <radioTxData+0x90>)
 80007f2:	2244      	movs	r2, #68	; 0x44
 80007f4:	719a      	strb	r2, [r3, #6]
	tx_cmd[7] = 0x55;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <radioTxData+0x90>)
 80007f8:	2255      	movs	r2, #85	; 0x55
 80007fa:	71da      	strb	r2, [r3, #7]
	tx_cmd[8] = 0x66;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <radioTxData+0x90>)
 80007fe:	2266      	movs	r2, #102	; 0x66
 8000800:	721a      	strb	r2, [r3, #8]
	tx_cmd[9] = 0x77;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <radioTxData+0x90>)
 8000804:	2277      	movs	r2, #119	; 0x77
 8000806:	725a      	strb	r2, [r3, #9]
	tx_cmd[10] = 0x88;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <radioTxData+0x90>)
 800080a:	2288      	movs	r2, #136	; 0x88
 800080c:	729a      	strb	r2, [r3, #10]
	tx_cmd[11] = 0x99;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <radioTxData+0x90>)
 8000810:	2299      	movs	r2, #153	; 0x99
 8000812:	72da      	strb	r2, [r3, #11]
	tx_cmd[12] = 0x38;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <radioTxData+0x90>)
 8000816:	2238      	movs	r2, #56	; 0x38
 8000818:	731a      	strb	r2, [r3, #12]
	tx_cmd[13] = 0xA7;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <radioTxData+0x90>)
 800081c:	22a7      	movs	r2, #167	; 0xa7
 800081e:	735a      	strb	r2, [r3, #13]
	crc = 0;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <radioTxData+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	801a      	strh	r2, [r3, #0]
	crc = calc_CRC(tx_cmd, DATA_SIZE);
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <radioTxData+0x98>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4619      	mov	r1, r3
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <radioTxData+0x90>)
 800082e:	f7ff ff4b 	bl	80006c8 <calc_CRC>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <radioTxData+0x94>)
 8000838:	801a      	strh	r2, [r3, #0]
	tx_cmd[14] = crc >> 8;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <radioTxData+0x94>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	0a1b      	lsrs	r3, r3, #8
 8000840:	b29b      	uxth	r3, r3
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <radioTxData+0x90>)
 8000846:	739a      	strb	r2, [r3, #14]
	tx_cmd[15] = crc;
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <radioTxData+0x94>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b02      	ldr	r3, [pc, #8]	; (8000858 <radioTxData+0x90>)
 8000850:	73da      	strb	r2, [r3, #15]
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000258 	.word	0x20000258
 800085c:	2000026a 	.word	0x2000026a
 8000860:	20000001 	.word	0x20000001

08000864 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800086a:	f000 fe63 	bl	8001534 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800086e:	f000 f925 	bl	8000abc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000872:	f000 fa83 	bl	8000d7c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000876:	f000 fa35 	bl	8000ce4 <MX_USART2_UART_Init>
	MX_SubGHz_Phy_Init();
 800087a:	f007 fdca 	bl	8008412 <MX_SubGHz_Phy_Init>
	MX_TIM2_Init();
 800087e:	f000 f9e3 	bl	8000c48 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000882:	f000 f98d 	bl	8000ba0 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8000886:	4874      	ldr	r0, [pc, #464]	; (8000a58 <main+0x1f4>)
 8000888:	f003 f984 	bl	8003b94 <HAL_TIM_Base_Start>

	pkt_params.PacketType = PACKET_TYPE_GFSK;
 800088c:	4b73      	ldr	r3, [pc, #460]	; (8000a5c <main+0x1f8>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = PAYLOAD_LENGTH;
 8000892:	4b72      	ldr	r3, [pc, #456]	; (8000a5c <main+0x1f8>)
 8000894:	2210      	movs	r2, #16
 8000896:	721a      	strb	r2, [r3, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8000898:	4b70      	ldr	r3, [pc, #448]	; (8000a5c <main+0x1f8>)
 800089a:	2208      	movs	r2, #8
 800089c:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800089e:	4b6f      	ldr	r3, [pc, #444]	; (8000a5c <main+0x1f8>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80008a4:	4b6d      	ldr	r3, [pc, #436]	; (8000a5c <main+0x1f8>)
 80008a6:	2218      	movs	r2, #24
 80008a8:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80008aa:	4b6c      	ldr	r3, [pc, #432]	; (8000a5c <main+0x1f8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80008b0:	4b6a      	ldr	r3, [pc, #424]	; (8000a5c <main+0x1f8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80008b6:	4b69      	ldr	r3, [pc, #420]	; (8000a5c <main+0x1f8>)
 80008b8:	22f2      	movs	r2, #242	; 0xf2
 80008ba:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80008bc:	4b67      	ldr	r3, [pc, #412]	; (8000a5c <main+0x1f8>)
 80008be:	2201      	movs	r2, #1
 80008c0:	729a      	strb	r2, [r3, #10]

	mod_params.PacketType = PACKET_TYPE_GFSK;
 80008c2:	4b67      	ldr	r3, [pc, #412]	; (8000a60 <main+0x1fc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 80008c8:	4b65      	ldr	r3, [pc, #404]	; (8000a60 <main+0x1fc>)
 80008ca:	220d      	movs	r2, #13
 80008cc:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR;
 80008ce:	4b64      	ldr	r3, [pc, #400]	; (8000a60 <main+0x1fc>)
 80008d0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80008d4:	605a      	str	r2, [r3, #4]
	mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV;
 80008d6:	4b62      	ldr	r3, [pc, #392]	; (8000a60 <main+0x1fc>)
 80008d8:	f243 02d4 	movw	r2, #12500	; 0x30d4
 80008dc:	609a      	str	r2, [r3, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80008de:	4b60      	ldr	r3, [pc, #384]	; (8000a60 <main+0x1fc>)
 80008e0:	220b      	movs	r2, #11
 80008e2:	731a      	strb	r2, [r3, #12]

	SUBGRF_Init(DioIrqHndlr);
 80008e4:	485f      	ldr	r0, [pc, #380]	; (8000a64 <main+0x200>)
 80008e6:	f006 fb4b 	bl	8006f80 <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80008ea:	2100      	movs	r1, #0
 80008ec:	2000      	movs	r0, #0
 80008ee:	f007 f9b3 	bl	8007c58 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(tx_cmd, PAYLOAD_LENGTH);
 80008f2:	2110      	movs	r1, #16
 80008f4:	485c      	ldr	r0, [pc, #368]	; (8000a68 <main+0x204>)
 80008f6:	f006 fb95 	bl	8007024 <SUBGRF_SetPayload>
	SUBGRF_SetPacketParams(&pkt_params);
 80008fa:	4858      	ldr	r0, [pc, #352]	; (8000a5c <main+0x1f8>)
 80008fc:	f007 f90e 	bl	8007b1c <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000900:	4a5a      	ldr	r2, [pc, #360]	; (8000a6c <main+0x208>)
 8000902:	463b      	mov	r3, r7
 8000904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000908:	e883 0003 	stmia.w	r3, {r0, r1}
 800090c:	463b      	mov	r3, r7
 800090e:	4618      	mov	r0, r3
 8000910:	f006 fbcd 	bl	80070ae <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000914:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000918:	f006 fc18 	bl	800714c <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 800091c:	4854      	ldr	r0, [pc, #336]	; (8000a70 <main+0x20c>)
 800091e:	f006 fef1 	bl	8007704 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000922:	2301      	movs	r3, #1
 8000924:	2200      	movs	r2, #0
 8000926:	2102      	movs	r1, #2
 8000928:	2002      	movs	r0, #2
 800092a:	f006 fe6d 	bl	8007608 <SUBGRF_SetPaConfig>
	//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 800092e:	2206      	movs	r2, #6
 8000930:	210e      	movs	r1, #14
 8000932:	2001      	movs	r0, #1
 8000934:	f006 ff52 	bl	80077dc <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 8000938:	4849      	ldr	r0, [pc, #292]	; (8000a60 <main+0x1fc>)
 800093a:	f007 f81d 	bl	8007978 <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 800093e:	2300      	movs	r3, #0
 8000940:	2200      	movs	r2, #0
 8000942:	f240 210f 	movw	r1, #527	; 0x20f
 8000946:	f240 200f 	movw	r0, #527	; 0x20f
 800094a:	f006 fe7f 	bl	800764c <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	myPrintf("\n########## Test code: BEGIN ##########\r\n");
 800094e:	4849      	ldr	r0, [pc, #292]	; (8000a74 <main+0x210>)
 8000950:	f7ff fdfe 	bl	8000550 <myPrintf>
	myPrintf("\n########## Receive and Transmits ##########\r\n");
 8000954:	4848      	ldr	r0, [pc, #288]	; (8000a78 <main+0x214>)
 8000956:	f7ff fdfb 	bl	8000550 <myPrintf>
	myPrintf("########## Low Power Radio Receiver: 	##########\r\n");
 800095a:	4848      	ldr	r0, [pc, #288]	; (8000a7c <main+0x218>)
 800095c:	f7ff fdf8 	bl	8000550 <myPrintf>
	myPrintf("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 8000960:	4847      	ldr	r0, [pc, #284]	; (8000a80 <main+0x21c>)
 8000962:	f7ff fdf5 	bl	8000550 <myPrintf>
	myPrintf("Modulation: GFSK PACKET\r\n");
 8000966:	4847      	ldr	r0, [pc, #284]	; (8000a84 <main+0x220>)
 8000968:	f7ff fdf2 	bl	8000550 <myPrintf>
	myPrintf("FREQUENCY MODS: UPLINK FREQ: %lu\r\n    DOWNLINK FREQ: %lu\r\n",
 800096c:	4a46      	ldr	r2, [pc, #280]	; (8000a88 <main+0x224>)
 800096e:	4940      	ldr	r1, [pc, #256]	; (8000a70 <main+0x20c>)
 8000970:	4846      	ldr	r0, [pc, #280]	; (8000a8c <main+0x228>)
 8000972:	f7ff fded 	bl	8000550 <myPrintf>
	FREQ_402_MHZ, FREQ_401_MHZ);
	myPrintf(
 8000976:	230e      	movs	r3, #14
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2300      	movs	r3, #0
 800097c:	2202      	movs	r2, #2
 800097e:	2102      	movs	r1, #2
 8000980:	4843      	ldr	r0, [pc, #268]	; (8000a90 <main+0x22c>)
 8000982:	f7ff fde5 	bl	8000550 <myPrintf>
			"POWER CONFIG:\r\n    PA_DUTY_CYCLE : %x,    HP_MAX: %x,\n\r    PA_SEL : %x,    POWER TX: %u dBm\n\r",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);
	myPrintf("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 8000986:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <main+0x1fc>)
 8000988:	7b5b      	ldrb	r3, [r3, #13]
 800098a:	4619      	mov	r1, r3
 800098c:	4841      	ldr	r0, [pc, #260]	; (8000a94 <main+0x230>)
 800098e:	f7ff fddf 	bl	8000550 <myPrintf>
	myPrintf("Packet Type: 			%d\n\r", pkt_params.PacketType);
 8000992:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <main+0x1f8>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	4619      	mov	r1, r3
 8000998:	483f      	ldr	r0, [pc, #252]	; (8000a98 <main+0x234>)
 800099a:	f7ff fdd9 	bl	8000550 <myPrintf>
	myPrintf("PayloadLength: 		%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 800099e:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <main+0x1f8>)
 80009a0:	7a1b      	ldrb	r3, [r3, #8]
 80009a2:	4619      	mov	r1, r3
 80009a4:	483d      	ldr	r0, [pc, #244]	; (8000a9c <main+0x238>)
 80009a6:	f7ff fdd3 	bl	8000550 <myPrintf>
	myPrintf("PreambleLength: 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <main+0x1f8>)
 80009ac:	885b      	ldrh	r3, [r3, #2]
 80009ae:	4619      	mov	r1, r3
 80009b0:	483b      	ldr	r0, [pc, #236]	; (8000aa0 <main+0x23c>)
 80009b2:	f7ff fdcd 	bl	8000550 <myPrintf>
	myPrintf("HeaderType: 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <main+0x1f8>)
 80009b8:	79db      	ldrb	r3, [r3, #7]
 80009ba:	4619      	mov	r1, r3
 80009bc:	4839      	ldr	r0, [pc, #228]	; (8000aa4 <main+0x240>)
 80009be:	f7ff fdc7 	bl	8000550 <myPrintf>
	myPrintf(
 80009c2:	4839      	ldr	r0, [pc, #228]	; (8000aa8 <main+0x244>)
 80009c4:	f7ff fdc4 	bl	8000550 <myPrintf>
			"--------   If this message pop up then wait to receive   --------\r\n");
	myPrintf("__________________________________________________\r\n");
 80009c8:	4838      	ldr	r0, [pc, #224]	; (8000aac <main+0x248>)
 80009ca:	f7ff fdc1 	bl	8000550 <myPrintf>
	SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 80009ce:	4828      	ldr	r0, [pc, #160]	; (8000a70 <main+0x20c>)
 80009d0:	f006 fe98 	bl	8007704 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80009d4:	2100      	movs	r1, #0
 80009d6:	2001      	movs	r0, #1
 80009d8:	f007 fadc 	bl	8007f94 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 80009dc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80009e0:	f006 fcbc 	bl	800735c <SUBGRF_SetRxBoosted>

	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ea:	4831      	ldr	r0, [pc, #196]	; (8000ab0 <main+0x24c>)
 80009ec:	f001 f87a 	bl	8001ae4 <HAL_GPIO_WritePin>
	delay_us(1000000);  // 500ms delay
 80009f0:	4830      	ldr	r0, [pc, #192]	; (8000ab4 <main+0x250>)
 80009f2:	f7ff fd93 	bl	800051c <delay_us>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009fc:	482c      	ldr	r0, [pc, #176]	; (8000ab0 <main+0x24c>)
 80009fe:	f001 f871 	bl	8001ae4 <HAL_GPIO_WritePin>
	delay_us(1000000);
 8000a02:	482c      	ldr	r0, [pc, #176]	; (8000ab4 <main+0x250>)
 8000a04:	f7ff fd8a 	bl	800051c <delay_us>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a0e:	4828      	ldr	r0, [pc, #160]	; (8000ab0 <main+0x24c>)
 8000a10:	f001 f868 	bl	8001ae4 <HAL_GPIO_WritePin>
		delay_us(1000000);
 8000a14:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <main+0x250>)
 8000a16:	f7ff fd81 	bl	800051c <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a20:	4823      	ldr	r0, [pc, #140]	; (8000ab0 <main+0x24c>)
 8000a22:	f001 f85f 	bl	8001ae4 <HAL_GPIO_WritePin>
		delay_us(1000000);
 8000a26:	4823      	ldr	r0, [pc, #140]	; (8000ab4 <main+0x250>)
 8000a28:	f7ff fd78 	bl	800051c <delay_us>

		if (TX_FLAG) {
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <main+0x254>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00d      	beq.n	8000a50 <main+0x1ec>
			radioTxData();
 8000a34:	f7ff fec8 	bl	80007c8 <radioTxData>
			SUBGRF_SetRfFrequency(FREQ_401_MHZ);
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <main+0x224>)
 8000a3a:	f006 fe63 	bl	8007704 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 8000a3e:	2101      	movs	r1, #1
 8000a40:	2001      	movs	r0, #1
 8000a42:	f007 faa7 	bl	8007f94 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_cmd, 16, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2110      	movs	r1, #16
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <main+0x204>)
 8000a4c:	f006 fb1c 	bl	8007088 <SUBGRF_SendPayload>
		}

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8000a50:	f007 fce7 	bl	8008422 <MX_SubGHz_Phy_Process>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000a54:	e7d8      	b.n	8000a08 <main+0x1a4>
 8000a56:	bf00      	nop
 8000a58:	20000168 	.word	0x20000168
 8000a5c:	200000e0 	.word	0x200000e0
 8000a60:	200000f4 	.word	0x200000f4
 8000a64:	08000e31 	.word	0x08000e31
 8000a68:	20000258 	.word	0x20000258
 8000a6c:	0800971c 	.word	0x0800971c
 8000a70:	17fbc158 	.word	0x17fbc158
 8000a74:	080094ac 	.word	0x080094ac
 8000a78:	080094d8 	.word	0x080094d8
 8000a7c:	08009508 	.word	0x08009508
 8000a80:	0800953c 	.word	0x0800953c
 8000a84:	08009570 	.word	0x08009570
 8000a88:	17ec7f18 	.word	0x17ec7f18
 8000a8c:	0800958c 	.word	0x0800958c
 8000a90:	080095c8 	.word	0x080095c8
 8000a94:	08009628 	.word	0x08009628
 8000a98:	08009644 	.word	0x08009644
 8000a9c:	0800965c 	.word	0x0800965c
 8000aa0:	08009674 	.word	0x08009674
 8000aa4:	0800968c 	.word	0x0800968c
 8000aa8:	080096a0 	.word	0x080096a0
 8000aac:	080096e4 	.word	0x080096e4
 8000ab0:	48000400 	.word	0x48000400
 8000ab4:	000f4240 	.word	0x000f4240
 8000ab8:	2000026c 	.word	0x2000026c

08000abc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09a      	sub	sp, #104	; 0x68
 8000ac0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	2248      	movs	r2, #72	; 0x48
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f008 f860 	bl	8008b90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <SystemClock_Config+0xbc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000aea:	4a23      	ldr	r2, [pc, #140]	; (8000b78 <SystemClock_Config+0xbc>)
 8000aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemClock_Config+0xbc>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000b02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b10:	2303      	movs	r3, #3
 8000b12:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000b14:	2310      	movs	r3, #16
 8000b16:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8000b18:	2306      	movs	r3, #6
 8000b1a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b20:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b26:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b2c:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 fac0 	bl	80020b8 <HAL_RCC_OscConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x86>
		Error_Handler();
 8000b3e:	f000 fad1 	bl	80010e4 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000b42:	234f      	movs	r3, #79	; 0x4f
 8000b44:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b46:	2303      	movs	r3, #3
 8000b48:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fe2c 	bl	80027bc <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xb2>
		Error_Handler();
 8000b6a:	f000 fabb 	bl	80010e4 <Error_Handler>
	}
}
 8000b6e:	bf00      	nop
 8000b70:	3768      	adds	r7, #104	; 0x68
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	58000400 	.word	0x58000400

08000b7c <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SUBGHZ_Init+0x20>)
 8000b82:	2210      	movs	r2, #16
 8000b84:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_SUBGHZ_Init+0x20>)
 8000b88:	f002 fb8c 	bl	80032a4 <HAL_SUBGHZ_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 8000b92:	f000 faa7 	bl	80010e4 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000110 	.word	0x20000110

08000ba0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <MX_TIM1_Init+0xa0>)
 8000bc0:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <MX_TIM1_Init+0xa4>)
 8000bc2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_TIM1_Init+0xa0>)
 8000bc6:	222f      	movs	r2, #47	; 0x2f
 8000bc8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_TIM1_Init+0xa0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_TIM1_Init+0xa0>)
 8000bd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_TIM1_Init+0xa0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_TIM1_Init+0xa0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_TIM1_Init+0xa0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000bea:	4815      	ldr	r0, [pc, #84]	; (8000c40 <MX_TIM1_Init+0xa0>)
 8000bec:	f002 ff7a 	bl	8003ae4 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000bf6:	f000 fa75 	bl	80010e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <MX_TIM1_Init+0xa0>)
 8000c08:	f003 f999 	bl	8003f3e <HAL_TIM_ConfigClockSource>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x76>
		Error_Handler();
 8000c12:	f000 fa67 	bl	80010e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <MX_TIM1_Init+0xa0>)
 8000c28:	f003 fb70 	bl	800430c <HAL_TIMEx_MasterConfigSynchronization>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000c32:	f000 fa57 	bl	80010e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000011c 	.word	0x2000011c
 8000c44:	40012c00 	.word	0x40012c00

08000c48 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 48 - 1;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c70:	222f      	movs	r2, #47	; 0x2f
 8000c72:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000001 - 1;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c7c:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <MX_TIM2_Init+0x98>)
 8000c7e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000c8c:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c8e:	f002 ff29 	bl	8003ae4 <HAL_TIM_Base_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x54>
		Error_Handler();
 8000c98:	f000 fa24 	bl	80010e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000caa:	f003 f948 	bl	8003f3e <HAL_TIM_ConfigClockSource>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000cb4:	f000 fa16 	bl	80010e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000cc6:	f003 fb21 	bl	800430c <HAL_TIMEx_MasterConfigSynchronization>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000cd0:	f000 fa08 	bl	80010e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000168 	.word	0x20000168
 8000ce0:	000f4240 	.word	0x000f4240

08000ce4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000cea:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <MX_USART2_UART_Init+0x94>)
 8000cec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000d2c:	4811      	ldr	r0, [pc, #68]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000d2e:	f003 fb87 	bl	8004440 <HAL_UART_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000d38:	f000 f9d4 	bl	80010e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000d40:	f004 f8b7 	bl	8004eb2 <HAL_UARTEx_SetTxFifoThreshold>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000d4a:	f000 f9cb 	bl	80010e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000d52:	f004 f8ec 	bl	8004f2e <HAL_UARTEx_SetRxFifoThreshold>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000d5c:	f000 f9c2 	bl	80010e4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_USART2_UART_Init+0x90>)
 8000d62:	f004 f86e 	bl	8004e42 <HAL_UARTEx_DisableFifoMode>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000d6c:	f000 f9ba 	bl	80010e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200001b4 	.word	0x200001b4
 8000d78:	40004400 	.word	0x40004400

08000d7c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fc17 	bl	80005c4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	2002      	movs	r0, #2
 8000d98:	f7ff fc14 	bl	80005c4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	2004      	movs	r0, #4
 8000d9e:	f7ff fc11 	bl	80005c4 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000da8:	481f      	ldr	r0, [pc, #124]	; (8000e28 <MX_GPIO_Init+0xac>)
 8000daa:	f000 fe9b 	bl	8001ae4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 8000dae:	2200      	movs	r2, #0
 8000db0:	2138      	movs	r1, #56	; 0x38
 8000db2:	481e      	ldr	r0, [pc, #120]	; (8000e2c <MX_GPIO_Init+0xb0>)
 8000db4:	f000 fe96 	bl	8001ae4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8000db8:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000dbc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4816      	ldr	r0, [pc, #88]	; (8000e28 <MX_GPIO_Init+0xac>)
 8000dd0:	f000 fd28 	bl	8001824 <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 8000dd4:	2338      	movs	r3, #56	; 0x38
 8000dd6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	4810      	ldr	r0, [pc, #64]	; (8000e2c <MX_GPIO_Init+0xb0>)
 8000dea:	f000 fd1b 	bl	8001824 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8000dee:	2303      	movs	r3, #3
 8000df0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000df2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000df6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f000 fd0e 	bl	8001824 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 8000e08:	2340      	movs	r3, #64	; 0x40
 8000e0a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e0c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e10:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_GPIO_Init+0xb0>)
 8000e1c:	f000 fd02 	bl	8001824 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	48000800 	.word	0x48000800

08000e30 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_RX_DONE) {
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d176      	bne.n	8000f2e <DioIrqHndlr+0xfe>
		pkt_id++;
 8000e40:	4b82      	ldr	r3, [pc, #520]	; (800104c <DioIrqHndlr+0x21c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b80      	ldr	r3, [pc, #512]	; (800104c <DioIrqHndlr+0x21c>)
 8000e4a:	701a      	strb	r2, [r3, #0]
		SUBGRF_GetPayload(rx_cmd, &p_len, PAYLOAD_LENGTH);
 8000e4c:	2210      	movs	r2, #16
 8000e4e:	4980      	ldr	r1, [pc, #512]	; (8001050 <DioIrqHndlr+0x220>)
 8000e50:	4880      	ldr	r0, [pc, #512]	; (8001054 <DioIrqHndlr+0x224>)
 8000e52:	f006 f8f7 	bl	8007044 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 8000e56:	f006 ff16 	bl	8007c86 <SUBGRF_GetRssiInst>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b7e      	ldr	r3, [pc, #504]	; (8001058 <DioIrqHndlr+0x228>)
 8000e60:	701a      	strb	r2, [r3, #0]
		myPrintf("\nGFSK Received\r\n");
 8000e62:	487e      	ldr	r0, [pc, #504]	; (800105c <DioIrqHndlr+0x22c>)
 8000e64:	f7ff fb74 	bl	8000550 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	e00a      	b.n	8000e84 <DioIrqHndlr+0x54>
			myPrintf(" %x", rx_cmd[i]);
 8000e6e:	4a79      	ldr	r2, [pc, #484]	; (8001054 <DioIrqHndlr+0x224>)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	4619      	mov	r1, r3
 8000e78:	4879      	ldr	r0, [pc, #484]	; (8001060 <DioIrqHndlr+0x230>)
 8000e7a:	f7ff fb69 	bl	8000550 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b0f      	cmp	r3, #15
 8000e88:	d9f1      	bls.n	8000e6e <DioIrqHndlr+0x3e>
		}
		myPrintf("\r\n");
 8000e8a:	4876      	ldr	r0, [pc, #472]	; (8001064 <DioIrqHndlr+0x234>)
 8000e8c:	f7ff fb60 	bl	8000550 <myPrintf>

		if (pkt_id > 5) {
 8000e90:	4b6e      	ldr	r3, [pc, #440]	; (800104c <DioIrqHndlr+0x21c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	f240 80d5 	bls.w	8001044 <DioIrqHndlr+0x214>
			pkt_id = 0;
 8000e9a:	4b6c      	ldr	r3, [pc, #432]	; (800104c <DioIrqHndlr+0x21c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 8000ea0:	4871      	ldr	r0, [pc, #452]	; (8001068 <DioIrqHndlr+0x238>)
 8000ea2:	f002 fee1 	bl	8003c68 <HAL_TIM_Base_Start_IT>
			myPrintf(
 8000ea6:	4871      	ldr	r0, [pc, #452]	; (800106c <DioIrqHndlr+0x23c>)
 8000ea8:	f7ff fb52 	bl	8000550 <myPrintf>
					"\n########## Received Data Successful, now transmitting data ##########\r\n");
			myPrintf("########## Low Power Radio: 	##########\r\n");
 8000eac:	4870      	ldr	r0, [pc, #448]	; (8001070 <DioIrqHndlr+0x240>)
 8000eae:	f7ff fb4f 	bl	8000550 <myPrintf>
			myPrintf("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 8000eb2:	4870      	ldr	r0, [pc, #448]	; (8001074 <DioIrqHndlr+0x244>)
 8000eb4:	f7ff fb4c 	bl	8000550 <myPrintf>
			myPrintf("Modulation: GFSK PACKET\r\n");
 8000eb8:	486f      	ldr	r0, [pc, #444]	; (8001078 <DioIrqHndlr+0x248>)
 8000eba:	f7ff fb49 	bl	8000550 <myPrintf>
			myPrintf(
 8000ebe:	4a6f      	ldr	r2, [pc, #444]	; (800107c <DioIrqHndlr+0x24c>)
 8000ec0:	496f      	ldr	r1, [pc, #444]	; (8001080 <DioIrqHndlr+0x250>)
 8000ec2:	4870      	ldr	r0, [pc, #448]	; (8001084 <DioIrqHndlr+0x254>)
 8000ec4:	f7ff fb44 	bl	8000550 <myPrintf>
					"FREQUENCY MODS: UPLINK FREQ: %lu\r\n    DOWNLINK FREQ: %lu\r\n",
					FREQ_402_MHZ, FREQ_401_MHZ);
			myPrintf(
 8000ec8:	230e      	movs	r3, #14
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	2202      	movs	r2, #2
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	486d      	ldr	r0, [pc, #436]	; (8001088 <DioIrqHndlr+0x258>)
 8000ed4:	f7ff fb3c 	bl	8000550 <myPrintf>
					"POWER CONFIG:\r\n    PA_DUTY_CYCLE : %x,    HP_MAX: %x,\n\r    PA_SEL : %x,    POWER TX: %u dBm\n\r",
					PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 8000ed8:	4b6c      	ldr	r3, [pc, #432]	; (800108c <DioIrqHndlr+0x25c>)
 8000eda:	7b5b      	ldrb	r3, [r3, #13]
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
 8000edc:	4619      	mov	r1, r3
 8000ede:	486c      	ldr	r0, [pc, #432]	; (8001090 <DioIrqHndlr+0x260>)
 8000ee0:	f7ff fb36 	bl	8000550 <myPrintf>
			myPrintf("Packet Type: 			%d\n\r", pkt_params.PacketType);
 8000ee4:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <DioIrqHndlr+0x264>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	486b      	ldr	r0, [pc, #428]	; (8001098 <DioIrqHndlr+0x268>)
 8000eec:	f7ff fb30 	bl	8000550 <myPrintf>
			myPrintf("PayloadLength: 		%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8000ef0:	4b68      	ldr	r3, [pc, #416]	; (8001094 <DioIrqHndlr+0x264>)
 8000ef2:	7a1b      	ldrb	r3, [r3, #8]
			myPrintf("PayloadLength: 		%d\n\r",
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4869      	ldr	r0, [pc, #420]	; (800109c <DioIrqHndlr+0x26c>)
 8000ef8:	f7ff fb2a 	bl	8000550 <myPrintf>
			myPrintf("PreambleLength: 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8000efc:	4b65      	ldr	r3, [pc, #404]	; (8001094 <DioIrqHndlr+0x264>)
 8000efe:	885b      	ldrh	r3, [r3, #2]
			myPrintf("PreambleLength: 		%d\n\r",
 8000f00:	4619      	mov	r1, r3
 8000f02:	4867      	ldr	r0, [pc, #412]	; (80010a0 <DioIrqHndlr+0x270>)
 8000f04:	f7ff fb24 	bl	8000550 <myPrintf>
			myPrintf("HeaderType: 			%d\n\r",
					pkt_params.Params.Gfsk.HeaderType);
 8000f08:	4b62      	ldr	r3, [pc, #392]	; (8001094 <DioIrqHndlr+0x264>)
 8000f0a:	79db      	ldrb	r3, [r3, #7]
			myPrintf("HeaderType: 			%d\n\r",
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4865      	ldr	r0, [pc, #404]	; (80010a4 <DioIrqHndlr+0x274>)
 8000f10:	f7ff fb1e 	bl	8000550 <myPrintf>

			myPrintf(
 8000f14:	4864      	ldr	r0, [pc, #400]	; (80010a8 <DioIrqHndlr+0x278>)
 8000f16:	f7ff fb1b 	bl	8000550 <myPrintf>
					"If this message pop up then track in other NucleoWL55JC2 Receiver\r\n");
			myPrintf("------------- Wait for Test Complete --------------\r\n");
 8000f1a:	4864      	ldr	r0, [pc, #400]	; (80010ac <DioIrqHndlr+0x27c>)
 8000f1c:	f7ff fb18 	bl	8000550 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8000f20:	4863      	ldr	r0, [pc, #396]	; (80010b0 <DioIrqHndlr+0x280>)
 8000f22:	f7ff fb15 	bl	8000550 <myPrintf>
			myPrintf("The Transmitter will transmits packets now. \r\n");
 8000f26:	4863      	ldr	r0, [pc, #396]	; (80010b4 <DioIrqHndlr+0x284>)
 8000f28:	f7ff fb12 	bl	8000550 <myPrintf>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
			delay_us(1000000);
			pkt_id = 0;
		}
	}
}
 8000f2c:	e08a      	b.n	8001044 <DioIrqHndlr+0x214>
	} else if (radioIrq == IRQ_TX_DONE) {
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	f040 8087 	bne.w	8001044 <DioIrqHndlr+0x214>
		TX_FLAG = 0;
 8000f36:	4b60      	ldr	r3, [pc, #384]	; (80010b8 <DioIrqHndlr+0x288>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
		myPrintf("\n\r Test Command Transmitted Successful:  \r");
 8000f3c:	485f      	ldr	r0, [pc, #380]	; (80010bc <DioIrqHndlr+0x28c>)
 8000f3e:	f7ff fb07 	bl	8000550 <myPrintf>
		for (int i = 0; i < 16; i++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	e00a      	b.n	8000f5e <DioIrqHndlr+0x12e>
			myPrintf(" %02x", tx_cmd[i]);
 8000f48:	4a5d      	ldr	r2, [pc, #372]	; (80010c0 <DioIrqHndlr+0x290>)
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	485c      	ldr	r0, [pc, #368]	; (80010c4 <DioIrqHndlr+0x294>)
 8000f54:	f7ff fafc 	bl	8000550 <myPrintf>
		for (int i = 0; i < 16; i++) {
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	ddf1      	ble.n	8000f48 <DioIrqHndlr+0x118>
		myPrintf("\n\n");
 8000f64:	4858      	ldr	r0, [pc, #352]	; (80010c8 <DioIrqHndlr+0x298>)
 8000f66:	f7ff faf3 	bl	8000550 <myPrintf>
		pkt_id++;
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <DioIrqHndlr+0x21c>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <DioIrqHndlr+0x21c>)
 8000f74:	701a      	strb	r2, [r3, #0]
		if (pkt_id > 5) {
 8000f76:	4b35      	ldr	r3, [pc, #212]	; (800104c <DioIrqHndlr+0x21c>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b05      	cmp	r3, #5
 8000f7c:	d962      	bls.n	8001044 <DioIrqHndlr+0x214>
			HAL_TIM_Base_Stop(&htim1);
 8000f7e:	483a      	ldr	r0, [pc, #232]	; (8001068 <DioIrqHndlr+0x238>)
 8000f80:	f002 fe4c 	bl	8003c1c <HAL_TIM_Base_Stop>
			myPrintf("\n\r Testing,Receive and Transmit done.  \r\n");
 8000f84:	4851      	ldr	r0, [pc, #324]	; (80010cc <DioIrqHndlr+0x29c>)
 8000f86:	f7ff fae3 	bl	8000550 <myPrintf>
			myPrintf("\n########## Receive and Transmits ##########\r\n");
 8000f8a:	4851      	ldr	r0, [pc, #324]	; (80010d0 <DioIrqHndlr+0x2a0>)
 8000f8c:	f7ff fae0 	bl	8000550 <myPrintf>
			myPrintf("########## Low Power Radio Receiver: 	##########\r\n");
 8000f90:	4850      	ldr	r0, [pc, #320]	; (80010d4 <DioIrqHndlr+0x2a4>)
 8000f92:	f7ff fadd 	bl	8000550 <myPrintf>
			myPrintf("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 8000f96:	4837      	ldr	r0, [pc, #220]	; (8001074 <DioIrqHndlr+0x244>)
 8000f98:	f7ff fada 	bl	8000550 <myPrintf>
			myPrintf("Modulation: GFSK PACKET\r\n");
 8000f9c:	4836      	ldr	r0, [pc, #216]	; (8001078 <DioIrqHndlr+0x248>)
 8000f9e:	f7ff fad7 	bl	8000550 <myPrintf>
			myPrintf(
 8000fa2:	4a36      	ldr	r2, [pc, #216]	; (800107c <DioIrqHndlr+0x24c>)
 8000fa4:	4936      	ldr	r1, [pc, #216]	; (8001080 <DioIrqHndlr+0x250>)
 8000fa6:	4837      	ldr	r0, [pc, #220]	; (8001084 <DioIrqHndlr+0x254>)
 8000fa8:	f7ff fad2 	bl	8000550 <myPrintf>
			myPrintf(
 8000fac:	230e      	movs	r3, #14
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4834      	ldr	r0, [pc, #208]	; (8001088 <DioIrqHndlr+0x258>)
 8000fb8:	f7ff faca 	bl	8000550 <myPrintf>
					mod_params.Params.Gfsk.Bandwidth);
 8000fbc:	4b33      	ldr	r3, [pc, #204]	; (800108c <DioIrqHndlr+0x25c>)
 8000fbe:	7b5b      	ldrb	r3, [r3, #13]
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4833      	ldr	r0, [pc, #204]	; (8001090 <DioIrqHndlr+0x260>)
 8000fc4:	f7ff fac4 	bl	8000550 <myPrintf>
			myPrintf("Packet Type: 			%d\n\r", pkt_params.PacketType);
 8000fc8:	4b32      	ldr	r3, [pc, #200]	; (8001094 <DioIrqHndlr+0x264>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4832      	ldr	r0, [pc, #200]	; (8001098 <DioIrqHndlr+0x268>)
 8000fd0:	f7ff fabe 	bl	8000550 <myPrintf>
					pkt_params.Params.Gfsk.PayloadLength);
 8000fd4:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <DioIrqHndlr+0x264>)
 8000fd6:	7a1b      	ldrb	r3, [r3, #8]
			myPrintf("PayloadLength: 		%d\n\r",
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4830      	ldr	r0, [pc, #192]	; (800109c <DioIrqHndlr+0x26c>)
 8000fdc:	f7ff fab8 	bl	8000550 <myPrintf>
					pkt_params.Params.Gfsk.PreambleLength);
 8000fe0:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <DioIrqHndlr+0x264>)
 8000fe2:	885b      	ldrh	r3, [r3, #2]
			myPrintf("PreambleLength: 		%d\n\r",
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	482e      	ldr	r0, [pc, #184]	; (80010a0 <DioIrqHndlr+0x270>)
 8000fe8:	f7ff fab2 	bl	8000550 <myPrintf>
					pkt_params.Params.Gfsk.HeaderType);
 8000fec:	4b29      	ldr	r3, [pc, #164]	; (8001094 <DioIrqHndlr+0x264>)
 8000fee:	79db      	ldrb	r3, [r3, #7]
			myPrintf("HeaderType: 			%d\n\r",
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	482c      	ldr	r0, [pc, #176]	; (80010a4 <DioIrqHndlr+0x274>)
 8000ff4:	f7ff faac 	bl	8000550 <myPrintf>
			myPrintf(
 8000ff8:	4837      	ldr	r0, [pc, #220]	; (80010d8 <DioIrqHndlr+0x2a8>)
 8000ffa:	f7ff faa9 	bl	8000550 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8000ffe:	482c      	ldr	r0, [pc, #176]	; (80010b0 <DioIrqHndlr+0x280>)
 8001000:	f7ff faa6 	bl	8000550 <myPrintf>
			SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 8001004:	481e      	ldr	r0, [pc, #120]	; (8001080 <DioIrqHndlr+0x250>)
 8001006:	f006 fb7d 	bl	8007704 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 800100a:	2100      	movs	r1, #0
 800100c:	2001      	movs	r0, #1
 800100e:	f006 ffc1 	bl	8007f94 <SUBGRF_SetSwitch>
			SUBGRF_SetRxBoosted(0xFFFFFF);
 8001012:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001016:	f006 f9a1 	bl	800735c <SUBGRF_SetRxBoosted>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001020:	482e      	ldr	r0, [pc, #184]	; (80010dc <DioIrqHndlr+0x2ac>)
 8001022:	f000 fd5f 	bl	8001ae4 <HAL_GPIO_WritePin>
			delay_us(1000000);  // 500ms delay
 8001026:	482e      	ldr	r0, [pc, #184]	; (80010e0 <DioIrqHndlr+0x2b0>)
 8001028:	f7ff fa78 	bl	800051c <delay_us>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001032:	482a      	ldr	r0, [pc, #168]	; (80010dc <DioIrqHndlr+0x2ac>)
 8001034:	f000 fd56 	bl	8001ae4 <HAL_GPIO_WritePin>
			delay_us(1000000);
 8001038:	4829      	ldr	r0, [pc, #164]	; (80010e0 <DioIrqHndlr+0x2b0>)
 800103a:	f7ff fa6f 	bl	800051c <delay_us>
			pkt_id = 0;
 800103e:	4b03      	ldr	r3, [pc, #12]	; (800104c <DioIrqHndlr+0x21c>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000269 	.word	0x20000269
 8001050:	20000000 	.word	0x20000000
 8001054:	20000248 	.word	0x20000248
 8001058:	20000268 	.word	0x20000268
 800105c:	08009724 	.word	0x08009724
 8001060:	08009738 	.word	0x08009738
 8001064:	0800973c 	.word	0x0800973c
 8001068:	2000011c 	.word	0x2000011c
 800106c:	08009740 	.word	0x08009740
 8001070:	0800978c 	.word	0x0800978c
 8001074:	0800953c 	.word	0x0800953c
 8001078:	08009570 	.word	0x08009570
 800107c:	17ec7f18 	.word	0x17ec7f18
 8001080:	17fbc158 	.word	0x17fbc158
 8001084:	0800958c 	.word	0x0800958c
 8001088:	080095c8 	.word	0x080095c8
 800108c:	200000f4 	.word	0x200000f4
 8001090:	08009628 	.word	0x08009628
 8001094:	200000e0 	.word	0x200000e0
 8001098:	08009644 	.word	0x08009644
 800109c:	0800965c 	.word	0x0800965c
 80010a0:	08009674 	.word	0x08009674
 80010a4:	0800968c 	.word	0x0800968c
 80010a8:	080097b8 	.word	0x080097b8
 80010ac:	080097fc 	.word	0x080097fc
 80010b0:	080096e4 	.word	0x080096e4
 80010b4:	08009834 	.word	0x08009834
 80010b8:	2000026c 	.word	0x2000026c
 80010bc:	08009864 	.word	0x08009864
 80010c0:	20000258 	.word	0x20000258
 80010c4:	08009890 	.word	0x08009890
 80010c8:	08009898 	.word	0x08009898
 80010cc:	0800989c 	.word	0x0800989c
 80010d0:	080094d8 	.word	0x080094d8
 80010d4:	08009508 	.word	0x08009508
 80010d8:	080096a0 	.word	0x080096a0
 80010dc:	48000400 	.word	0x48000400
 80010e0:	000f4240 	.word	0x000f4240

080010e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010ec:	e7fe      	b.n	80010ec <Error_Handler+0x8>

080010ee <LL_AHB2_GRP1_EnableClock>:
{
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4313      	orrs	r3, r2
 8001104:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4013      	ands	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800112c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4313      	orrs	r3, r2
 8001134:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4013      	ands	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800114e:	b480      	push	{r7}
 8001150:	b085      	sub	sp, #20
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800115c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4313      	orrs	r3, r2
 8001164:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4013      	ands	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800118c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4313      	orrs	r3, r2
 8001194:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4013      	ands	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff ffdb 	bl	800117e <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2032      	movs	r0, #50	; 0x32
 80011ce:	f000 faf4 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80011d2:	2032      	movs	r0, #50	; 0x32
 80011d4:	f000 fb0b 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <HAL_TIM_Base_MspInit+0x44>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10c      	bne.n	800120c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011f6:	f7ff ffaa 	bl	800114e <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2018      	movs	r0, #24
 8001200:	f000 fadb 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001204:	2018      	movs	r0, #24
 8001206:	f000 faf2 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800120a:	e007      	b.n	800121c <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001214:	d102      	bne.n	800121c <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff ff81 	bl	800111e <LL_APB1_GRP1_EnableClock>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40012c00 	.word	0x40012c00

08001228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b096      	sub	sp, #88	; 0x58
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2238      	movs	r2, #56	; 0x38
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f007 fca1 	bl	8008b90 <memset>
  if(huart->Instance==USART2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d126      	bne.n	80012a6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001258:	2302      	movs	r3, #2
 800125a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800125c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001260:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fe68 	bl	8002f3c <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001272:	f7ff ff37 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001276:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800127a:	f7ff ff50 	bl	800111e <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff ff35 	bl	80010ee <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001284:	230c      	movs	r3, #12
 8001286:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001294:	2307      	movs	r3, #7
 8001296:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800129c:	4619      	mov	r1, r3
 800129e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a2:	f000 fabf 	bl	8001824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	3758      	adds	r7, #88	; 0x58
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40004400 	.word	0x40004400

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <NMI_Handler+0x4>

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fa:	f000 f975 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <TIM1_UP_IRQHandler+0x10>)
 800130a:	f002 fcf9 	bl	8003d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000011c 	.word	0x2000011c

08001318 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <SUBGHZ_Radio_IRQHandler+0x10>)
 800131e:	f002 fa43 	bl	80037a8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000110 	.word	0x20000110

0800132c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_GetTick+0x24>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800134a:	f000 f892 	bl	8001472 <TIMER_IF_GetTimerValue>
 800134e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000273 	.word	0x20000273

08001360 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f8af 	bl	80014ce <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f007 fbfa 	bl	8008ba0 <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20010000 	.word	0x20010000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	20000274 	.word	0x20000274
 80013e0:	20000588 	.word	0x20000588

080013e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001428:	79fb      	ldrb	r3, [r7, #7]
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001438:	4b02      	ldr	r3, [pc, #8]	; (8001444 <TIMER_IF_SetTimerContext+0x10>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000278 	.word	0x20000278

08001448 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <TIMER_IF_GetTimerContext+0x10>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000278 	.word	0x20000278

0800145c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8001466:	687b      	ldr	r3, [r7, #4]
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001492:	687b      	ldr	r3, [r7, #4]
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b085      	sub	sp, #20
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e4:	f7ff ff7e 	bl	80013e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <LoopForever+0x6>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	; (8001520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <LoopForever+0xe>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	; (800152c <LoopForever+0x16>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800150e:	f007 fb4d 	bl	8008bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001512:	f7ff f9a7 	bl	8000864 <main>

08001516 <LoopForever>:

LoopForever:
    b LoopForever
 8001516:	e7fe      	b.n	8001516 <LoopForever>
  ldr   r0, =_estack
 8001518:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001524:	08009b80 	.word	0x08009b80
  ldr r2, =_sbss
 8001528:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800152c:	20000588 	.word	0x20000588

08001530 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153e:	2003      	movs	r0, #3
 8001540:	f000 f930 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001544:	f001 fb1c 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8001548:	4603      	mov	r3, r0
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <HAL_Init+0x3c>)
 800154c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800154e:	2000      	movs	r0, #0
 8001550:	f000 f810 	bl	8001574 <HAL_InitTick>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	71fb      	strb	r3, [r7, #7]
 800155e:	e001      	b.n	8001564 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001560:	f7ff fe25 	bl	80011ae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001564:	79fb      	ldrb	r3, [r7, #7]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000004 	.word	0x20000004

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_InitTick+0x6c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d024      	beq.n	80015d2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001588:	f001 fafa 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 800158c:	4602      	mov	r2, r0
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HAL_InitTick+0x6c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4619      	mov	r1, r3
 8001594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001598:	fbb3 f3f1 	udiv	r3, r3, r1
 800159c:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f932 	bl	800180a <HAL_SYSTICK_Config>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	d809      	bhi.n	80015c6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b2:	2200      	movs	r2, #0
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ba:	f000 f8fe 	bl	80017ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_InitTick+0x70>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e007      	b.n	80015d6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e004      	b.n	80015d6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e001      	b.n	80015d6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	20000008 	.word	0x20000008

080015e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x1c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x20>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_IncTick+0x20>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	2000000c 	.word	0x2000000c
 8001608:	2000027c 	.word	0x2000027c

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4906      	ldr	r1, [pc, #24]	; (80016a4 <__NVIC_EnableIRQ+0x34>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001784:	f7ff ff90 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff2d 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff44 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff92 	bl	80016fc <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff61 	bl	80016a8 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff37 	bl	8001670 <__NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffa4 	bl	8001760 <SysTick_Config>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001832:	e140      	b.n	8001ab6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2101      	movs	r1, #1
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	4013      	ands	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8132 	beq.w	8001ab0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b01      	cmp	r3, #1
 8001856:	d005      	beq.n	8001864 <HAL_GPIO_Init+0x40>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d130      	bne.n	80018c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800189a:	2201      	movs	r2, #1
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	f003 0201 	and.w	r2, r3, #1
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d017      	beq.n	8001902 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d123      	bne.n	8001956 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	220f      	movs	r2, #15
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	6939      	ldr	r1, [r7, #16]
 8001952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0203 	and.w	r2, r3, #3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 808c 	beq.w	8001ab0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001998:	4a4e      	ldr	r2, [pc, #312]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	2207      	movs	r2, #7
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019c2:	d00d      	beq.n	80019e0 <HAL_GPIO_Init+0x1bc>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a44      	ldr	r2, [pc, #272]	; (8001ad8 <HAL_GPIO_Init+0x2b4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d007      	beq.n	80019dc <HAL_GPIO_Init+0x1b8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a43      	ldr	r2, [pc, #268]	; (8001adc <HAL_GPIO_Init+0x2b8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_GPIO_Init+0x1b4>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e004      	b.n	80019e2 <HAL_GPIO_Init+0x1be>
 80019d8:	2307      	movs	r3, #7
 80019da:	e002      	b.n	80019e2 <HAL_GPIO_Init+0x1be>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_GPIO_Init+0x1be>
 80019e0:	2300      	movs	r3, #0
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	f002 0203 	and.w	r2, r2, #3
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	4093      	lsls	r3, r2
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019f2:	4938      	ldr	r1, [pc, #224]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a00:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <HAL_GPIO_Init+0x2bc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a24:	4a2e      	ldr	r2, [pc, #184]	; (8001ae0 <HAL_GPIO_Init+0x2bc>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_GPIO_Init+0x2bc>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a4e:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <HAL_GPIO_Init+0x2bc>)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_GPIO_Init+0x2bc>)
 8001a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a5a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001a7a:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <HAL_GPIO_Init+0x2bc>)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_GPIO_Init+0x2bc>)
 8001a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a88:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <HAL_GPIO_Init+0x2bc>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f47f aeb7 	bne.w	8001834 <HAL_GPIO_Init+0x10>
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	bf00      	nop
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	58000800 	.word	0x58000800

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	58000400 	.word	0x58000400

08001b30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_PWREx_GetVoltageRange+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	58000400 	.word	0x58000400

08001b48 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b58:	d101      	bne.n	8001b5e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	58000400 	.word	0x58000400

08001b6c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bb6:	d101      	bne.n	8001bbc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c10:	d101      	bne.n	8001c16 <LL_RCC_HSE_IsReady+0x18>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <LL_RCC_HSE_IsReady+0x1a>
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6a:	d101      	bne.n	8001c70 <LL_RCC_HSI_IsReady+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_RCC_HSI_IsReady+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d101      	bne.n	8001cba <LL_RCC_LSE_IsReady+0x18>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <LL_RCC_LSE_IsReady+0x1a>
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d101      	bne.n	8001d1c <LL_RCC_LSI_IsReady+0x18>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_RCC_LSI_IsReady+0x1a>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6013      	str	r3, [r2, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6013      	str	r3, [r2, #0]
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d101      	bne.n	8001d74 <LL_RCC_MSI_IsReady+0x16>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <LL_RCC_MSI_IsReady+0x18>
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d101      	bne.n	8001d94 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e90:	f023 020f 	bic.w	r2, r3, #15
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f9e:	d101      	bne.n	8001fa4 <LL_RCC_PLL_IsReady+0x18>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <LL_RCC_PLL_IsReady+0x1a>
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201a:	d101      	bne.n	8002020 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800203e:	d101      	bne.n	8002044 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002056:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800205a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002062:	d101      	bne.n	8002068 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002084:	d101      	bne.n	800208a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020a6:	d101      	bne.n	80020ac <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e36f      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ca:	f7ff fea6 	bl	8001e1a <LL_RCC_GetSysClkSource>
 80020ce:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d0:	f7ff ff8f 	bl	8001ff2 <LL_RCC_PLL_GetMainSource>
 80020d4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80c4 	beq.w	800226c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_OscConfig+0x3e>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d176      	bne.n	80021de <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d173      	bne.n	80021de <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e353      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_OscConfig+0x68>
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800211e:	e006      	b.n	800212e <HAL_RCC_OscConfig+0x76>
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212e:	4293      	cmp	r3, r2
 8002130:	d222      	bcs.n	8002178 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fd5a 	bl	8002bf0 <RCC_SetFlashLatencyFromMSIRange>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e331      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fe2b 	bl	8001dcc <LL_RCC_MSI_SetCalibTrimming>
 8002176:	e021      	b.n	80021bc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002182:	f043 0308 	orr.w	r3, r3, #8
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fe12 	bl	8001dcc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fd1f 	bl	8002bf0 <RCC_SetFlashLatencyFromMSIRange>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e2f6      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021bc:	f000 fce0 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4aa7      	ldr	r2, [pc, #668]	; (8002460 <HAL_RCC_OscConfig+0x3a8>)
 80021c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80021c6:	4ba7      	ldr	r3, [pc, #668]	; (8002464 <HAL_RCC_OscConfig+0x3ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff f9d2 	bl	8001574 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
 80021d2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d047      	beq.n	800226a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80021da:	7cfb      	ldrb	r3, [r7, #19]
 80021dc:	e2e5      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d02c      	beq.n	8002240 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021e6:	f7ff fd9e 	bl	8001d26 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ea:	f7ff f8a5 	bl	8001338 <HAL_GetTick>
 80021ee:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f2:	f7ff f8a1 	bl	8001338 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e2d2      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002204:	f7ff fdab 	bl	8001d5e <LL_RCC_MSI_IsReady>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f1      	beq.n	80021f2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fdc7 	bl	8001dcc <LL_RCC_MSI_SetCalibTrimming>
 800223e:	e015      	b.n	800226c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002240:	f7ff fd7f 	bl	8001d42 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002244:	f7ff f878 	bl	8001338 <HAL_GetTick>
 8002248:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800224c:	f7ff f874 	bl	8001338 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e2a5      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800225e:	f7ff fd7e 	bl	8001d5e <LL_RCC_MSI_IsReady>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f1      	bne.n	800224c <HAL_RCC_OscConfig+0x194>
 8002268:	e000      	b.n	800226c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800226a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d058      	beq.n	800232a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2b08      	cmp	r3, #8
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x1d2>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	2b0c      	cmp	r3, #12
 8002282:	d108      	bne.n	8002296 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d105      	bne.n	8002296 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d14b      	bne.n	800232a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e289      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d102      	bne.n	80022bc <HAL_RCC_OscConfig+0x204>
 80022b6:	f7ff fc86 	bl	8001bc6 <LL_RCC_HSE_Enable>
 80022ba:	e00d      	b.n	80022d8 <HAL_RCC_OscConfig+0x220>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80022c4:	d104      	bne.n	80022d0 <HAL_RCC_OscConfig+0x218>
 80022c6:	f7ff fc51 	bl	8001b6c <LL_RCC_HSE_EnableTcxo>
 80022ca:	f7ff fc7c 	bl	8001bc6 <LL_RCC_HSE_Enable>
 80022ce:	e003      	b.n	80022d8 <HAL_RCC_OscConfig+0x220>
 80022d0:	f7ff fc87 	bl	8001be2 <LL_RCC_HSE_Disable>
 80022d4:	f7ff fc58 	bl	8001b88 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d012      	beq.n	8002306 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff f82a 	bl	8001338 <HAL_GetTick>
 80022e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff f826 	bl	8001338 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e257      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80022fa:	f7ff fc80 	bl	8001bfe <LL_RCC_HSE_IsReady>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f1      	beq.n	80022e8 <HAL_RCC_OscConfig+0x230>
 8002304:	e011      	b.n	800232a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7ff f817 	bl	8001338 <HAL_GetTick>
 800230a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230e:	f7ff f813 	bl	8001338 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	; 0x64
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e244      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002320:	f7ff fc6d 	bl	8001bfe <LL_RCC_HSE_IsReady>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f1      	bne.n	800230e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d046      	beq.n	80023c4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d005      	beq.n	8002348 <HAL_RCC_OscConfig+0x290>
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d10e      	bne.n	8002360 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d10b      	bne.n	8002360 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e22a      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fc8e 	bl	8001c7a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800235e:	e031      	b.n	80023c4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d019      	beq.n	800239c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002368:	f7ff fc5a 	bl	8001c20 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe ffe4 	bl	8001338 <HAL_GetTick>
 8002370:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002374:	f7fe ffe0 	bl	8001338 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e211      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002386:	f7ff fc67 	bl	8001c58 <LL_RCC_HSI_IsReady>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f1      	beq.n	8002374 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fc70 	bl	8001c7a <LL_RCC_HSI_SetCalibTrimming>
 800239a:	e013      	b.n	80023c4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239c:	f7ff fc4e 	bl	8001c3c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe ffca 	bl	8001338 <HAL_GetTick>
 80023a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a8:	f7fe ffc6 	bl	8001338 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1f7      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80023ba:	f7ff fc4d 	bl	8001c58 <LL_RCC_HSI_IsReady>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f1      	bne.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d06e      	beq.n	80024ae <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d056      	beq.n	8002486 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d031      	beq.n	8002454 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e1d0      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d013      	beq.n	800243a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002412:	f7ff fc67 	bl	8001ce4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002416:	f7fe ff8f 	bl	8001338 <HAL_GetTick>
 800241a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241e:	f7fe ff8b 	bl	8001338 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b11      	cmp	r3, #17
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1bc      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002430:	f7ff fc68 	bl	8001d04 <LL_RCC_LSI_IsReady>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f1      	bne.n	800241e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800243a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002442:	f023 0210 	bic.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002454:	f7ff fc36 	bl	8001cc4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7fe ff6e 	bl	8001338 <HAL_GetTick>
 800245c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800245e:	e00c      	b.n	800247a <HAL_RCC_OscConfig+0x3c2>
 8002460:	20000004 	.word	0x20000004
 8002464:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7fe ff66 	bl	8001338 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b11      	cmp	r3, #17
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e197      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800247a:	f7ff fc43 	bl	8001d04 <LL_RCC_LSI_IsReady>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f1      	beq.n	8002468 <HAL_RCC_OscConfig+0x3b0>
 8002484:	e013      	b.n	80024ae <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002486:	f7ff fc2d 	bl	8001ce4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7fe ff55 	bl	8001338 <HAL_GetTick>
 800248e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002492:	f7fe ff51 	bl	8001338 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b11      	cmp	r3, #17
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e182      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80024a4:	f7ff fc2e 	bl	8001d04 <LL_RCC_LSI_IsReady>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f1      	bne.n	8002492 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80d8 	beq.w	800266c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80024bc:	f7ff fb44 	bl	8001b48 <LL_PWR_IsEnabledBkUpAccess>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d113      	bne.n	80024ee <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80024c6:	f7ff fb25 	bl	8001b14 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7fe ff35 	bl	8001338 <HAL_GetTick>
 80024ce:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7fe ff31 	bl	8001338 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e162      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80024e4:	f7ff fb30 	bl	8001b48 <LL_PWR_IsEnabledBkUpAccess>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f1      	beq.n	80024d2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d07b      	beq.n	80025ee <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b85      	cmp	r3, #133	; 0x85
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b05      	cmp	r3, #5
 8002504:	d109      	bne.n	800251a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fe ff0d 	bl	8001338 <HAL_GetTick>
 800251e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fe feff 	bl	8001338 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e12e      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800254c:	f7ff fba9 	bl	8001ca2 <LL_RCC_LSE_IsReady>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0ef      	beq.n	8002536 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b81      	cmp	r3, #129	; 0x81
 800255c:	d003      	beq.n	8002566 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b85      	cmp	r3, #133	; 0x85
 8002564:	d121      	bne.n	80025aa <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe fee7 	bl	8001338 <HAL_GetTick>
 800256a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe fed9 	bl	8001338 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e108      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ec      	beq.n	8002582 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80025a8:	e060      	b.n	800266c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fec5 	bl	8001338 <HAL_GetTick>
 80025ae:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7fe feb7 	bl	8001338 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0e6      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ec      	bne.n	80025c6 <HAL_RCC_OscConfig+0x50e>
 80025ec:	e03e      	b.n	800266c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7fe fea3 	bl	8001338 <HAL_GetTick>
 80025f2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fe95 	bl	8001338 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0c4      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ec      	bne.n	800260a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002630:	f7fe fe82 	bl	8001338 <HAL_GetTick>
 8002634:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800264a:	e00a      	b.n	8002662 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7fe fe74 	bl	8001338 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0a3      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002662:	f7ff fb1e 	bl	8001ca2 <LL_RCC_LSE_IsReady>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ef      	bne.n	800264c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8099 	beq.w	80027a8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d06c      	beq.n	8002756 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	2b02      	cmp	r3, #2
 8002682:	d14b      	bne.n	800271c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002684:	f7ff fc74 	bl	8001f70 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fe56 	bl	8001338 <HAL_GetTick>
 800268c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fe52 	bl	8001338 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b0a      	cmp	r3, #10
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e083      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80026a2:	f7ff fc73 	bl	8001f8c <LL_RCC_PLL_IsReady>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f1      	bne.n	8002690 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCC_OscConfig+0x6fc>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026c4:	0212      	lsls	r2, r2, #8
 80026c6:	4311      	orrs	r1, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026cc:	4311      	orrs	r1, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026d2:	4311      	orrs	r1, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026d8:	430a      	orrs	r2, r1
 80026da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026de:	4313      	orrs	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e2:	f7ff fc37 	bl	8001f54 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe fe1f 	bl	8001338 <HAL_GetTick>
 80026fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe fe1b 	bl	8001338 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b0a      	cmp	r3, #10
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e04c      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002710:	f7ff fc3c 	bl	8001f8c <LL_RCC_PLL_IsReady>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f1      	beq.n	80026fe <HAL_RCC_OscConfig+0x646>
 800271a:	e045      	b.n	80027a8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	f7ff fc28 	bl	8001f70 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe fe0a 	bl	8001338 <HAL_GetTick>
 8002724:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fe06 	bl	8001338 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b0a      	cmp	r3, #10
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e037      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800273a:	f7ff fc27 	bl	8001f8c <LL_RCC_PLL_IsReady>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f1      	bne.n	8002728 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800274e:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <HAL_RCC_OscConfig+0x700>)
 8002750:	4013      	ands	r3, r2
 8002752:	60cb      	str	r3, [r1, #12]
 8002754:	e028      	b.n	80027a8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e023      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f003 0203 	and.w	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	429a      	cmp	r2, r3
 8002776:	d115      	bne.n	80027a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	429a      	cmp	r2, r3
 8002784:	d10e      	bne.n	80027a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	429a      	cmp	r2, r3
 8002794:	d106      	bne.n	80027a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	11c1808c 	.word	0x11c1808c
 80027b8:	eefefffc 	.word	0xeefefffc

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e12c      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b98      	ldr	r3, [pc, #608]	; (8002a34 <HAL_RCC_ClockConfig+0x278>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d91b      	bls.n	8002816 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b95      	ldr	r3, [pc, #596]	; (8002a34 <HAL_RCC_ClockConfig+0x278>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 0207 	bic.w	r2, r3, #7
 80027e6:	4993      	ldr	r1, [pc, #588]	; (8002a34 <HAL_RCC_ClockConfig+0x278>)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ee:	f7fe fda3 	bl	8001338 <HAL_GetTick>
 80027f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027f6:	f7fe fd9f 	bl	8001338 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e110      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002808:	4b8a      	ldr	r3, [pc, #552]	; (8002a34 <HAL_RCC_ClockConfig+0x278>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d1ef      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fb02 	bl	8001e30 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800282c:	f7fe fd84 	bl	8001338 <HAL_GetTick>
 8002830:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002834:	f7fe fd80 	bl	8001338 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0f1      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002846:	f7ff fbdf 	bl	8002008 <LL_RCC_IsActiveFlag_HPRE>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f1      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d016      	beq.n	800288a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff faf8 	bl	8001e56 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002866:	f7fe fd67 	bl	8001338 <HAL_GetTick>
 800286a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800286e:	f7fe fd63 	bl	8001338 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0d4      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002880:	f7ff fbd3 	bl	800202a <LL_RCC_IsActiveFlag_C2HPRE>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f1      	beq.n	800286e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff faf0 	bl	8001e80 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028a0:	f7fe fd4a 	bl	8001338 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028a8:	f7fe fd46 	bl	8001338 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e0b7      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80028ba:	f7ff fbc8 	bl	800204e <LL_RCC_IsActiveFlag_SHDHPRE>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f1      	beq.n	80028a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d016      	beq.n	80028fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fae9 	bl	8001eac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028da:	f7fe fd2d 	bl	8001338 <HAL_GetTick>
 80028de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028e2:	f7fe fd29 	bl	8001338 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e09a      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028f4:	f7ff fbbd 	bl	8002072 <LL_RCC_IsActiveFlag_PPRE1>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f1      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d017      	beq.n	800293a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fade 	bl	8001ed2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002916:	f7fe fd0f 	bl	8001338 <HAL_GetTick>
 800291a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800291e:	f7fe fd0b 	bl	8001338 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e07c      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002930:	f7ff fbb0 	bl	8002094 <LL_RCC_IsActiveFlag_PPRE2>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f1      	beq.n	800291e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d043      	beq.n	80029ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d106      	bne.n	800295c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800294e:	f7ff f956 	bl	8001bfe <LL_RCC_HSE_IsReady>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11e      	bne.n	8002996 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e066      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d106      	bne.n	8002972 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002964:	f7ff fb12 	bl	8001f8c <LL_RCC_PLL_IsReady>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d113      	bne.n	8002996 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e05b      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800297a:	f7ff f9f0 	bl	8001d5e <LL_RCC_MSI_IsReady>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d108      	bne.n	8002996 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e050      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002988:	f7ff f966 	bl	8001c58 <LL_RCC_HSI_IsReady>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e049      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fa2a 	bl	8001df4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a0:	f7fe fcca 	bl	8001338 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7fe fcc6 	bl	8001338 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e035      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	f7ff fa2c 	bl	8001e1a <LL_RCC_GetSysClkSource>
 80029c2:	4602      	mov	r2, r0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d1ec      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_RCC_ClockConfig+0x278>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d21b      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029dc:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <HAL_RCC_ClockConfig+0x278>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 0207 	bic.w	r2, r3, #7
 80029e4:	4913      	ldr	r1, [pc, #76]	; (8002a34 <HAL_RCC_ClockConfig+0x278>)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ec:	f7fe fca4 	bl	8001338 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029f4:	f7fe fca0 	bl	8001338 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e011      	b.n	8002a2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_ClockConfig+0x278>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d1ef      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a14:	f000 f8b4 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <HAL_RCC_ClockConfig+0x27c>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <HAL_RCC_ClockConfig+0x280>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fda6 	bl	8001574 <HAL_InitTick>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	58004000 	.word	0x58004000
 8002a38:	20000004 	.word	0x20000004
 8002a3c:	20000008 	.word	0x20000008

08002a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4e:	f7ff f9e4 	bl	8001e1a <LL_RCC_GetSysClkSource>
 8002a52:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a54:	f7ff facd 	bl	8001ff2 <LL_RCC_PLL_GetMainSource>
 8002a58:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x2c>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d139      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d136      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002a6c:	f7ff f987 	bl	8001d7e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d115      	bne.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x62>
 8002a76:	f7ff f982 	bl	8001d7e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_GetSysClockFreq+0x4e>
 8002a80:	f7ff f98d 	bl	8001d9e <LL_RCC_MSI_GetRange>
 8002a84:	4603      	mov	r3, r0
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	e005      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x5a>
 8002a8e:	f7ff f991 	bl	8001db4 <LL_RCC_MSI_GetRangeAfterStandby>
 8002a92:	4603      	mov	r3, r0
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	4a36      	ldr	r2, [pc, #216]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x134>)
 8002a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa0:	e014      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x8c>
 8002aa2:	f7ff f96c 	bl	8001d7e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_GetSysClockFreq+0x7a>
 8002aac:	f7ff f977 	bl	8001d9e <LL_RCC_MSI_GetRange>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	e005      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x86>
 8002aba:	f7ff f97b 	bl	8001db4 <LL_RCC_MSI_GetRangeAfterStandby>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	4a2b      	ldr	r2, [pc, #172]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002acc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d115      	bne.n	8002b00 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ad8:	e012      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d102      	bne.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	e00c      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d109      	bne.n	8002b00 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002aec:	f7ff f85a 	bl	8001ba4 <LL_RCC_HSE_IsEnabledDiv2>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e001      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002afc:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002afe:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b00:	f7ff f98b 	bl	8001e1a <LL_RCC_GetSysClkSource>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d12f      	bne.n	8002b6a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002b0a:	f7ff fa72 	bl	8001ff2 <LL_RCC_PLL_GetMainSource>
 8002b0e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0xde>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d003      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0xe4>
 8002b1c:	e00d      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b20:	60fb      	str	r3, [r7, #12]
        break;
 8002b22:	e00d      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b24:	f7ff f83e 	bl	8001ba4 <LL_RCC_HSE_IsEnabledDiv2>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d102      	bne.n	8002b34 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b30:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002b32:	e005      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b36:	60fb      	str	r3, [r7, #12]
        break;
 8002b38:	e002      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	60fb      	str	r3, [r7, #12]
        break;
 8002b3e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002b40:	f7ff fa35 	bl	8001fae <LL_RCC_PLL_GetN>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	fb03 f402 	mul.w	r4, r3, r2
 8002b4c:	f7ff fa46 	bl	8001fdc <LL_RCC_PLL_GetDivider>
 8002b50:	4603      	mov	r3, r0
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	3301      	adds	r3, #1
 8002b56:	fbb4 f4f3 	udiv	r4, r4, r3
 8002b5a:	f7ff fa34 	bl	8001fc6 <LL_RCC_PLL_GetR>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	0f5b      	lsrs	r3, r3, #29
 8002b62:	3301      	adds	r3, #1
 8002b64:	fbb4 f3f3 	udiv	r3, r4, r3
 8002b68:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002b6a:	697b      	ldr	r3, [r7, #20]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd90      	pop	{r4, r7, pc}
 8002b74:	08009968 	.word	0x08009968
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	01e84800 	.word	0x01e84800

08002b80 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b598      	push	{r3, r4, r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b84:	f7ff ff5c 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	f7ff f9b5 	bl	8001ef8 <LL_RCC_GetAHBPrescaler>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	4a03      	ldr	r2, [pc, #12]	; (8002ba4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd98      	pop	{r3, r4, r7, pc}
 8002ba4:	08009908 	.word	0x08009908

08002ba8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b598      	push	{r3, r4, r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002bac:	f7ff ffe8 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	f7ff f9b9 	bl	8001f28 <LL_RCC_GetAPB1Prescaler>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	4a03      	ldr	r2, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd98      	pop	{r3, r4, r7, pc}
 8002bc8:	08009948 	.word	0x08009948

08002bcc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bcc:	b598      	push	{r3, r4, r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002bd0:	f7ff ffd6 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	f7ff f9b2 	bl	8001f3e <LL_RCC_GetAPB2Prescaler>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	0adb      	lsrs	r3, r3, #11
 8002bde:	4a03      	ldr	r2, [pc, #12]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd98      	pop	{r3, r4, r7, pc}
 8002bec:	08009948 	.word	0x08009948

08002bf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002c08:	f7ff f981 	bl	8001f0e <LL_RCC_GetAHB3Prescaler>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	4a0c      	ldr	r2, [pc, #48]	; (8002c48 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0c9c      	lsrs	r4, r3, #18
 8002c2c:	f7fe ff80 	bl	8001b30 <HAL_PWREx_GetVoltageRange>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4619      	mov	r1, r3
 8002c34:	4620      	mov	r0, r4
 8002c36:	f000 f80b 	bl	8002c50 <RCC_SetFlashLatency>
 8002c3a:	4603      	mov	r3, r0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd90      	pop	{r4, r7, pc}
 8002c44:	08009968 	.word	0x08009968
 8002c48:	08009908 	.word	0x08009908
 8002c4c:	431bde83 	.word	0x431bde83

08002c50 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	; 0x38
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002c5a:	4a3a      	ldr	r2, [pc, #232]	; (8002d44 <RCC_SetFlashLatency+0xf4>)
 8002c5c:	f107 0320 	add.w	r3, r7, #32
 8002c60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c64:	6018      	str	r0, [r3, #0]
 8002c66:	3304      	adds	r3, #4
 8002c68:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002c6a:	4a37      	ldr	r2, [pc, #220]	; (8002d48 <RCC_SetFlashLatency+0xf8>)
 8002c6c:	f107 0318 	add.w	r3, r7, #24
 8002c70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c74:	6018      	str	r0, [r3, #0]
 8002c76:	3304      	adds	r3, #4
 8002c78:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002c7a:	4a34      	ldr	r2, [pc, #208]	; (8002d4c <RCC_SetFlashLatency+0xfc>)
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c82:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c86:	2300      	movs	r3, #0
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c90:	d11b      	bne.n	8002cca <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
 8002c96:	e014      	b.n	8002cc2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	3338      	adds	r3, #56	; 0x38
 8002c9e:	443b      	add	r3, r7
 8002ca0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d807      	bhi.n	8002cbc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	3338      	adds	r3, #56	; 0x38
 8002cb2:	443b      	add	r3, r7
 8002cb4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cba:	e021      	b.n	8002d00 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d9e7      	bls.n	8002c98 <RCC_SetFlashLatency+0x48>
 8002cc8:	e01a      	b.n	8002d00 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cce:	e014      	b.n	8002cfa <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	3338      	adds	r3, #56	; 0x38
 8002cd6:	443b      	add	r3, r7
 8002cd8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d807      	bhi.n	8002cf4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	3338      	adds	r3, #56	; 0x38
 8002cea:	443b      	add	r3, r7
 8002cec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002cf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cf2:	e005      	b.n	8002d00 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d9e7      	bls.n	8002cd0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <RCC_SetFlashLatency+0x100>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 0207 	bic.w	r2, r3, #7
 8002d08:	4911      	ldr	r1, [pc, #68]	; (8002d50 <RCC_SetFlashLatency+0x100>)
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d10:	f7fe fb12 	bl	8001338 <HAL_GetTick>
 8002d14:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002d16:	e008      	b.n	8002d2a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d18:	f7fe fb0e 	bl	8001338 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e007      	b.n	8002d3a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <RCC_SetFlashLatency+0x100>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1ef      	bne.n	8002d18 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3738      	adds	r7, #56	; 0x38
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	080098c8 	.word	0x080098c8
 8002d48:	080098d0 	.word	0x080098d0
 8002d4c:	080098d8 	.word	0x080098d8
 8002d50:	58004000 	.word	0x58004000

08002d54 <LL_RCC_LSE_IsReady>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d101      	bne.n	8002d6c <LL_RCC_LSE_IsReady+0x18>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <LL_RCC_LSE_IsReady+0x1a>
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_SetUSARTClockSource>:
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_SetI2SClockSource>:
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <LL_RCC_SetLPUARTClockSource>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <LL_RCC_SetI2CClockSource>:
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e12:	43db      	mvns	r3, r3
 8002e14:	401a      	ands	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <LL_RCC_SetLPTIMClockSource>:
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <LL_RCC_SetRNGClockSource>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e74:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <LL_RCC_SetADCClockSource>:
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <LL_RCC_SetRTCClockSource>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ecc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_GetRTCClockSource>:
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <LL_RCC_ForceBackupDomainReset>:
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f32:	bf00      	nop
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002f48:	2300      	movs	r3, #0
 8002f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d058      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002f5c:	f7fe fdda 	bl	8001b14 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f60:	f7fe f9ea 	bl	8001338 <HAL_GetTick>
 8002f64:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002f66:	e009      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f68:	f7fe f9e6 	bl	8001338 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d902      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	74fb      	strb	r3, [r7, #19]
        break;
 8002f7a:	e006      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002f7c:	4b7b      	ldr	r3, [pc, #492]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f88:	d1ee      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d13c      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002f90:	f7ff ffa7 	bl	8002ee2 <LL_RCC_GetRTCClockSource>
 8002f94:	4602      	mov	r2, r0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d00f      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002faa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fac:	f7ff ffa5 	bl	8002efa <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb0:	f7ff ffb3 	bl	8002f1a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d014      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe f9b6 	bl	8001338 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe f9b2 	bl	8001338 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d902      	bls.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	74fb      	strb	r3, [r7, #19]
            break;
 8002fe6:	e004      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002fe8:	f7ff feb4 	bl	8002d54 <LL_RCC_LSE_IsReady>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d1ee      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff5b 	bl	8002eb8 <LL_RCC_SetRTCClockSource>
 8003002:	e004      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	74bb      	strb	r3, [r7, #18]
 8003008:	e001      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300a:	7cfb      	ldrb	r3, [r7, #19]
 800300c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d004      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fea9 	bl	8002d76 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fe9e 	bl	8002d76 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fec0 	bl	8002dd0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fee6 	bl	8002e32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fedb 	bl	8002e32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fed0 	bl	8002e32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d004      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fea9 	bl	8002dfa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fe9e 	bl	8002dfa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d004      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fe93 	bl	8002dfa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d011      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fe5e 	bl	8002da6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f2:	d107      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003102:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d010      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fea5 	bl	8002e64 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800312c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003130:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d011      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fea3 	bl	8002e8e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003150:	d107      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003162:	7cbb      	ldrb	r3, [r7, #18]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	58000400 	.word	0x58000400

08003170 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003180:	4904      	ldr	r1, [pc, #16]	; (8003194 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	58000400 	.word	0x58000400

08003198 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80031a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	58000400 	.word	0x58000400

080031b8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c2:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80031c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	58000400 	.word	0x58000400

080031d8 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80031de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e2:	619a      	str	r2, [r3, #24]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	58000400 	.word	0x58000400

080031f0 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d101      	bne.n	8003204 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	58000400 	.word	0x58000400

08003214 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b04      	cmp	r3, #4
 8003222:	d101      	bne.n	8003228 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	58000400 	.word	0x58000400

08003238 <LL_RCC_RF_DisableReset>:
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003248:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800324c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <LL_RCC_IsRFUnderReset>:
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800326c:	d101      	bne.n	8003272 <LL_RCC_IsRFUnderReset+0x1a>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <LL_RCC_IsRFUnderReset+0x1c>
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <LL_EXTI_EnableIT_32_63+0x24>)
 8003286:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800328a:	4905      	ldr	r1, [pc, #20]	; (80032a0 <LL_EXTI_EnableIT_32_63+0x24>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	58000800 	.word	0x58000800

080032a4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
    return status;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	e052      	b.n	8003360 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	799b      	ldrb	r3, [r3, #6]
 80032c2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80032c4:	7bbb      	ldrb	r3, [r7, #14]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_SUBGHZ_Init+0x2c>
 80032ca:	7bbb      	ldrb	r3, [r7, #14]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d109      	bne.n	80032e4 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd ff6f 	bl	80011ba <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80032dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80032e0:	f7ff ffcc 	bl	800327c <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80032e4:	7bbb      	ldrb	r3, [r7, #14]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d126      	bne.n	8003338 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80032f0:	f7ff ffa2 	bl	8003238 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80032f4:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <HAL_SUBGHZ_Init+0xc4>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	0cdb      	lsrs	r3, r3, #19
 8003302:	2264      	movs	r2, #100	; 0x64
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	609a      	str	r2, [r3, #8]
        break;
 800331a:	e007      	b.n	800332c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	3b01      	subs	r3, #1
 8003320:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003322:	f7ff ff99 	bl	8003258 <LL_RCC_IsRFUnderReset>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ee      	bne.n	800330a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800332c:	f7ff ff34 	bl	8003198 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003330:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003334:	f7ff ff1c 	bl	8003170 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003338:	f7ff ff4e 	bl	80031d8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 faac 	bl	80038a4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	719a      	strb	r2, [r3, #6]

  return status;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000004 	.word	0x20000004

0800336c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	461a      	mov	r2, r3
 8003378:	460b      	mov	r3, r1
 800337a:	817b      	strh	r3, [r7, #10]
 800337c:	4613      	mov	r3, r2
 800337e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	799b      	ldrb	r3, [r3, #6]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d14a      	bne.n	8003420 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	795b      	ldrb	r3, [r3, #5]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003392:	2302      	movs	r3, #2
 8003394:	e045      	b.n	8003422 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2202      	movs	r2, #2
 80033a0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fb4c 	bl	8003a40 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80033a8:	f7ff ff06 	bl	80031b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80033ac:	210d      	movs	r1, #13
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa98 	bl	80038e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80033b4:	897b      	ldrh	r3, [r7, #10]
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4619      	mov	r1, r3
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fa90 	bl	80038e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80033c4:	897b      	ldrh	r3, [r7, #10]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	4619      	mov	r1, r3
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 fa8a 	bl	80038e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80033d0:	2300      	movs	r3, #0
 80033d2:	82bb      	strh	r3, [r7, #20]
 80033d4:	e00a      	b.n	80033ec <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80033d6:	8abb      	ldrh	r3, [r7, #20]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	4413      	add	r3, r2
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	4619      	mov	r1, r3
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fa7f 	bl	80038e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80033e6:	8abb      	ldrh	r3, [r7, #20]
 80033e8:	3301      	adds	r3, #1
 80033ea:	82bb      	strh	r3, [r7, #20]
 80033ec:	8aba      	ldrh	r2, [r7, #20]
 80033ee:	893b      	ldrh	r3, [r7, #8]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d3f0      	bcc.n	80033d6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80033f4:	f7ff fed0 	bl	8003198 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fb45 	bl	8003a88 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
 800340a:	e001      	b.n	8003410 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	715a      	strb	r2, [r3, #5]

    return status;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	e000      	b.n	8003422 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b088      	sub	sp, #32
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	461a      	mov	r2, r3
 8003436:	460b      	mov	r3, r1
 8003438:	817b      	strh	r3, [r7, #10]
 800343a:	4613      	mov	r3, r2
 800343c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	799b      	ldrb	r3, [r3, #6]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d14a      	bne.n	80034e2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	795b      	ldrb	r3, [r3, #5]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003454:	2302      	movs	r3, #2
 8003456:	e045      	b.n	80034e4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 faee 	bl	8003a40 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003464:	f7ff fea8 	bl	80031b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003468:	211d      	movs	r1, #29
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fa3a 	bl	80038e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003470:	897b      	ldrh	r3, [r7, #10]
 8003472:	0a1b      	lsrs	r3, r3, #8
 8003474:	b29b      	uxth	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	4619      	mov	r1, r3
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fa32 	bl	80038e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003480:	897b      	ldrh	r3, [r7, #10]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fa2c 	bl	80038e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800348c:	2100      	movs	r1, #0
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fa28 	bl	80038e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003494:	2300      	movs	r3, #0
 8003496:	82fb      	strh	r3, [r7, #22]
 8003498:	e009      	b.n	80034ae <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800349a:	69b9      	ldr	r1, [r7, #24]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fa77 	bl	8003990 <SUBGHZSPI_Receive>
      pData++;
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	3301      	adds	r3, #1
 80034a6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80034a8:	8afb      	ldrh	r3, [r7, #22]
 80034aa:	3301      	adds	r3, #1
 80034ac:	82fb      	strh	r3, [r7, #22]
 80034ae:	8afa      	ldrh	r2, [r7, #22]
 80034b0:	893b      	ldrh	r3, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d3f1      	bcc.n	800349a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80034b6:	f7ff fe6f 	bl	8003198 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fae4 	bl	8003a88 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e001      	b.n	80034d2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	715a      	strb	r2, [r3, #5]

    return status;
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	e000      	b.n	80034e4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	461a      	mov	r2, r3
 80034f8:	460b      	mov	r3, r1
 80034fa:	72fb      	strb	r3, [r7, #11]
 80034fc:	4613      	mov	r3, r2
 80034fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	799b      	ldrb	r3, [r3, #6]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d14a      	bne.n	80035a0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	795b      	ldrb	r3, [r3, #5]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003512:	2302      	movs	r3, #2
 8003514:	e045      	b.n	80035a2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fa8f 	bl	8003a40 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003522:	7afb      	ldrb	r3, [r7, #11]
 8003524:	2b84      	cmp	r3, #132	; 0x84
 8003526:	d002      	beq.n	800352e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003528:	7afb      	ldrb	r3, [r7, #11]
 800352a:	2b94      	cmp	r3, #148	; 0x94
 800352c:	d103      	bne.n	8003536 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	711a      	strb	r2, [r3, #4]
 8003534:	e002      	b.n	800353c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800353c:	f7ff fe3c 	bl	80031b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003540:	7afb      	ldrb	r3, [r7, #11]
 8003542:	4619      	mov	r1, r3
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f9cd 	bl	80038e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800354a:	2300      	movs	r3, #0
 800354c:	82bb      	strh	r3, [r7, #20]
 800354e:	e00a      	b.n	8003566 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003550:	8abb      	ldrh	r3, [r7, #20]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f9c2 	bl	80038e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003560:	8abb      	ldrh	r3, [r7, #20]
 8003562:	3301      	adds	r3, #1
 8003564:	82bb      	strh	r3, [r7, #20]
 8003566:	8aba      	ldrh	r2, [r7, #20]
 8003568:	893b      	ldrh	r3, [r7, #8]
 800356a:	429a      	cmp	r2, r3
 800356c:	d3f0      	bcc.n	8003550 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800356e:	f7ff fe13 	bl	8003198 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003572:	7afb      	ldrb	r3, [r7, #11]
 8003574:	2b84      	cmp	r3, #132	; 0x84
 8003576:	d002      	beq.n	800357e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fa85 	bl	8003a88 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
 800358a:	e001      	b.n	8003590 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	715a      	strb	r2, [r3, #5]

    return status;
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	e000      	b.n	80035a2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b088      	sub	sp, #32
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	461a      	mov	r2, r3
 80035b6:	460b      	mov	r3, r1
 80035b8:	72fb      	strb	r3, [r7, #11]
 80035ba:	4613      	mov	r3, r2
 80035bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	799b      	ldrb	r3, [r3, #6]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d13d      	bne.n	8003648 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	795b      	ldrb	r3, [r3, #5]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e038      	b.n	800364a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fa2e 	bl	8003a40 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80035e4:	f7ff fde8 	bl	80031b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80035e8:	7afb      	ldrb	r3, [r7, #11]
 80035ea:	4619      	mov	r1, r3
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f979 	bl	80038e4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80035f2:	2100      	movs	r1, #0
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f975 	bl	80038e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	82fb      	strh	r3, [r7, #22]
 80035fe:	e009      	b.n	8003614 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003600:	69b9      	ldr	r1, [r7, #24]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f9c4 	bl	8003990 <SUBGHZSPI_Receive>
      pData++;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	3301      	adds	r3, #1
 800360c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800360e:	8afb      	ldrh	r3, [r7, #22]
 8003610:	3301      	adds	r3, #1
 8003612:	82fb      	strh	r3, [r7, #22]
 8003614:	8afa      	ldrh	r2, [r7, #22]
 8003616:	893b      	ldrh	r3, [r7, #8]
 8003618:	429a      	cmp	r2, r3
 800361a:	d3f1      	bcc.n	8003600 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800361c:	f7ff fdbc 	bl	8003198 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fa31 	bl	8003a88 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e001      	b.n	8003638 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	715a      	strb	r2, [r3, #5]

    return status;
 8003644:	7ffb      	ldrb	r3, [r7, #31]
 8003646:	e000      	b.n	800364a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	461a      	mov	r2, r3
 800365e:	460b      	mov	r3, r1
 8003660:	72fb      	strb	r3, [r7, #11]
 8003662:	4613      	mov	r3, r2
 8003664:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	799b      	ldrb	r3, [r3, #6]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d13e      	bne.n	80036ee <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	795b      	ldrb	r3, [r3, #5]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003678:	2302      	movs	r3, #2
 800367a:	e039      	b.n	80036f0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f9dc 	bl	8003a40 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003688:	f7ff fd96 	bl	80031b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800368c:	210e      	movs	r1, #14
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f928 	bl	80038e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003694:	7afb      	ldrb	r3, [r7, #11]
 8003696:	4619      	mov	r1, r3
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f923 	bl	80038e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	82bb      	strh	r3, [r7, #20]
 80036a2:	e00a      	b.n	80036ba <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80036a4:	8abb      	ldrh	r3, [r7, #20]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	4619      	mov	r1, r3
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f918 	bl	80038e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80036b4:	8abb      	ldrh	r3, [r7, #20]
 80036b6:	3301      	adds	r3, #1
 80036b8:	82bb      	strh	r3, [r7, #20]
 80036ba:	8aba      	ldrh	r2, [r7, #20]
 80036bc:	893b      	ldrh	r3, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d3f0      	bcc.n	80036a4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80036c2:	f7ff fd69 	bl	8003198 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f9de 	bl	8003a88 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
 80036d8:	e001      	b.n	80036de <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	715a      	strb	r2, [r3, #5]

    return status;
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	e000      	b.n	80036f0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
  }
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	461a      	mov	r2, r3
 8003704:	460b      	mov	r3, r1
 8003706:	72fb      	strb	r3, [r7, #11]
 8003708:	4613      	mov	r3, r2
 800370a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	799b      	ldrb	r3, [r3, #6]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d141      	bne.n	800379e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	795b      	ldrb	r3, [r3, #5]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003722:	2302      	movs	r3, #2
 8003724:	e03c      	b.n	80037a0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f987 	bl	8003a40 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003732:	f7ff fd41 	bl	80031b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003736:	211e      	movs	r1, #30
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f8d3 	bl	80038e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800373e:	7afb      	ldrb	r3, [r7, #11]
 8003740:	4619      	mov	r1, r3
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f8ce 	bl	80038e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003748:	2100      	movs	r1, #0
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f8ca 	bl	80038e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003750:	2300      	movs	r3, #0
 8003752:	82fb      	strh	r3, [r7, #22]
 8003754:	e009      	b.n	800376a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f919 	bl	8003990 <SUBGHZSPI_Receive>
      pData++;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	3301      	adds	r3, #1
 8003762:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003764:	8afb      	ldrh	r3, [r7, #22]
 8003766:	3301      	adds	r3, #1
 8003768:	82fb      	strh	r3, [r7, #22]
 800376a:	8afa      	ldrh	r2, [r7, #22]
 800376c:	893b      	ldrh	r3, [r7, #8]
 800376e:	429a      	cmp	r2, r3
 8003770:	d3f1      	bcc.n	8003756 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003772:	f7ff fd11 	bl	8003198 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f986 	bl	8003a88 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e001      	b.n	800378e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	715a      	strb	r2, [r3, #5]

    return status;
 800379a:	7ffb      	ldrb	r3, [r7, #31]
 800379c:	e000      	b.n	80037a0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80037b0:	2300      	movs	r3, #0
 80037b2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80037b4:	f107 020c 	add.w	r2, r7, #12
 80037b8:	2302      	movs	r3, #2
 80037ba:	2112      	movs	r1, #18
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fef4 	bl	80035aa <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80037c2:	7b3b      	ldrb	r3, [r7, #12]
 80037c4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80037c6:	89fb      	ldrh	r3, [r7, #14]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	b21a      	sxth	r2, r3
 80037cc:	7b7b      	ldrb	r3, [r7, #13]
 80037ce:	b21b      	sxth	r3, r3
 80037d0:	4313      	orrs	r3, r2
 80037d2:	b21b      	sxth	r3, r3
 80037d4:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80037d6:	f107 020c 	add.w	r2, r7, #12
 80037da:	2302      	movs	r3, #2
 80037dc:	2102      	movs	r1, #2
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fe84 	bl	80034ec <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80037e4:	89fb      	ldrh	r3, [r7, #14]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f004 fc34 	bl	800805c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80037f4:	89fb      	ldrh	r3, [r7, #14]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f004 fc3a 	bl	8008078 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003804:	89fb      	ldrh	r3, [r7, #14]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f004 fc8a 	bl	8008128 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003814:	89fb      	ldrh	r3, [r7, #14]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f004 fc90 	bl	8008144 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003824:	89fb      	ldrh	r3, [r7, #14]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f004 fc96 	bl	8008160 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003834:	89fb      	ldrh	r3, [r7, #14]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f004 fc64 	bl	800810c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003844:	89fb      	ldrh	r3, [r7, #14]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f004 fc20 	bl	8008094 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003854:	89fb      	ldrh	r3, [r7, #14]
 8003856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800385e:	89fb      	ldrh	r3, [r7, #14]
 8003860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003868:	2101      	movs	r1, #1
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f004 fc20 	bl	80080b0 <HAL_SUBGHZ_CADStatusCallback>
 8003870:	e003      	b.n	800387a <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003872:	2100      	movs	r1, #0
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f004 fc1b 	bl	80080b0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800387a:	89fb      	ldrh	r3, [r7, #14]
 800387c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f004 fc31 	bl	80080ec <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800388a:	89fb      	ldrh	r3, [r7, #14]
 800388c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f004 fc71 	bl	800817c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <SUBGHZSPI_Init+0x3c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a0b      	ldr	r2, [pc, #44]	; (80038e0 <SUBGHZSPI_Init+0x3c>)
 80038b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038b6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80038b8:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <SUBGHZSPI_Init+0x3c>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80038c0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80038c2:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <SUBGHZSPI_Init+0x3c>)
 80038c4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80038c8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <SUBGHZSPI_Init+0x3c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <SUBGHZSPI_Init+0x3c>)
 80038d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d4:	6013      	str	r3, [r2, #0]
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	58010000 	.word	0x58010000

080038e4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80038f4:	4b23      	ldr	r3, [pc, #140]	; (8003984 <SUBGHZSPI_Transmit+0xa0>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	0cdb      	lsrs	r3, r3, #19
 8003902:	2264      	movs	r2, #100	; 0x64
 8003904:	fb02 f303 	mul.w	r3, r2, r3
 8003908:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d105      	bne.n	800391c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	609a      	str	r2, [r3, #8]
      break;
 800391a:	e008      	b.n	800392e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3b01      	subs	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003922:	4b19      	ldr	r3, [pc, #100]	; (8003988 <SUBGHZSPI_Transmit+0xa4>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d1ed      	bne.n	800390a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800392e:	4b17      	ldr	r3, [pc, #92]	; (800398c <SUBGHZSPI_Transmit+0xa8>)
 8003930:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003938:	4b12      	ldr	r3, [pc, #72]	; (8003984 <SUBGHZSPI_Transmit+0xa0>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	0cdb      	lsrs	r3, r3, #19
 8003946:	2264      	movs	r2, #100	; 0x64
 8003948:	fb02 f303 	mul.w	r3, r2, r3
 800394c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	609a      	str	r2, [r3, #8]
      break;
 800395e:	e008      	b.n	8003972 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3b01      	subs	r3, #1
 8003964:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <SUBGHZSPI_Transmit+0xa4>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d1ed      	bne.n	800394e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <SUBGHZSPI_Transmit+0xa4>)
 8003974:	68db      	ldr	r3, [r3, #12]

  return status;
 8003976:	7dfb      	ldrb	r3, [r7, #23]
}
 8003978:	4618      	mov	r0, r3
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000004 	.word	0x20000004
 8003988:	58010000 	.word	0x58010000
 800398c:	5801000c 	.word	0x5801000c

08003990 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800399e:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <SUBGHZSPI_Receive+0xa4>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	0cdb      	lsrs	r3, r3, #19
 80039ac:	2264      	movs	r2, #100	; 0x64
 80039ae:	fb02 f303 	mul.w	r3, r2, r3
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	609a      	str	r2, [r3, #8]
      break;
 80039c4:	e008      	b.n	80039d8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <SUBGHZSPI_Receive+0xa8>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d1ed      	bne.n	80039b4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80039d8:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <SUBGHZSPI_Receive+0xac>)
 80039da:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	22ff      	movs	r2, #255	; 0xff
 80039e0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80039e2:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <SUBGHZSPI_Receive+0xa4>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	0cdb      	lsrs	r3, r3, #19
 80039f0:	2264      	movs	r2, #100	; 0x64
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d105      	bne.n	8003a0a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	609a      	str	r2, [r3, #8]
      break;
 8003a08:	e008      	b.n	8003a1c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <SUBGHZSPI_Receive+0xa8>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d1ed      	bne.n	80039f8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <SUBGHZSPI_Receive+0xa8>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	701a      	strb	r2, [r3, #0]

  return status;
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000004 	.word	0x20000004
 8003a38:	58010000 	.word	0x58010000
 8003a3c:	5801000c 	.word	0x5801000c

08003a40 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	791b      	ldrb	r3, [r3, #4]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d111      	bne.n	8003a74 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <SUBGHZ_CheckDeviceReady+0x44>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003a60:	f7ff fbaa 	bl	80031b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f9      	bne.n	8003a64 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003a70:	f7ff fb92 	bl	8003198 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f807 	bl	8003a88 <SUBGHZ_WaitOnBusy>
 8003a7a:	4603      	mov	r3, r0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000004 	.word	0x20000004

08003a88 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <SUBGHZ_WaitOnBusy+0x58>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	0d1b      	lsrs	r3, r3, #20
 8003aa2:	2264      	movs	r2, #100	; 0x64
 8003aa4:	fb02 f303 	mul.w	r3, r2, r3
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003aaa:	f7ff fbb3 	bl	8003214 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003aae:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	609a      	str	r2, [r3, #8]
      break;
 8003ac0:	e009      	b.n	8003ad6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003ac8:	f7ff fb92 	bl	80031f0 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d0e9      	beq.n	8003aaa <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000004 	.word	0x20000004

08003ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e049      	b.n	8003b8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fd fb68 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4610      	mov	r0, r2
 8003b24:	f000 faf8 	bl	8004118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d001      	beq.n	8003bac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e02e      	b.n	8003c0a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <HAL_TIM_Base_Start+0x80>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIM_Base_Start+0x34>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d115      	bne.n	8003bf4 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <HAL_TIM_Base_Start+0x84>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d015      	beq.n	8003c06 <HAL_TIM_Base_Start+0x72>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d011      	beq.n	8003c06 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf2:	e008      	b.n	8003c06 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e000      	b.n	8003c08 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	00010007 	.word	0x00010007

08003c1c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6a1a      	ldr	r2, [r3, #32]
 8003c2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10f      	bne.n	8003c54 <HAL_TIM_Base_Stop+0x38>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6a1a      	ldr	r2, [r3, #32]
 8003c3a:	f240 4344 	movw	r3, #1092	; 0x444
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d107      	bne.n	8003c54 <HAL_TIM_Base_Stop+0x38>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d001      	beq.n	8003c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e036      	b.n	8003cee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <HAL_TIM_Base_Start_IT+0x90>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x44>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003caa:	d115      	bne.n	8003cd8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_TIM_Base_Start_IT+0x94>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d015      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x82>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc4:	d011      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd6:	e008      	b.n	8003cea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e000      	b.n	8003cec <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	00010007 	.word	0x00010007

08003d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d122      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d11b      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0202 	mvn.w	r2, #2
 8003d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f9cd 	bl	80040e2 <HAL_TIM_IC_CaptureCallback>
 8003d48:	e005      	b.n	8003d56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9c0 	bl	80040d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f9cf 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d122      	bne.n	8003db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d11b      	bne.n	8003db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0204 	mvn.w	r2, #4
 8003d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2202      	movs	r2, #2
 8003d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f9a3 	bl	80040e2 <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f996 	bl	80040d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f9a5 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d122      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d11b      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0208 	mvn.w	r2, #8
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f979 	bl	80040e2 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f96c 	bl	80040d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f97b 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0210 	mvn.w	r2, #16
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f94f 	bl	80040e2 <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f942 	bl	80040d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f951 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d10e      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0201 	mvn.w	r2, #1
 8003e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fc fbb8 	bl	80005f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d10e      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9c:	2b80      	cmp	r3, #128	; 0x80
 8003e9e:	d107      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fa95 	bl	80043da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ebe:	d10e      	bne.n	8003ede <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d107      	bne.n	8003ede <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fa87 	bl	80043ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d10e      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d107      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f8fe 	bl	8004106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d10e      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d107      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f06f 0220 	mvn.w	r2, #32
 8003f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fa49 	bl	80043c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_TIM_ConfigClockSource+0x1c>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e0b6      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x18a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003f78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f84:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f96:	d03e      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0xd8>
 8003f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9c:	f200 8087 	bhi.w	80040ae <HAL_TIM_ConfigClockSource+0x170>
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	f000 8086 	beq.w	80040b4 <HAL_TIM_ConfigClockSource+0x176>
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	d87f      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x170>
 8003fae:	2b70      	cmp	r3, #112	; 0x70
 8003fb0:	d01a      	beq.n	8003fe8 <HAL_TIM_ConfigClockSource+0xaa>
 8003fb2:	2b70      	cmp	r3, #112	; 0x70
 8003fb4:	d87b      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x170>
 8003fb6:	2b60      	cmp	r3, #96	; 0x60
 8003fb8:	d050      	beq.n	800405c <HAL_TIM_ConfigClockSource+0x11e>
 8003fba:	2b60      	cmp	r3, #96	; 0x60
 8003fbc:	d877      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x170>
 8003fbe:	2b50      	cmp	r3, #80	; 0x50
 8003fc0:	d03c      	beq.n	800403c <HAL_TIM_ConfigClockSource+0xfe>
 8003fc2:	2b50      	cmp	r3, #80	; 0x50
 8003fc4:	d873      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x170>
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d058      	beq.n	800407c <HAL_TIM_ConfigClockSource+0x13e>
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	d86f      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x170>
 8003fce:	2b30      	cmp	r3, #48	; 0x30
 8003fd0:	d064      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x15e>
 8003fd2:	2b30      	cmp	r3, #48	; 0x30
 8003fd4:	d86b      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x170>
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d060      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x15e>
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d867      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x170>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d05c      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x15e>
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d05a      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x15e>
 8003fe6:	e062      	b.n	80040ae <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff8:	f000 f969 	bl	80042ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800400a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	609a      	str	r2, [r3, #8]
      break;
 8004014:	e04f      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004026:	f000 f952 	bl	80042ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004038:	609a      	str	r2, [r3, #8]
      break;
 800403a:	e03c      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004048:	461a      	mov	r2, r3
 800404a:	f000 f8c7 	bl	80041dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2150      	movs	r1, #80	; 0x50
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f91e 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 800405a:	e02c      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004068:	461a      	mov	r2, r3
 800406a:	f000 f8e5 	bl	8004238 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2160      	movs	r1, #96	; 0x60
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f90e 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 800407a:	e01c      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004088:	461a      	mov	r2, r3
 800408a:	f000 f8a7 	bl	80041dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2140      	movs	r1, #64	; 0x40
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f8fe 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 800409a:	e00c      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f000 f8f5 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 80040ac:	e003      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
      break;
 80040b2:	e000      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80040b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr

080040e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <TIM_Base_SetConfig+0xb8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_Base_SetConfig+0x20>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d108      	bne.n	800414a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <TIM_Base_SetConfig+0xb8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00b      	beq.n	800416a <TIM_Base_SetConfig+0x52>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004158:	d007      	beq.n	800416a <TIM_Base_SetConfig+0x52>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <TIM_Base_SetConfig+0xbc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d003      	beq.n	800416a <TIM_Base_SetConfig+0x52>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1c      	ldr	r2, [pc, #112]	; (80041d8 <TIM_Base_SetConfig+0xc0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d108      	bne.n	800417c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <TIM_Base_SetConfig+0xb8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d007      	beq.n	80041b8 <TIM_Base_SetConfig+0xa0>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <TIM_Base_SetConfig+0xbc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_Base_SetConfig+0xa0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <TIM_Base_SetConfig+0xc0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d103      	bne.n	80041c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	615a      	str	r2, [r3, #20]
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr
 80041d0:	40012c00 	.word	0x40012c00
 80041d4:	40014400 	.word	0x40014400
 80041d8:	40014800 	.word	0x40014800

080041dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f023 0201 	bic.w	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f023 030a 	bic.w	r3, r3, #10
 8004218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f023 0210 	bic.w	r2, r3, #16
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004262:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	031b      	lsls	r3, r3, #12
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004274:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	621a      	str	r2, [r3, #32]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80042ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f043 0307 	orr.w	r3, r3, #7
 80042bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	609a      	str	r2, [r3, #8]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b087      	sub	sp, #28
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	021a      	lsls	r2, r3, #8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	609a      	str	r2, [r3, #8]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004320:	2302      	movs	r3, #2
 8004322:	e04a      	b.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1e      	ldr	r2, [pc, #120]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004354:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a11      	ldr	r2, [pc, #68]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438c:	d10c      	bne.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4313      	orrs	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	40012c00 	.word	0x40012c00

080043c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <LL_RCC_GetUSARTClockSource>:
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	401a      	ands	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	4313      	orrs	r3, r2
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <LL_RCC_GetLPUARTClockSource>:
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800442a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4013      	ands	r3, r2
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e042      	b.n	80044d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	2b00      	cmp	r3, #0
 800445a:	d106      	bne.n	800446a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fc fedf 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2224      	movs	r2, #36	; 0x24
 800446e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8b2 	bl	80045ec <UART_SetConfig>
 8004488:	4603      	mov	r3, r0
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e022      	b.n	80044d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fb1a 	bl	8004ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fba0 	bl	8004c16 <UART_CheckIdleState>
 80044d6:	4603      	mov	r3, r0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	; 0x28
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d173      	bne.n	80045e2 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_Transmit+0x26>
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e06c      	b.n	80045e4 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2221      	movs	r2, #33	; 0x21
 8004516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451a:	f7fc ff0d 	bl	8001338 <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004538:	d108      	bne.n	800454c <HAL_UART_Transmit+0x6c>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	e003      	b.n	8004554 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004554:	e02c      	b.n	80045b0 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	2180      	movs	r1, #128	; 0x80
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fba6 	bl	8004cb2 <UART_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e039      	b.n	80045e4 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004584:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	3302      	adds	r3, #2
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	e007      	b.n	800459e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	3301      	adds	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1cc      	bne.n	8004556 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2200      	movs	r2, #0
 80045c4:	2140      	movs	r1, #64	; 0x40
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fb73 	bl	8004cb2 <UART_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e006      	b.n	80045e4 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f0:	b08c      	sub	sp, #48	; 0x30
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	431a      	orrs	r2, r3
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	431a      	orrs	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4313      	orrs	r3, r2
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b94      	ldr	r3, [pc, #592]	; (800486c <UART_SetConfig+0x280>)
 800461c:	4013      	ands	r3, r2
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004624:	430b      	orrs	r3, r1
 8004626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a89      	ldr	r2, [pc, #548]	; (8004870 <UART_SetConfig+0x284>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004654:	4313      	orrs	r3, r2
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004662:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800466c:	430b      	orrs	r3, r1
 800466e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	f023 010f 	bic.w	r1, r3, #15
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a7a      	ldr	r2, [pc, #488]	; (8004874 <UART_SetConfig+0x288>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d127      	bne.n	80046e0 <UART_SetConfig+0xf4>
 8004690:	2003      	movs	r0, #3
 8004692:	f7ff feb4 	bl	80043fe <LL_RCC_GetUSARTClockSource>
 8004696:	4603      	mov	r3, r0
 8004698:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800469c:	2b03      	cmp	r3, #3
 800469e:	d81b      	bhi.n	80046d8 <UART_SetConfig+0xec>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <UART_SetConfig+0xbc>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046b9 	.word	0x080046b9
 80046ac:	080046c9 	.word	0x080046c9
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046d1 	.word	0x080046d1
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046be:	e080      	b.n	80047c2 <UART_SetConfig+0x1d6>
 80046c0:	2302      	movs	r3, #2
 80046c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046c6:	e07c      	b.n	80047c2 <UART_SetConfig+0x1d6>
 80046c8:	2304      	movs	r3, #4
 80046ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ce:	e078      	b.n	80047c2 <UART_SetConfig+0x1d6>
 80046d0:	2308      	movs	r3, #8
 80046d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d6:	e074      	b.n	80047c2 <UART_SetConfig+0x1d6>
 80046d8:	2310      	movs	r3, #16
 80046da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046de:	e070      	b.n	80047c2 <UART_SetConfig+0x1d6>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a64      	ldr	r2, [pc, #400]	; (8004878 <UART_SetConfig+0x28c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d138      	bne.n	800475c <UART_SetConfig+0x170>
 80046ea:	200c      	movs	r0, #12
 80046ec:	f7ff fe87 	bl	80043fe <LL_RCC_GetUSARTClockSource>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	d82c      	bhi.n	8004754 <UART_SetConfig+0x168>
 80046fa:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <UART_SetConfig+0x114>)
 80046fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004700:	08004735 	.word	0x08004735
 8004704:	08004755 	.word	0x08004755
 8004708:	08004755 	.word	0x08004755
 800470c:	08004755 	.word	0x08004755
 8004710:	08004745 	.word	0x08004745
 8004714:	08004755 	.word	0x08004755
 8004718:	08004755 	.word	0x08004755
 800471c:	08004755 	.word	0x08004755
 8004720:	0800473d 	.word	0x0800473d
 8004724:	08004755 	.word	0x08004755
 8004728:	08004755 	.word	0x08004755
 800472c:	08004755 	.word	0x08004755
 8004730:	0800474d 	.word	0x0800474d
 8004734:	2300      	movs	r3, #0
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473a:	e042      	b.n	80047c2 <UART_SetConfig+0x1d6>
 800473c:	2302      	movs	r3, #2
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004742:	e03e      	b.n	80047c2 <UART_SetConfig+0x1d6>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474a:	e03a      	b.n	80047c2 <UART_SetConfig+0x1d6>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004752:	e036      	b.n	80047c2 <UART_SetConfig+0x1d6>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800475a:	e032      	b.n	80047c2 <UART_SetConfig+0x1d6>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a43      	ldr	r2, [pc, #268]	; (8004870 <UART_SetConfig+0x284>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d12a      	bne.n	80047bc <UART_SetConfig+0x1d0>
 8004766:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800476a:	f7ff fe5a 	bl	8004422 <LL_RCC_GetLPUARTClockSource>
 800476e:	4603      	mov	r3, r0
 8004770:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004774:	d01a      	beq.n	80047ac <UART_SetConfig+0x1c0>
 8004776:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800477a:	d81b      	bhi.n	80047b4 <UART_SetConfig+0x1c8>
 800477c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004780:	d00c      	beq.n	800479c <UART_SetConfig+0x1b0>
 8004782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004786:	d815      	bhi.n	80047b4 <UART_SetConfig+0x1c8>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <UART_SetConfig+0x1a8>
 800478c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004790:	d008      	beq.n	80047a4 <UART_SetConfig+0x1b8>
 8004792:	e00f      	b.n	80047b4 <UART_SetConfig+0x1c8>
 8004794:	2300      	movs	r3, #0
 8004796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800479a:	e012      	b.n	80047c2 <UART_SetConfig+0x1d6>
 800479c:	2302      	movs	r3, #2
 800479e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a2:	e00e      	b.n	80047c2 <UART_SetConfig+0x1d6>
 80047a4:	2304      	movs	r3, #4
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047aa:	e00a      	b.n	80047c2 <UART_SetConfig+0x1d6>
 80047ac:	2308      	movs	r3, #8
 80047ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047b2:	e006      	b.n	80047c2 <UART_SetConfig+0x1d6>
 80047b4:	2310      	movs	r3, #16
 80047b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ba:	e002      	b.n	80047c2 <UART_SetConfig+0x1d6>
 80047bc:	2310      	movs	r3, #16
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2a      	ldr	r2, [pc, #168]	; (8004870 <UART_SetConfig+0x284>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	f040 80a4 	bne.w	8004916 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d823      	bhi.n	800481e <UART_SetConfig+0x232>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <UART_SetConfig+0x1f0>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	08004801 	.word	0x08004801
 80047e0:	0800481f 	.word	0x0800481f
 80047e4:	08004809 	.word	0x08004809
 80047e8:	0800481f 	.word	0x0800481f
 80047ec:	0800480f 	.word	0x0800480f
 80047f0:	0800481f 	.word	0x0800481f
 80047f4:	0800481f 	.word	0x0800481f
 80047f8:	0800481f 	.word	0x0800481f
 80047fc:	08004817 	.word	0x08004817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004800:	f7fe f9d2 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8004804:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004806:	e010      	b.n	800482a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <UART_SetConfig+0x290>)
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800480c:	e00d      	b.n	800482a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480e:	f7fe f917 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 8004812:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004814:	e009      	b.n	800482a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800481c:	e005      	b.n	800482a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004828:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8137 	beq.w	8004aa0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	4a12      	ldr	r2, [pc, #72]	; (8004880 <UART_SetConfig+0x294>)
 8004838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800483c:	461a      	mov	r2, r3
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	fbb3 f3f2 	udiv	r3, r3, r2
 8004844:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4413      	add	r3, r2
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	429a      	cmp	r2, r3
 8004854:	d305      	bcc.n	8004862 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	429a      	cmp	r2, r3
 8004860:	d910      	bls.n	8004884 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004868:	e11a      	b.n	8004aa0 <UART_SetConfig+0x4b4>
 800486a:	bf00      	nop
 800486c:	cfff69f3 	.word	0xcfff69f3
 8004870:	40008000 	.word	0x40008000
 8004874:	40013800 	.word	0x40013800
 8004878:	40004400 	.word	0x40004400
 800487c:	00f42400 	.word	0x00f42400
 8004880:	080099d4 	.word	0x080099d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	2200      	movs	r2, #0
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	60fa      	str	r2, [r7, #12]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	4a8e      	ldr	r2, [pc, #568]	; (8004acc <UART_SetConfig+0x4e0>)
 8004892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004896:	b29b      	uxth	r3, r3
 8004898:	2200      	movs	r2, #0
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048a6:	f7fb fcbb 	bl	8000220 <__aeabi_uldivmod>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	020b      	lsls	r3, r1, #8
 80048bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048c0:	0202      	lsls	r2, r0, #8
 80048c2:	6979      	ldr	r1, [r7, #20]
 80048c4:	6849      	ldr	r1, [r1, #4]
 80048c6:	0849      	lsrs	r1, r1, #1
 80048c8:	2000      	movs	r0, #0
 80048ca:	460c      	mov	r4, r1
 80048cc:	4605      	mov	r5, r0
 80048ce:	eb12 0804 	adds.w	r8, r2, r4
 80048d2:	eb43 0905 	adc.w	r9, r3, r5
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	469a      	mov	sl, r3
 80048de:	4693      	mov	fp, r2
 80048e0:	4652      	mov	r2, sl
 80048e2:	465b      	mov	r3, fp
 80048e4:	4640      	mov	r0, r8
 80048e6:	4649      	mov	r1, r9
 80048e8:	f7fb fc9a 	bl	8000220 <__aeabi_uldivmod>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4613      	mov	r3, r2
 80048f2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048fa:	d308      	bcc.n	800490e <UART_SetConfig+0x322>
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004902:	d204      	bcs.n	800490e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a3a      	ldr	r2, [r7, #32]
 800490a:	60da      	str	r2, [r3, #12]
 800490c:	e0c8      	b.n	8004aa0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004914:	e0c4      	b.n	8004aa0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491e:	d167      	bne.n	80049f0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004920:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004924:	2b08      	cmp	r3, #8
 8004926:	d828      	bhi.n	800497a <UART_SetConfig+0x38e>
 8004928:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0x344>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004955 	.word	0x08004955
 8004934:	0800495d 	.word	0x0800495d
 8004938:	08004965 	.word	0x08004965
 800493c:	0800497b 	.word	0x0800497b
 8004940:	0800496b 	.word	0x0800496b
 8004944:	0800497b 	.word	0x0800497b
 8004948:	0800497b 	.word	0x0800497b
 800494c:	0800497b 	.word	0x0800497b
 8004950:	08004973 	.word	0x08004973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004954:	f7fe f928 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8004958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800495a:	e014      	b.n	8004986 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7fe f936 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 8004960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004962:	e010      	b.n	8004986 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004964:	4b5a      	ldr	r3, [pc, #360]	; (8004ad0 <UART_SetConfig+0x4e4>)
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004968:	e00d      	b.n	8004986 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496a:	f7fe f869 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 800496e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004970:	e009      	b.n	8004986 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004978:	e005      	b.n	8004986 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004984:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8089 	beq.w	8004aa0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	4a4e      	ldr	r2, [pc, #312]	; (8004acc <UART_SetConfig+0x4e0>)
 8004994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004998:	461a      	mov	r2, r3
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	fbb3 f3f2 	udiv	r3, r3, r2
 80049a0:	005a      	lsls	r2, r3, #1
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	441a      	add	r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	d916      	bls.n	80049e8 <UART_SetConfig+0x3fc>
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d212      	bcs.n	80049e8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	f023 030f 	bic.w	r3, r3, #15
 80049ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	8bfb      	ldrh	r3, [r7, #30]
 80049da:	4313      	orrs	r3, r2
 80049dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	8bfa      	ldrh	r2, [r7, #30]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	e05b      	b.n	8004aa0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049ee:	e057      	b.n	8004aa0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d828      	bhi.n	8004a4a <UART_SetConfig+0x45e>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0x414>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a25 	.word	0x08004a25
 8004a04:	08004a2d 	.word	0x08004a2d
 8004a08:	08004a35 	.word	0x08004a35
 8004a0c:	08004a4b 	.word	0x08004a4b
 8004a10:	08004a3b 	.word	0x08004a3b
 8004a14:	08004a4b 	.word	0x08004a4b
 8004a18:	08004a4b 	.word	0x08004a4b
 8004a1c:	08004a4b 	.word	0x08004a4b
 8004a20:	08004a43 	.word	0x08004a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a24:	f7fe f8c0 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8004a28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a2a:	e014      	b.n	8004a56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a2c:	f7fe f8ce 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 8004a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a32:	e010      	b.n	8004a56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a34:	4b26      	ldr	r3, [pc, #152]	; (8004ad0 <UART_SetConfig+0x4e4>)
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a38:	e00d      	b.n	8004a56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a3a:	f7fe f801 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 8004a3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a40:	e009      	b.n	8004a56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a48:	e005      	b.n	8004a56 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a54:	bf00      	nop
    }

    if (pclk != 0U)
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d021      	beq.n	8004aa0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <UART_SetConfig+0x4e0>)
 8004a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a66:	461a      	mov	r2, r3
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	441a      	add	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	2b0f      	cmp	r3, #15
 8004a84:	d909      	bls.n	8004a9a <UART_SetConfig+0x4ae>
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8c:	d205      	bcs.n	8004a9a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60da      	str	r2, [r3, #12]
 8004a98:	e002      	b.n	8004aa0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004abc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3730      	adds	r7, #48	; 0x30
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aca:	bf00      	nop
 8004acc:	080099d4 	.word	0x080099d4
 8004ad0:	00f42400 	.word	0x00f42400

08004ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01a      	beq.n	8004bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd2:	d10a      	bne.n	8004bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af02      	add	r7, sp, #8
 8004c1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c26:	f7fc fb87 	bl	8001338 <HAL_GetTick>
 8004c2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d10e      	bne.n	8004c58 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f832 	bl	8004cb2 <UART_WaitOnFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e028      	b.n	8004caa <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d10e      	bne.n	8004c84 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f81c 	bl	8004cb2 <UART_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e012      	b.n	8004caa <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b09c      	sub	sp, #112	; 0x70
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc2:	e0a9      	b.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cca:	f000 80a5 	beq.w	8004e18 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cce:	f7fc fb33 	bl	8001338 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d140      	bne.n	8004d66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e6      	bne.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	f023 0301 	bic.w	r3, r3, #1
 8004d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d36:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e5      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e069      	b.n	8004e3a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d051      	beq.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d82:	d149      	bne.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004da2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
 8004dae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e6      	bne.n	8004d8e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004de0:	623a      	str	r2, [r7, #32]
 8004de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	69f9      	ldr	r1, [r7, #28]
 8004de6:	6a3a      	ldr	r2, [r7, #32]
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e010      	b.n	8004e3a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4013      	ands	r3, r2
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	f43f af46 	beq.w	8004cc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3770      	adds	r7, #112	; 0x70
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b085      	sub	sp, #20
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_UARTEx_DisableFifoMode+0x16>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e027      	b.n	8004ea8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2224      	movs	r2, #36	; 0x24
 8004e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e02d      	b.n	8004f26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2224      	movs	r2, #36	; 0x24
 8004ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f850 	bl	8004fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e02d      	b.n	8004fa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2224      	movs	r2, #36	; 0x24
 8004f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f812 	bl	8004fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d108      	bne.n	8004fce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fcc:	e031      	b.n	8005032 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fce:	2308      	movs	r3, #8
 8004fd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	0e5b      	lsrs	r3, r3, #25
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	0f5b      	lsrs	r3, r3, #29
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ff6:	7bbb      	ldrb	r3, [r7, #14]
 8004ff8:	7b3a      	ldrb	r2, [r7, #12]
 8004ffa:	4910      	ldr	r1, [pc, #64]	; (800503c <UARTEx_SetNbDataToProcess+0x90>)
 8004ffc:	5c8a      	ldrb	r2, [r1, r2]
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005002:	7b3a      	ldrb	r2, [r7, #12]
 8005004:	490e      	ldr	r1, [pc, #56]	; (8005040 <UARTEx_SetNbDataToProcess+0x94>)
 8005006:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005008:	fb93 f3f2 	sdiv	r3, r3, r2
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	7b7a      	ldrb	r2, [r7, #13]
 8005018:	4908      	ldr	r1, [pc, #32]	; (800503c <UARTEx_SetNbDataToProcess+0x90>)
 800501a:	5c8a      	ldrb	r2, [r1, r2]
 800501c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005020:	7b7a      	ldrb	r2, [r7, #13]
 8005022:	4907      	ldr	r1, [pc, #28]	; (8005040 <UARTEx_SetNbDataToProcess+0x94>)
 8005024:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005026:	fb93 f3f2 	sdiv	r3, r3, r2
 800502a:	b29a      	uxth	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005032:	bf00      	nop
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	080099ec 	.word	0x080099ec
 8005040:	080099f4 	.word	0x080099f4

08005044 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af02      	add	r7, sp, #8
 800504a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800504c:	4a24      	ldr	r2, [pc, #144]	; (80050e0 <RadioInit+0x9c>)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8005052:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <RadioInit+0xa0>)
 8005054:	2200      	movs	r2, #0
 8005056:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8005058:	4b22      	ldr	r3, [pc, #136]	; (80050e4 <RadioInit+0xa0>)
 800505a:	2200      	movs	r2, #0
 800505c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800505e:	4b21      	ldr	r3, [pc, #132]	; (80050e4 <RadioInit+0xa0>)
 8005060:	2200      	movs	r2, #0
 8005062:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005064:	4b1f      	ldr	r3, [pc, #124]	; (80050e4 <RadioInit+0xa0>)
 8005066:	2200      	movs	r2, #0
 8005068:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800506a:	481f      	ldr	r0, [pc, #124]	; (80050e8 <RadioInit+0xa4>)
 800506c:	f001 ff88 	bl	8006f80 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8005070:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <RadioInit+0xa0>)
 8005072:	2200      	movs	r2, #0
 8005074:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8005076:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <RadioInit+0xa0>)
 8005078:	2200      	movs	r2, #0
 800507a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 800507c:	f002 fa1c 	bl	80074b8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8005080:	2100      	movs	r1, #0
 8005082:	2000      	movs	r0, #0
 8005084:	f002 fde8 	bl	8007c58 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8005088:	2204      	movs	r2, #4
 800508a:	2100      	movs	r1, #0
 800508c:	2001      	movs	r0, #1
 800508e:	f002 fba5 	bl	80077dc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005092:	2300      	movs	r3, #0
 8005094:	2200      	movs	r2, #0
 8005096:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800509a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800509e:	f002 fad5 	bl	800764c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80050a2:	f000 fe91 	bl	8005dc8 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80050a6:	2300      	movs	r3, #0
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <RadioInit+0xa8>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050b2:	480f      	ldr	r0, [pc, #60]	; (80050f0 <RadioInit+0xac>)
 80050b4:	f003 fb32 	bl	800871c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80050b8:	2300      	movs	r3, #0
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <RadioInit+0xb0>)
 80050be:	2200      	movs	r2, #0
 80050c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050c4:	480c      	ldr	r0, [pc, #48]	; (80050f8 <RadioInit+0xb4>)
 80050c6:	f003 fb29 	bl	800871c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80050ca:	4809      	ldr	r0, [pc, #36]	; (80050f0 <RadioInit+0xac>)
 80050cc:	f003 fbca 	bl	8008864 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80050d0:	4809      	ldr	r0, [pc, #36]	; (80050f8 <RadioInit+0xb4>)
 80050d2:	f003 fbc7 	bl	8008864 <UTIL_TIMER_Stop>
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000380 	.word	0x20000380
 80050e4:	20000384 	.word	0x20000384
 80050e8:	080061c1 	.word	0x080061c1
 80050ec:	08006149 	.word	0x08006149
 80050f0:	200003e0 	.word	0x200003e0
 80050f4:	0800615d 	.word	0x0800615d
 80050f8:	200003f8 	.word	0x200003f8

080050fc <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8005100:	f001 ff86 	bl	8007010 <SUBGRF_GetOperatingMode>
 8005104:	4603      	mov	r3, r0
 8005106:	2b07      	cmp	r3, #7
 8005108:	d00a      	beq.n	8005120 <RadioGetStatus+0x24>
 800510a:	2b07      	cmp	r3, #7
 800510c:	dc0a      	bgt.n	8005124 <RadioGetStatus+0x28>
 800510e:	2b04      	cmp	r3, #4
 8005110:	d002      	beq.n	8005118 <RadioGetStatus+0x1c>
 8005112:	2b05      	cmp	r3, #5
 8005114:	d002      	beq.n	800511c <RadioGetStatus+0x20>
 8005116:	e005      	b.n	8005124 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8005118:	2302      	movs	r3, #2
 800511a:	e004      	b.n	8005126 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800511c:	2301      	movs	r3, #1
 800511e:	e002      	b.n	8005126 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8005120:	2303      	movs	r3, #3
 8005122:	e000      	b.n	8005126 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8005124:	2300      	movs	r3, #0
    }
}
 8005126:	4618      	mov	r0, r3
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8005136:	4a2a      	ldr	r2, [pc, #168]	; (80051e0 <RadioSetModem+0xb4>)
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	4618      	mov	r0, r3
 8005140:	f003 f95d 	bl	80083fe <RFW_SetRadioModem>
    switch( modem )
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	2b05      	cmp	r3, #5
 8005148:	d80e      	bhi.n	8005168 <RadioSetModem+0x3c>
 800514a:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <RadioSetModem+0x24>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005177 	.word	0x08005177
 8005154:	08005185 	.word	0x08005185
 8005158:	08005169 	.word	0x08005169
 800515c:	080051ab 	.word	0x080051ab
 8005160:	080051b9 	.word	0x080051b9
 8005164:	080051c7 	.word	0x080051c7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8005168:	2003      	movs	r0, #3
 800516a:	f002 fb11 	bl	8007790 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800516e:	4b1c      	ldr	r3, [pc, #112]	; (80051e0 <RadioSetModem+0xb4>)
 8005170:	2200      	movs	r2, #0
 8005172:	735a      	strb	r2, [r3, #13]
        break;
 8005174:	e02f      	b.n	80051d6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005176:	2000      	movs	r0, #0
 8005178:	f002 fb0a 	bl	8007790 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800517c:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <RadioSetModem+0xb4>)
 800517e:	2200      	movs	r2, #0
 8005180:	735a      	strb	r2, [r3, #13]
        break;
 8005182:	e028      	b.n	80051d6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8005184:	2001      	movs	r0, #1
 8005186:	f002 fb03 	bl	8007790 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800518a:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <RadioSetModem+0xb4>)
 800518c:	7b5a      	ldrb	r2, [r3, #13]
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <RadioSetModem+0xb4>)
 8005190:	7b1b      	ldrb	r3, [r3, #12]
 8005192:	429a      	cmp	r2, r3
 8005194:	d01e      	beq.n	80051d4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <RadioSetModem+0xb4>)
 8005198:	7b1a      	ldrb	r2, [r3, #12]
 800519a:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <RadioSetModem+0xb4>)
 800519c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800519e:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <RadioSetModem+0xb4>)
 80051a0:	7b5b      	ldrb	r3, [r3, #13]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 ff9a 	bl	80060dc <RadioSetPublicNetwork>
        }
        break;
 80051a8:	e014      	b.n	80051d4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80051aa:	2002      	movs	r0, #2
 80051ac:	f002 faf0 	bl	8007790 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <RadioSetModem+0xb4>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	735a      	strb	r2, [r3, #13]
        break;
 80051b6:	e00e      	b.n	80051d6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80051b8:	2002      	movs	r0, #2
 80051ba:	f002 fae9 	bl	8007790 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80051be:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <RadioSetModem+0xb4>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	735a      	strb	r2, [r3, #13]
        break;
 80051c4:	e007      	b.n	80051d6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80051c6:	2000      	movs	r0, #0
 80051c8:	f002 fae2 	bl	8007790 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80051cc:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <RadioSetModem+0xb4>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	735a      	strb	r2, [r3, #13]
        break;
 80051d2:	e000      	b.n	80051d6 <RadioSetModem+0xaa>
        break;
 80051d4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000384 	.word	0x20000384

080051e4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f002 fa89 	bl	8007704 <SUBGRF_SetRfFrequency>
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b090      	sub	sp, #64	; 0x40
 80051fe:	af0a      	add	r7, sp, #40	; 0x28
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800520a:	2301      	movs	r3, #1
 800520c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8005216:	f000 fdea 	bl	8005dee <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800521a:	2000      	movs	r0, #0
 800521c:	f7ff ff86 	bl	800512c <RadioSetModem>

    RadioSetChannel( freq );
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f7ff ffdf 	bl	80051e4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8005226:	2301      	movs	r3, #1
 8005228:	9309      	str	r3, [sp, #36]	; 0x24
 800522a:	2300      	movs	r3, #0
 800522c:	9308      	str	r3, [sp, #32]
 800522e:	2300      	movs	r3, #0
 8005230:	9307      	str	r3, [sp, #28]
 8005232:	2300      	movs	r3, #0
 8005234:	9306      	str	r3, [sp, #24]
 8005236:	2300      	movs	r3, #0
 8005238:	9305      	str	r3, [sp, #20]
 800523a:	2300      	movs	r3, #0
 800523c:	9304      	str	r3, [sp, #16]
 800523e:	2300      	movs	r3, #0
 8005240:	9303      	str	r3, [sp, #12]
 8005242:	2300      	movs	r3, #0
 8005244:	9302      	str	r3, [sp, #8]
 8005246:	2303      	movs	r3, #3
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	2300      	movs	r3, #0
 8005250:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	2000      	movs	r0, #0
 8005258:	f000 f83c 	bl	80052d4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800525c:	2000      	movs	r0, #0
 800525e:	f000 fdcd 	bl	8005dfc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8005262:	f000 ff69 	bl	8006138 <RadioGetWakeupTime>
 8005266:	4603      	mov	r3, r0
 8005268:	4618      	mov	r0, r3
 800526a:	f7fc f879 	bl	8001360 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800526e:	f003 fb93 	bl	8008998 <UTIL_TIMER_GetCurrentTime>
 8005272:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8005274:	e00d      	b.n	8005292 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8005276:	2000      	movs	r0, #0
 8005278:	f000 feae 	bl	8005fd8 <RadioRssi>
 800527c:	4603      	mov	r3, r0
 800527e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8005280:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005288:	429a      	cmp	r2, r3
 800528a:	dd02      	ble.n	8005292 <RadioIsChannelFree+0x98>
        {
            status = false;
 800528c:	2300      	movs	r3, #0
 800528e:	75fb      	strb	r3, [r7, #23]
            break;
 8005290:	e006      	b.n	80052a0 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8005292:	6938      	ldr	r0, [r7, #16]
 8005294:	f003 fb92 	bl	80089bc <UTIL_TIMER_GetElapsedTime>
 8005298:	4602      	mov	r2, r0
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	4293      	cmp	r3, r2
 800529e:	d8ea      	bhi.n	8005276 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80052a0:	f000 fda5 	bl	8005dee <RadioStandby>

    return status;
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80052b8:	2300      	movs	r3, #0
 80052ba:	2200      	movs	r2, #0
 80052bc:	2100      	movs	r1, #0
 80052be:	2000      	movs	r0, #0
 80052c0:	f002 f9c4 	bl	800764c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80052c4:	f001 ff75 	bl	80071b2 <SUBGRF_GetRandom>
 80052c8:	6078      	str	r0, [r7, #4]

    return rnd;
 80052ca:	687b      	ldr	r3, [r7, #4]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	461a      	mov	r2, r3
 80052e0:	4603      	mov	r3, r0
 80052e2:	73fb      	strb	r3, [r7, #15]
 80052e4:	4613      	mov	r3, r2
 80052e6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80052e8:	4ab9      	ldr	r2, [pc, #740]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80052ea:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80052ee:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80052f0:	f003 f843 	bl	800837a <RFW_DeInit>
    if( rxContinuous == true )
 80052f4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8005300:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8005308:	4ab2      	ldr	r2, [pc, #712]	; (80055d4 <RadioSetRxConfig+0x300>)
 800530a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800530e:	7013      	strb	r3, [r2, #0]
 8005310:	e002      	b.n	8005318 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8005312:	4bb0      	ldr	r3, [pc, #704]	; (80055d4 <RadioSetRxConfig+0x300>)
 8005314:	22ff      	movs	r2, #255	; 0xff
 8005316:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b05      	cmp	r3, #5
 800531c:	d009      	beq.n	8005332 <RadioSetRxConfig+0x5e>
 800531e:	2b05      	cmp	r3, #5
 8005320:	f300 81d7 	bgt.w	80056d2 <RadioSetRxConfig+0x3fe>
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 80bf 	beq.w	80054a8 <RadioSetRxConfig+0x1d4>
 800532a:	2b01      	cmp	r3, #1
 800532c:	f000 8124 	beq.w	8005578 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8005330:	e1cf      	b.n	80056d2 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8005332:	2001      	movs	r0, #1
 8005334:	f002 f882 	bl	800743c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005338:	4ba5      	ldr	r3, [pc, #660]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005340:	4aa3      	ldr	r2, [pc, #652]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8005346:	4ba2      	ldr	r3, [pc, #648]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005348:	2209      	movs	r2, #9
 800534a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800534e:	4ba0      	ldr	r3, [pc, #640]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005350:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005356:	68b8      	ldr	r0, [r7, #8]
 8005358:	f002 ff42 	bl	80081e0 <SUBGRF_GetFskBandwidthRegValue>
 800535c:	4603      	mov	r3, r0
 800535e:	461a      	mov	r2, r3
 8005360:	4b9b      	ldr	r3, [pc, #620]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005366:	4b9a      	ldr	r3, [pc, #616]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005368:	2200      	movs	r2, #0
 800536a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800536c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	b29a      	uxth	r2, r3
 8005372:	4b97      	ldr	r3, [pc, #604]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005374:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8005376:	4b96      	ldr	r3, [pc, #600]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005378:	2200      	movs	r2, #0
 800537a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800537c:	4b94      	ldr	r3, [pc, #592]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 800537e:	2210      	movs	r2, #16
 8005380:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005382:	4b93      	ldr	r3, [pc, #588]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005384:	2200      	movs	r2, #0
 8005386:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8005388:	4b91      	ldr	r3, [pc, #580]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 800538a:	2200      	movs	r2, #0
 800538c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800538e:	4b91      	ldr	r3, [pc, #580]	; (80055d4 <RadioSetRxConfig+0x300>)
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	4b8f      	ldr	r3, [pc, #572]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005394:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005396:	4b8e      	ldr	r3, [pc, #568]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005398:	2201      	movs	r2, #1
 800539a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800539c:	4b8c      	ldr	r3, [pc, #560]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 800539e:	2200      	movs	r2, #0
 80053a0:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80053a2:	2005      	movs	r0, #5
 80053a4:	f7ff fec2 	bl	800512c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80053a8:	488b      	ldr	r0, [pc, #556]	; (80055d8 <RadioSetRxConfig+0x304>)
 80053aa:	f002 fae5 	bl	8007978 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80053ae:	488b      	ldr	r0, [pc, #556]	; (80055dc <RadioSetRxConfig+0x308>)
 80053b0:	f002 fbb4 	bl	8007b1c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80053b4:	4a8a      	ldr	r2, [pc, #552]	; (80055e0 <RadioSetRxConfig+0x30c>)
 80053b6:	f107 031c 	add.w	r3, r7, #28
 80053ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053be:	e883 0003 	stmia.w	r3, {r0, r1}
 80053c2:	f107 031c 	add.w	r3, r7, #28
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 fe71 	bl	80070ae <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80053cc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053d0:	f001 febc 	bl	800714c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80053d4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80053d8:	f000 fe1d 	bl	8006016 <RadioRead>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80053e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053e6:	f023 0310 	bic.w	r3, r3, #16
 80053ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80053ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053f2:	4619      	mov	r1, r3
 80053f4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80053f8:	f000 fdfb 	bl	8005ff2 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80053fc:	2104      	movs	r1, #4
 80053fe:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8005402:	f000 fdf6 	bl	8005ff2 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8005406:	f640 009b 	movw	r0, #2203	; 0x89b
 800540a:	f000 fe04 	bl	8006016 <RadioRead>
 800540e:	4603      	mov	r3, r0
 8005410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005418:	f023 031c 	bic.w	r3, r3, #28
 800541c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8005420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005424:	f043 0308 	orr.w	r3, r3, #8
 8005428:	b2db      	uxtb	r3, r3
 800542a:	4619      	mov	r1, r3
 800542c:	f640 009b 	movw	r0, #2203	; 0x89b
 8005430:	f000 fddf 	bl	8005ff2 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8005434:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005438:	f000 fded 	bl	8006016 <RadioRead>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005446:	f023 0318 	bic.w	r3, r3, #24
 800544a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800544e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005452:	f043 0318 	orr.w	r3, r3, #24
 8005456:	b2db      	uxtb	r3, r3
 8005458:	4619      	mov	r1, r3
 800545a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800545e:	f000 fdc8 	bl	8005ff2 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8005462:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005466:	f000 fdd6 	bl	8006016 <RadioRead>
 800546a:	4603      	mov	r3, r0
 800546c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8005470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800547c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005480:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8005484:	b2db      	uxtb	r3, r3
 8005486:	4619      	mov	r1, r3
 8005488:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800548c:	f000 fdb1 	bl	8005ff2 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005490:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005492:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	461a      	mov	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a2:	4a4b      	ldr	r2, [pc, #300]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80054a4:	6093      	str	r3, [r2, #8]
            break;
 80054a6:	e115      	b.n	80056d4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80054a8:	2000      	movs	r0, #0
 80054aa:	f001 ffc7 	bl	800743c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80054ae:	4b48      	ldr	r3, [pc, #288]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80054b6:	4a46      	ldr	r2, [pc, #280]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80054bc:	4b44      	ldr	r3, [pc, #272]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80054be:	220b      	movs	r2, #11
 80054c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80054c4:	68b8      	ldr	r0, [r7, #8]
 80054c6:	f002 fe8b 	bl	80081e0 <SUBGRF_GetFskBandwidthRegValue>
 80054ca:	4603      	mov	r3, r0
 80054cc:	461a      	mov	r2, r3
 80054ce:	4b40      	ldr	r3, [pc, #256]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80054d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80054d4:	4b3e      	ldr	r3, [pc, #248]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80054da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	b29a      	uxth	r2, r3
 80054e0:	4b3b      	ldr	r3, [pc, #236]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80054e2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80054e4:	4b3a      	ldr	r3, [pc, #232]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80054e6:	2204      	movs	r2, #4
 80054e8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80054ea:	4b39      	ldr	r3, [pc, #228]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80054ec:	2218      	movs	r2, #24
 80054ee:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80054f0:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80054f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80054fa:	f083 0301 	eor.w	r3, r3, #1
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	4b33      	ldr	r3, [pc, #204]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005504:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005506:	4b33      	ldr	r3, [pc, #204]	; (80055d4 <RadioSetRxConfig+0x300>)
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	4b31      	ldr	r3, [pc, #196]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 800550c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800550e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005516:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005518:	22f2      	movs	r2, #242	; 0xf2
 800551a:	75da      	strb	r2, [r3, #23]
 800551c:	e002      	b.n	8005524 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800551e:	4b2c      	ldr	r3, [pc, #176]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005520:	2201      	movs	r2, #1
 8005522:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005524:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005526:	2201      	movs	r2, #1
 8005528:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800552a:	f000 fc60 	bl	8005dee <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800552e:	2000      	movs	r0, #0
 8005530:	f7ff fdfc 	bl	800512c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005534:	4828      	ldr	r0, [pc, #160]	; (80055d8 <RadioSetRxConfig+0x304>)
 8005536:	f002 fa1f 	bl	8007978 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800553a:	4828      	ldr	r0, [pc, #160]	; (80055dc <RadioSetRxConfig+0x308>)
 800553c:	f002 faee 	bl	8007b1c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005540:	4a28      	ldr	r2, [pc, #160]	; (80055e4 <RadioSetRxConfig+0x310>)
 8005542:	f107 0314 	add.w	r3, r7, #20
 8005546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800554a:	e883 0003 	stmia.w	r3, {r0, r1}
 800554e:	f107 0314 	add.w	r3, r7, #20
 8005552:	4618      	mov	r0, r3
 8005554:	f001 fdab 	bl	80070ae <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005558:	f240 10ff 	movw	r0, #511	; 0x1ff
 800555c:	f001 fdf6 	bl	800714c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005560:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005562:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	4a17      	ldr	r2, [pc, #92]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005574:	6093      	str	r3, [r2, #8]
            break;
 8005576:	e0ad      	b.n	80056d4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005578:	2000      	movs	r0, #0
 800557a:	f001 ff5f 	bl	800743c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800557e:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 800558c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8005590:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <RadioSetRxConfig+0x314>)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4413      	add	r3, r2
 8005596:	781a      	ldrb	r2, [r3, #0]
 8005598:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 800559a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800559e:	4a0c      	ldr	r2, [pc, #48]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d105      	bne.n	80055b8 <RadioSetRxConfig+0x2e4>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b0b      	cmp	r3, #11
 80055b0:	d008      	beq.n	80055c4 <RadioSetRxConfig+0x2f0>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b0c      	cmp	r3, #12
 80055b6:	d005      	beq.n	80055c4 <RadioSetRxConfig+0x2f0>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d116      	bne.n	80055ec <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	d113      	bne.n	80055ec <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80055c4:	4b02      	ldr	r3, [pc, #8]	; (80055d0 <RadioSetRxConfig+0x2fc>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80055cc:	e012      	b.n	80055f4 <RadioSetRxConfig+0x320>
 80055ce:	bf00      	nop
 80055d0:	20000384 	.word	0x20000384
 80055d4:	2000000d 	.word	0x2000000d
 80055d8:	200003bc 	.word	0x200003bc
 80055dc:	20000392 	.word	0x20000392
 80055e0:	080098e4 	.word	0x080098e4
 80055e4:	080098ec 	.word	0x080098ec
 80055e8:	08009a88 	.word	0x08009a88
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80055ec:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <RadioSetRxConfig+0x408>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80055f4:	4b39      	ldr	r3, [pc, #228]	; (80056dc <RadioSetRxConfig+0x408>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80055fa:	4b38      	ldr	r3, [pc, #224]	; (80056dc <RadioSetRxConfig+0x408>)
 80055fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005600:	2b05      	cmp	r3, #5
 8005602:	d004      	beq.n	800560e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005604:	4b35      	ldr	r3, [pc, #212]	; (80056dc <RadioSetRxConfig+0x408>)
 8005606:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800560a:	2b06      	cmp	r3, #6
 800560c:	d10a      	bne.n	8005624 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800560e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005610:	2b0b      	cmp	r3, #11
 8005612:	d803      	bhi.n	800561c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005614:	4b31      	ldr	r3, [pc, #196]	; (80056dc <RadioSetRxConfig+0x408>)
 8005616:	220c      	movs	r2, #12
 8005618:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800561a:	e006      	b.n	800562a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800561c:	4a2f      	ldr	r2, [pc, #188]	; (80056dc <RadioSetRxConfig+0x408>)
 800561e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005620:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005622:	e002      	b.n	800562a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005624:	4a2d      	ldr	r2, [pc, #180]	; (80056dc <RadioSetRxConfig+0x408>)
 8005626:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005628:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800562a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <RadioSetRxConfig+0x408>)
 8005630:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005632:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <RadioSetRxConfig+0x40c>)
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	4b29      	ldr	r3, [pc, #164]	; (80056dc <RadioSetRxConfig+0x408>)
 8005638:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800563a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800563e:	4b27      	ldr	r3, [pc, #156]	; (80056dc <RadioSetRxConfig+0x408>)
 8005640:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005644:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <RadioSetRxConfig+0x408>)
 800564a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800564e:	f000 fbce 	bl	8005dee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8005652:	2001      	movs	r0, #1
 8005654:	f7ff fd6a 	bl	800512c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005658:	4822      	ldr	r0, [pc, #136]	; (80056e4 <RadioSetRxConfig+0x410>)
 800565a:	f002 f98d 	bl	8007978 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800565e:	4822      	ldr	r0, [pc, #136]	; (80056e8 <RadioSetRxConfig+0x414>)
 8005660:	f002 fa5c 	bl	8007b1c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005664:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005666:	b2db      	uxtb	r3, r3
 8005668:	4618      	mov	r0, r3
 800566a:	f001 fef6 	bl	800745a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800566e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8005672:	f002 fbaf 	bl	8007dd4 <SUBGRF_ReadRegister>
 8005676:	4603      	mov	r3, r0
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	b2db      	uxtb	r3, r3
 800567e:	4619      	mov	r1, r3
 8005680:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8005684:	f002 fb92 	bl	8007dac <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8005688:	4b14      	ldr	r3, [pc, #80]	; (80056dc <RadioSetRxConfig+0x408>)
 800568a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800568e:	2b01      	cmp	r3, #1
 8005690:	d10d      	bne.n	80056ae <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8005692:	f240 7036 	movw	r0, #1846	; 0x736
 8005696:	f002 fb9d 	bl	8007dd4 <SUBGRF_ReadRegister>
 800569a:	4603      	mov	r3, r0
 800569c:	f023 0304 	bic.w	r3, r3, #4
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	4619      	mov	r1, r3
 80056a4:	f240 7036 	movw	r0, #1846	; 0x736
 80056a8:	f002 fb80 	bl	8007dac <SUBGRF_WriteRegister>
 80056ac:	e00c      	b.n	80056c8 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80056ae:	f240 7036 	movw	r0, #1846	; 0x736
 80056b2:	f002 fb8f 	bl	8007dd4 <SUBGRF_ReadRegister>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f043 0304 	orr.w	r3, r3, #4
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	4619      	mov	r1, r3
 80056c0:	f240 7036 	movw	r0, #1846	; 0x736
 80056c4:	f002 fb72 	bl	8007dac <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <RadioSetRxConfig+0x408>)
 80056ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056ce:	609a      	str	r2, [r3, #8]
            break;
 80056d0:	e000      	b.n	80056d4 <RadioSetRxConfig+0x400>
            break;
 80056d2:	bf00      	nop
    }
}
 80056d4:	bf00      	nop
 80056d6:	3728      	adds	r7, #40	; 0x28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000384 	.word	0x20000384
 80056e0:	2000000d 	.word	0x2000000d
 80056e4:	200003bc 	.word	0x200003bc
 80056e8:	20000392 	.word	0x20000392

080056ec <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60ba      	str	r2, [r7, #8]
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	4603      	mov	r3, r0
 80056f8:	73fb      	strb	r3, [r7, #15]
 80056fa:	460b      	mov	r3, r1
 80056fc:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80056fe:	f002 fe3c 	bl	800837a <RFW_DeInit>
    switch( modem )
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b04      	cmp	r3, #4
 8005706:	f000 80c7 	beq.w	8005898 <RadioSetTxConfig+0x1ac>
 800570a:	2b04      	cmp	r3, #4
 800570c:	f300 80d6 	bgt.w	80058bc <RadioSetTxConfig+0x1d0>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <RadioSetTxConfig+0x2e>
 8005714:	2b01      	cmp	r3, #1
 8005716:	d059      	beq.n	80057cc <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8005718:	e0d0      	b.n	80058bc <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800571a:	4b77      	ldr	r3, [pc, #476]	; (80058f8 <RadioSetTxConfig+0x20c>)
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005722:	4a75      	ldr	r2, [pc, #468]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005728:	4b73      	ldr	r3, [pc, #460]	; (80058f8 <RadioSetTxConfig+0x20c>)
 800572a:	220b      	movs	r2, #11
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f002 fd55 	bl	80081e0 <SUBGRF_GetFskBandwidthRegValue>
 8005736:	4603      	mov	r3, r0
 8005738:	461a      	mov	r2, r3
 800573a:	4b6f      	ldr	r3, [pc, #444]	; (80058f8 <RadioSetTxConfig+0x20c>)
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8005740:	4a6d      	ldr	r2, [pc, #436]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005746:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005748:	2200      	movs	r2, #0
 800574a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800574c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	b29a      	uxth	r2, r3
 8005752:	4b69      	ldr	r3, [pc, #420]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005754:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005756:	4b68      	ldr	r3, [pc, #416]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005758:	2204      	movs	r2, #4
 800575a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800575c:	4b66      	ldr	r3, [pc, #408]	; (80058f8 <RadioSetTxConfig+0x20c>)
 800575e:	2218      	movs	r2, #24
 8005760:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005762:	4b65      	ldr	r3, [pc, #404]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005764:	2200      	movs	r2, #0
 8005766:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800576c:	f083 0301 	eor.w	r3, r3, #1
 8005770:	b2db      	uxtb	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	4b60      	ldr	r3, [pc, #384]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005776:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8005778:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005780:	4b5d      	ldr	r3, [pc, #372]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005782:	22f2      	movs	r2, #242	; 0xf2
 8005784:	75da      	strb	r2, [r3, #23]
 8005786:	e002      	b.n	800578e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005788:	4b5b      	ldr	r3, [pc, #364]	; (80058f8 <RadioSetTxConfig+0x20c>)
 800578a:	2201      	movs	r2, #1
 800578c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800578e:	4b5a      	ldr	r3, [pc, #360]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005790:	2201      	movs	r2, #1
 8005792:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8005794:	f000 fb2b 	bl	8005dee <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8005798:	2000      	movs	r0, #0
 800579a:	f7ff fcc7 	bl	800512c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800579e:	4857      	ldr	r0, [pc, #348]	; (80058fc <RadioSetTxConfig+0x210>)
 80057a0:	f002 f8ea 	bl	8007978 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80057a4:	4856      	ldr	r0, [pc, #344]	; (8005900 <RadioSetTxConfig+0x214>)
 80057a6:	f002 f9b9 	bl	8007b1c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80057aa:	4a56      	ldr	r2, [pc, #344]	; (8005904 <RadioSetTxConfig+0x218>)
 80057ac:	f107 0310 	add.w	r3, r7, #16
 80057b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80057b8:	f107 0310 	add.w	r3, r7, #16
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 fc76 	bl	80070ae <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80057c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057c6:	f001 fcc1 	bl	800714c <SUBGRF_SetWhiteningSeed>
            break;
 80057ca:	e078      	b.n	80058be <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80057cc:	4b4a      	ldr	r3, [pc, #296]	; (80058f8 <RadioSetTxConfig+0x20c>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <RadioSetTxConfig+0x20c>)
 80057da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80057de:	4a4a      	ldr	r2, [pc, #296]	; (8005908 <RadioSetTxConfig+0x21c>)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4413      	add	r3, r2
 80057e4:	781a      	ldrb	r2, [r3, #0]
 80057e6:	4b44      	ldr	r3, [pc, #272]	; (80058f8 <RadioSetTxConfig+0x20c>)
 80057e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80057ec:	4a42      	ldr	r2, [pc, #264]	; (80058f8 <RadioSetTxConfig+0x20c>)
 80057ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057f2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d105      	bne.n	8005808 <RadioSetTxConfig+0x11c>
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	2b0b      	cmp	r3, #11
 8005800:	d008      	beq.n	8005814 <RadioSetTxConfig+0x128>
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d005      	beq.n	8005814 <RadioSetTxConfig+0x128>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d107      	bne.n	800581e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	2b0c      	cmp	r3, #12
 8005812:	d104      	bne.n	800581e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005814:	4b38      	ldr	r3, [pc, #224]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800581c:	e003      	b.n	8005826 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800581e:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005826:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005828:	2201      	movs	r2, #1
 800582a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800582c:	4b32      	ldr	r3, [pc, #200]	; (80058f8 <RadioSetTxConfig+0x20c>)
 800582e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005832:	2b05      	cmp	r3, #5
 8005834:	d004      	beq.n	8005840 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005836:	4b30      	ldr	r3, [pc, #192]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005838:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800583c:	2b06      	cmp	r3, #6
 800583e:	d10a      	bne.n	8005856 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8005840:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005842:	2b0b      	cmp	r3, #11
 8005844:	d803      	bhi.n	800584e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005846:	4b2c      	ldr	r3, [pc, #176]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005848:	220c      	movs	r2, #12
 800584a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800584c:	e006      	b.n	800585c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800584e:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005850:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005852:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005854:	e002      	b.n	800585c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005856:	4a28      	ldr	r2, [pc, #160]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005858:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800585a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800585c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005860:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005862:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005864:	4b29      	ldr	r3, [pc, #164]	; (800590c <RadioSetTxConfig+0x220>)
 8005866:	781a      	ldrb	r2, [r3, #0]
 8005868:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <RadioSetTxConfig+0x20c>)
 800586a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800586c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005870:	4b21      	ldr	r3, [pc, #132]	; (80058f8 <RadioSetTxConfig+0x20c>)
 8005872:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005876:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800587a:	4b1f      	ldr	r3, [pc, #124]	; (80058f8 <RadioSetTxConfig+0x20c>)
 800587c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005880:	f000 fab5 	bl	8005dee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8005884:	2001      	movs	r0, #1
 8005886:	f7ff fc51 	bl	800512c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800588a:	481c      	ldr	r0, [pc, #112]	; (80058fc <RadioSetTxConfig+0x210>)
 800588c:	f002 f874 	bl	8007978 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005890:	481b      	ldr	r0, [pc, #108]	; (8005900 <RadioSetTxConfig+0x214>)
 8005892:	f002 f943 	bl	8007b1c <SUBGRF_SetPacketParams>
            break;
 8005896:	e012      	b.n	80058be <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8005898:	2004      	movs	r0, #4
 800589a:	f7ff fc47 	bl	800512c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800589e:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <RadioSetTxConfig+0x20c>)
 80058a0:	2202      	movs	r2, #2
 80058a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80058a6:	4a14      	ldr	r2, [pc, #80]	; (80058f8 <RadioSetTxConfig+0x20c>)
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80058ac:	4b12      	ldr	r3, [pc, #72]	; (80058f8 <RadioSetTxConfig+0x20c>)
 80058ae:	2216      	movs	r2, #22
 80058b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80058b4:	4811      	ldr	r0, [pc, #68]	; (80058fc <RadioSetTxConfig+0x210>)
 80058b6:	f002 f85f 	bl	8007978 <SUBGRF_SetModulationParams>
            break;
 80058ba:	e000      	b.n	80058be <RadioSetTxConfig+0x1d2>
            break;
 80058bc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80058be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f002 fb8e 	bl	8007fe4 <SUBGRF_SetRfTxPower>
 80058c8:	4603      	mov	r3, r0
 80058ca:	461a      	mov	r2, r3
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <RadioSetTxConfig+0x20c>)
 80058ce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80058d2:	210e      	movs	r1, #14
 80058d4:	f640 101f 	movw	r0, #2335	; 0x91f
 80058d8:	f002 fa68 	bl	8007dac <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <RadioSetTxConfig+0x20c>)
 80058de:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80058e2:	4618      	mov	r0, r3
 80058e4:	f002 fd5d 	bl	80083a2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80058e8:	4a03      	ldr	r2, [pc, #12]	; (80058f8 <RadioSetTxConfig+0x20c>)
 80058ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ec:	6053      	str	r3, [r2, #4]
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000384 	.word	0x20000384
 80058fc:	200003bc 	.word	0x200003bc
 8005900:	20000392 	.word	0x20000392
 8005904:	080098ec 	.word	0x080098ec
 8005908:	08009a88 	.word	0x08009a88
 800590c:	2000000d 	.word	0x2000000d

08005910 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
    return true;
 8005918:	2301      	movs	r3, #1
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr

08005924 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	2b0a      	cmp	r3, #10
 8005936:	d83e      	bhi.n	80059b6 <RadioGetLoRaBandwidthInHz+0x92>
 8005938:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <RadioGetLoRaBandwidthInHz+0x1c>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	0800596d 	.word	0x0800596d
 8005944:	0800597d 	.word	0x0800597d
 8005948:	0800598d 	.word	0x0800598d
 800594c:	0800599d 	.word	0x0800599d
 8005950:	080059a5 	.word	0x080059a5
 8005954:	080059ab 	.word	0x080059ab
 8005958:	080059b1 	.word	0x080059b1
 800595c:	080059b7 	.word	0x080059b7
 8005960:	08005975 	.word	0x08005975
 8005964:	08005985 	.word	0x08005985
 8005968:	08005995 	.word	0x08005995
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800596c:	f641 6384 	movw	r3, #7812	; 0x1e84
 8005970:	60fb      	str	r3, [r7, #12]
        break;
 8005972:	e020      	b.n	80059b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8005974:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8005978:	60fb      	str	r3, [r7, #12]
        break;
 800597a:	e01c      	b.n	80059b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800597c:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005980:	60fb      	str	r3, [r7, #12]
        break;
 8005982:	e018      	b.n	80059b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8005984:	f245 1361 	movw	r3, #20833	; 0x5161
 8005988:	60fb      	str	r3, [r7, #12]
        break;
 800598a:	e014      	b.n	80059b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800598c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005990:	60fb      	str	r3, [r7, #12]
        break;
 8005992:	e010      	b.n	80059b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8005994:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8005998:	60fb      	str	r3, [r7, #12]
        break;
 800599a:	e00c      	b.n	80059b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800599c:	f24f 4324 	movw	r3, #62500	; 0xf424
 80059a0:	60fb      	str	r3, [r7, #12]
        break;
 80059a2:	e008      	b.n	80059b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <RadioGetLoRaBandwidthInHz+0xa0>)
 80059a6:	60fb      	str	r3, [r7, #12]
        break;
 80059a8:	e005      	b.n	80059b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <RadioGetLoRaBandwidthInHz+0xa4>)
 80059ac:	60fb      	str	r3, [r7, #12]
        break;
 80059ae:	e002      	b.n	80059b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <RadioGetLoRaBandwidthInHz+0xa8>)
 80059b2:	60fb      	str	r3, [r7, #12]
        break;
 80059b4:	bf00      	nop
    }

    return bandwidthInHz;
 80059b6:	68fb      	ldr	r3, [r7, #12]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	0001e848 	.word	0x0001e848
 80059c8:	0003d090 	.word	0x0003d090
 80059cc:	0007a120 	.word	0x0007a120

080059d0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	4608      	mov	r0, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	461a      	mov	r2, r3
 80059de:	4603      	mov	r3, r0
 80059e0:	70fb      	strb	r3, [r7, #3]
 80059e2:	460b      	mov	r3, r1
 80059e4:	803b      	strh	r3, [r7, #0]
 80059e6:	4613      	mov	r3, r2
 80059e8:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80059ea:	883b      	ldrh	r3, [r7, #0]
 80059ec:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80059ee:	78ba      	ldrb	r2, [r7, #2]
 80059f0:	f082 0201 	eor.w	r2, r2, #1
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	d001      	beq.n	80059fe <RadioGetGfskTimeOnAirNumerator+0x2e>
 80059fa:	2208      	movs	r2, #8
 80059fc:	e000      	b.n	8005a00 <RadioGetGfskTimeOnAirNumerator+0x30>
 80059fe:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8005a00:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005a02:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8005a06:	7c3b      	ldrb	r3, [r7, #16]
 8005a08:	7d39      	ldrb	r1, [r7, #20]
 8005a0a:	2900      	cmp	r1, #0
 8005a0c:	d001      	beq.n	8005a12 <RadioGetGfskTimeOnAirNumerator+0x42>
 8005a0e:	2102      	movs	r1, #2
 8005a10:	e000      	b.n	8005a14 <RadioGetGfskTimeOnAirNumerator+0x44>
 8005a12:	2100      	movs	r1, #0
 8005a14:	440b      	add	r3, r1
 8005a16:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005a18:	4413      	add	r3, r2
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b08b      	sub	sp, #44	; 0x2c
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4611      	mov	r1, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	460b      	mov	r3, r1
 8005a34:	71fb      	strb	r3, [r7, #7]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	d002      	beq.n	8005a52 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b06      	cmp	r3, #6
 8005a50:	d104      	bne.n	8005a5c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8005a52:	88bb      	ldrh	r3, [r7, #4]
 8005a54:	2b0b      	cmp	r3, #11
 8005a56:	d801      	bhi.n	8005a5c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8005a58:	230c      	movs	r3, #12
 8005a5a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d105      	bne.n	8005a6e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b0b      	cmp	r3, #11
 8005a66:	d008      	beq.n	8005a7a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b0c      	cmp	r3, #12
 8005a6c:	d005      	beq.n	8005a7a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d105      	bne.n	8005a80 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b0c      	cmp	r3, #12
 8005a78:	d102      	bne.n	8005a80 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005a80:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005a84:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8005a86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	d001      	beq.n	8005a92 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8005a8e:	2210      	movs	r2, #16
 8005a90:	e000      	b.n	8005a94 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8005a92:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005a94:	4413      	add	r3, r2
 8005a96:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8005a9c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8005a9e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005aa2:	2a00      	cmp	r2, #0
 8005aa4:	d001      	beq.n	8005aaa <RadioGetLoRaTimeOnAirNumerator+0x86>
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	e000      	b.n	8005aac <RadioGetLoRaTimeOnAirNumerator+0x88>
 8005aaa:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8005aac:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005aae:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d803      	bhi.n	8005abe <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	623b      	str	r3, [r7, #32]
 8005abc:	e00e      	b.n	8005adc <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8005ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	3b02      	subs	r3, #2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	e002      	b.n	8005adc <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da01      	bge.n	8005ae6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	4413      	add	r3, r2
 8005aec:	1e5a      	subs	r2, r3, #1
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	fb92 f3f3 	sdiv	r3, r2, r3
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	fb03 f202 	mul.w	r2, r3, r2
 8005afa:	88bb      	ldrh	r3, [r7, #4]
 8005afc:	4413      	add	r3, r2
    int32_t intermediate =
 8005afe:	330c      	adds	r3, #12
 8005b00:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b06      	cmp	r3, #6
 8005b06:	d802      	bhi.n	8005b0e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	3302      	adds	r3, #2
 8005b0c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	3b02      	subs	r3, #2
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	372c      	adds	r7, #44	; 0x2c
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
	...

08005b28 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	; 0x28
 8005b2c:	af04      	add	r7, sp, #16
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
 8005b32:	461a      	mov	r2, r3
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8005b40:	2301      	movs	r3, #1
 8005b42:	613b      	str	r3, [r7, #16]

    switch( modem )
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <RadioTimeOnAir+0x28>
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d017      	beq.n	8005b7e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8005b4e:	e035      	b.n	8005bbc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005b50:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8005b54:	8c3a      	ldrh	r2, [r7, #32]
 8005b56:	7bb9      	ldrb	r1, [r7, #14]
 8005b58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	4603      	mov	r3, r0
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff ff32 	bl	80059d0 <RadioGetGfskTimeOnAirNumerator>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b72:	fb02 f303 	mul.w	r3, r2, r3
 8005b76:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	613b      	str	r3, [r7, #16]
        break;
 8005b7c:	e01e      	b.n	8005bbc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005b7e:	8c39      	ldrh	r1, [r7, #32]
 8005b80:	7bba      	ldrb	r2, [r7, #14]
 8005b82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b86:	9302      	str	r3, [sp, #8]
 8005b88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b8c:	9301      	str	r3, [sp, #4]
 8005b8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	460b      	mov	r3, r1
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	68b8      	ldr	r0, [r7, #8]
 8005b9a:	f7ff ff43 	bl	8005a24 <RadioGetLoRaTimeOnAirNumerator>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ba4:	fb02 f303 	mul.w	r3, r2, r3
 8005ba8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005baa:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <RadioTimeOnAir+0xac>)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4413      	add	r3, r2
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff feb6 	bl	8005924 <RadioGetLoRaBandwidthInHz>
 8005bb8:	6138      	str	r0, [r7, #16]
        break;
 8005bba:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	1e5a      	subs	r2, r3, #1
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	08009a88 	.word	0x08009a88

08005bd8 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005be4:	2300      	movs	r3, #0
 8005be6:	2200      	movs	r2, #0
 8005be8:	f240 2101 	movw	r1, #513	; 0x201
 8005bec:	f240 2001 	movw	r0, #513	; 0x201
 8005bf0:	f001 fd2c 	bl	800764c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8005bf4:	4b70      	ldr	r3, [pc, #448]	; (8005db8 <RadioSend+0x1e0>)
 8005bf6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f002 f9c9 	bl	8007f94 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8005c02:	4b6d      	ldr	r3, [pc, #436]	; (8005db8 <RadioSend+0x1e0>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d112      	bne.n	8005c30 <RadioSend+0x58>
 8005c0a:	4b6b      	ldr	r3, [pc, #428]	; (8005db8 <RadioSend+0x1e0>)
 8005c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c10:	2b06      	cmp	r3, #6
 8005c12:	d10d      	bne.n	8005c30 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8005c14:	f640 0089 	movw	r0, #2185	; 0x889
 8005c18:	f002 f8dc 	bl	8007dd4 <SUBGRF_ReadRegister>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f023 0304 	bic.w	r3, r3, #4
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	4619      	mov	r1, r3
 8005c26:	f640 0089 	movw	r0, #2185	; 0x889
 8005c2a:	f002 f8bf 	bl	8007dac <SUBGRF_WriteRegister>
 8005c2e:	e00c      	b.n	8005c4a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8005c30:	f640 0089 	movw	r0, #2185	; 0x889
 8005c34:	f002 f8ce 	bl	8007dd4 <SUBGRF_ReadRegister>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f043 0304 	orr.w	r3, r3, #4
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	4619      	mov	r1, r3
 8005c42:	f640 0089 	movw	r0, #2185	; 0x889
 8005c46:	f002 f8b1 	bl	8007dac <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8005c4a:	4b5b      	ldr	r3, [pc, #364]	; (8005db8 <RadioSend+0x1e0>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	f200 80a2 	bhi.w	8005d98 <RadioSend+0x1c0>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <RadioSend+0x84>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c8b 	.word	0x08005c8b
 8005c60:	08005c71 	.word	0x08005c71
 8005c64:	08005c8b 	.word	0x08005c8b
 8005c68:	08005ce1 	.word	0x08005ce1
 8005c6c:	08005d01 	.word	0x08005d01
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8005c70:	4a51      	ldr	r2, [pc, #324]	; (8005db8 <RadioSend+0x1e0>)
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005c76:	4851      	ldr	r0, [pc, #324]	; (8005dbc <RadioSend+0x1e4>)
 8005c78:	f001 ff50 	bl	8007b1c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4619      	mov	r1, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f001 fa00 	bl	8007088 <SUBGRF_SendPayload>
            break;
 8005c88:	e087      	b.n	8005d9a <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8005c8a:	f002 fb7c 	bl	8008386 <RFW_Is_Init>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d118      	bne.n	8005cc6 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005c94:	f107 020d 	add.w	r2, r7, #13
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f002 fb8a 	bl	80083b6 <RFW_TransmitInit>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10c      	bne.n	8005cc2 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005ca8:	7b7a      	ldrb	r2, [r7, #13]
 8005caa:	4b43      	ldr	r3, [pc, #268]	; (8005db8 <RadioSend+0x1e0>)
 8005cac:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cae:	4843      	ldr	r0, [pc, #268]	; (8005dbc <RadioSend+0x1e4>)
 8005cb0:	f001 ff34 	bl	8007b1c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8005cb4:	7b7b      	ldrb	r3, [r7, #13]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4619      	mov	r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f001 f9e4 	bl	8007088 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8005cc0:	e06b      	b.n	8005d9a <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e073      	b.n	8005dae <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005cc6:	4a3c      	ldr	r2, [pc, #240]	; (8005db8 <RadioSend+0x1e0>)
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005ccc:	483b      	ldr	r0, [pc, #236]	; (8005dbc <RadioSend+0x1e4>)
 8005cce:	f001 ff25 	bl	8007b1c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 f9d5 	bl	8007088 <SUBGRF_SendPayload>
            break;
 8005cde:	e05c      	b.n	8005d9a <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005ce0:	4b35      	ldr	r3, [pc, #212]	; (8005db8 <RadioSend+0x1e0>)
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005ce6:	4a34      	ldr	r2, [pc, #208]	; (8005db8 <RadioSend+0x1e0>)
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cec:	4833      	ldr	r0, [pc, #204]	; (8005dbc <RadioSend+0x1e4>)
 8005cee:	f001 ff15 	bl	8007b1c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f001 f9c5 	bl	8007088 <SUBGRF_SendPayload>
            break;
 8005cfe:	e04c      	b.n	8005d9a <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	461a      	mov	r2, r3
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	482e      	ldr	r0, [pc, #184]	; (8005dc0 <RadioSend+0x1e8>)
 8005d08:	f000 fc98 	bl	800663c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005d0c:	4b2a      	ldr	r3, [pc, #168]	; (8005db8 <RadioSend+0x1e0>)
 8005d0e:	2202      	movs	r2, #2
 8005d10:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	3301      	adds	r3, #1
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	4b27      	ldr	r3, [pc, #156]	; (8005db8 <RadioSend+0x1e0>)
 8005d1a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d1c:	4827      	ldr	r0, [pc, #156]	; (8005dbc <RadioSend+0x1e4>)
 8005d1e:	f001 fefd 	bl	8007b1c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8005d22:	2100      	movs	r1, #0
 8005d24:	20f1      	movs	r0, #241	; 0xf1
 8005d26:	f000 f964 	bl	8005ff2 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	20f0      	movs	r0, #240	; 0xf0
 8005d2e:	f000 f960 	bl	8005ff2 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8005d32:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <RadioSend+0x1e0>)
 8005d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d36:	2b64      	cmp	r3, #100	; 0x64
 8005d38:	d108      	bne.n	8005d4c <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8005d3a:	2170      	movs	r1, #112	; 0x70
 8005d3c:	20f3      	movs	r0, #243	; 0xf3
 8005d3e:	f000 f958 	bl	8005ff2 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8005d42:	211d      	movs	r1, #29
 8005d44:	20f2      	movs	r0, #242	; 0xf2
 8005d46:	f000 f954 	bl	8005ff2 <RadioWrite>
 8005d4a:	e007      	b.n	8005d5c <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8005d4c:	21e1      	movs	r1, #225	; 0xe1
 8005d4e:	20f3      	movs	r0, #243	; 0xf3
 8005d50:	f000 f94f 	bl	8005ff2 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8005d54:	2104      	movs	r1, #4
 8005d56:	20f2      	movs	r0, #242	; 0xf2
 8005d58:	f000 f94b 	bl	8005ff2 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3302      	adds	r3, #2
 8005d66:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8005d68:	89fb      	ldrh	r3, [r7, #14]
 8005d6a:	0a1b      	lsrs	r3, r3, #8
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	4619      	mov	r1, r3
 8005d72:	20f4      	movs	r0, #244	; 0xf4
 8005d74:	f000 f93d 	bl	8005ff2 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8005d78:	89fb      	ldrh	r3, [r7, #14]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	20f5      	movs	r0, #245	; 0xf5
 8005d80:	f000 f937 	bl	8005ff2 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	3301      	adds	r3, #1
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005d8e:	4619      	mov	r1, r3
 8005d90:	480b      	ldr	r0, [pc, #44]	; (8005dc0 <RadioSend+0x1e8>)
 8005d92:	f001 f979 	bl	8007088 <SUBGRF_SendPayload>
            break;
 8005d96:	e000      	b.n	8005d9a <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8005d98:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8005d9a:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <RadioSend+0x1e0>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4808      	ldr	r0, [pc, #32]	; (8005dc4 <RadioSend+0x1ec>)
 8005da2:	f002 fdcf 	bl	8008944 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8005da6:	4807      	ldr	r0, [pc, #28]	; (8005dc4 <RadioSend+0x1ec>)
 8005da8:	f002 fcee 	bl	8008788 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20000384 	.word	0x20000384
 8005dbc:	20000392 	.word	0x20000392
 8005dc0:	20000280 	.word	0x20000280
 8005dc4:	200003e0 	.word	0x200003e0

08005dc8 <RadioSleep>:

static void RadioSleep( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8005dce:	2300      	movs	r3, #0
 8005dd0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8005dd2:	793b      	ldrb	r3, [r7, #4]
 8005dd4:	f043 0304 	orr.w	r3, r3, #4
 8005dd8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8005dda:	7938      	ldrb	r0, [r7, #4]
 8005ddc:	f001 fa30 	bl	8007240 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8005de0:	2002      	movs	r0, #2
 8005de2:	f7fb fabd 	bl	8001360 <HAL_Delay>
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <RadioStandby>:

static void RadioStandby( void )
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8005df2:	2000      	movs	r0, #0
 8005df4:	f001 fa56 	bl	80072a4 <SUBGRF_SetStandby>
}
 8005df8:	bf00      	nop
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8005e04:	f002 fabf 	bl	8008386 <RFW_Is_Init>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d102      	bne.n	8005e14 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8005e0e:	f002 fae2 	bl	80083d6 <RFW_ReceiveInit>
 8005e12:	e007      	b.n	8005e24 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005e14:	2300      	movs	r3, #0
 8005e16:	2200      	movs	r2, #0
 8005e18:	f240 2162 	movw	r1, #610	; 0x262
 8005e1c:	f240 2062 	movw	r0, #610	; 0x262
 8005e20:	f001 fc14 	bl	800764c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d006      	beq.n	8005e38 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	4811      	ldr	r0, [pc, #68]	; (8005e74 <RadioRx+0x78>)
 8005e2e:	f002 fd89 	bl	8008944 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005e32:	4810      	ldr	r0, [pc, #64]	; (8005e74 <RadioRx+0x78>)
 8005e34:	f002 fca8 	bl	8008788 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005e38:	4b0f      	ldr	r3, [pc, #60]	; (8005e78 <RadioRx+0x7c>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005e3e:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <RadioRx+0x7c>)
 8005e40:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005e44:	2100      	movs	r1, #0
 8005e46:	4618      	mov	r0, r3
 8005e48:	f002 f8a4 	bl	8007f94 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <RadioRx+0x7c>)
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005e54:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005e58:	f001 fa60 	bl	800731c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8005e5c:	e005      	b.n	8005e6a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <RadioRx+0x7c>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	019b      	lsls	r3, r3, #6
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 fa59 	bl	800731c <SUBGRF_SetRx>
}
 8005e6a:	bf00      	nop
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	200003f8 	.word	0x200003f8
 8005e78:	20000384 	.word	0x20000384

08005e7c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8005e84:	f002 fa7f 	bl	8008386 <RFW_Is_Init>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d102      	bne.n	8005e94 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8005e8e:	f002 faa2 	bl	80083d6 <RFW_ReceiveInit>
 8005e92:	e007      	b.n	8005ea4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005e94:	2300      	movs	r3, #0
 8005e96:	2200      	movs	r2, #0
 8005e98:	f240 2162 	movw	r1, #610	; 0x262
 8005e9c:	f240 2062 	movw	r0, #610	; 0x262
 8005ea0:	f001 fbd4 	bl	800764c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d006      	beq.n	8005eb8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4811      	ldr	r0, [pc, #68]	; (8005ef4 <RadioRxBoosted+0x78>)
 8005eae:	f002 fd49 	bl	8008944 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005eb2:	4810      	ldr	r0, [pc, #64]	; (8005ef4 <RadioRxBoosted+0x78>)
 8005eb4:	f002 fc68 	bl	8008788 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005eb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <RadioRxBoosted+0x7c>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005ebe:	4b0e      	ldr	r3, [pc, #56]	; (8005ef8 <RadioRxBoosted+0x7c>)
 8005ec0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f002 f864 	bl	8007f94 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <RadioRxBoosted+0x7c>)
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8005ed4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005ed8:	f001 fa40 	bl	800735c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8005edc:	e005      	b.n	8005eea <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <RadioRxBoosted+0x7c>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	019b      	lsls	r3, r3, #6
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 fa39 	bl	800735c <SUBGRF_SetRxBoosted>
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	200003f8 	.word	0x200003f8
 8005ef8:	20000384 	.word	0x20000384

08005efc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	005a      	lsls	r2, r3, #1
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <RadioSetRxDutyCycle+0x44>)
 8005f10:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005f12:	2300      	movs	r3, #0
 8005f14:	2200      	movs	r2, #0
 8005f16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005f1e:	f001 fb95 	bl	800764c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005f22:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <RadioSetRxDutyCycle+0x44>)
 8005f24:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f002 f832 	bl	8007f94 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 fa36 	bl	80073a4 <SUBGRF_SetRxDutyCycle>
}
 8005f38:	bf00      	nop
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000384 	.word	0x20000384

08005f44 <RadioStartCad>:

static void RadioStartCad( void )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005f48:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <RadioStartCad+0x2c>)
 8005f4a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005f4e:	2100      	movs	r1, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f002 f81f 	bl	8007f94 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8005f56:	2300      	movs	r3, #0
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005f5e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8005f62:	f001 fb73 	bl	800764c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8005f66:	f001 fa49 	bl	80073fc <SUBGRF_SetCad>
}
 8005f6a:	bf00      	nop
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000384 	.word	0x20000384

08005f74 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
 8005f80:	4613      	mov	r3, r2
 8005f82:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8005f84:	883b      	ldrh	r3, [r7, #0]
 8005f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 fbb7 	bl	8007704 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8005f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f002 f822 	bl	8007fe4 <SUBGRF_SetRfTxPower>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8005fa4:	210e      	movs	r1, #14
 8005fa6:	f640 101f 	movw	r0, #2335	; 0x91f
 8005faa:	f001 feff 	bl	8007dac <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8005fae:	7afb      	ldrb	r3, [r7, #11]
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 ffee 	bl	8007f94 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8005fb8:	f001 fa2e 	bl	8007418 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8005fbc:	68f9      	ldr	r1, [r7, #12]
 8005fbe:	4805      	ldr	r0, [pc, #20]	; (8005fd4 <RadioSetTxContinuousWave+0x60>)
 8005fc0:	f002 fcc0 	bl	8008944 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8005fc4:	4803      	ldr	r0, [pc, #12]	; (8005fd4 <RadioSetTxContinuousWave+0x60>)
 8005fc6:	f002 fbdf 	bl	8008788 <UTIL_TIMER_Start>
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	200003e0 	.word	0x200003e0

08005fd8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8005fe2:	f001 fe50 	bl	8007c86 <SUBGRF_GetRssiInst>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	b21b      	sxth	r3, r3
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	460a      	mov	r2, r1
 8005ffc:	80fb      	strh	r3, [r7, #6]
 8005ffe:	4613      	mov	r3, r2
 8006000:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8006002:	797a      	ldrb	r2, [r7, #5]
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	4611      	mov	r1, r2
 8006008:	4618      	mov	r0, r3
 800600a:	f001 fecf 	bl	8007dac <SUBGRF_WriteRegister>
}
 800600e:	bf00      	nop
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	4603      	mov	r3, r0
 800601e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	4618      	mov	r0, r3
 8006024:	f001 fed6 	bl	8007dd4 <SUBGRF_ReadRegister>
 8006028:	4603      	mov	r3, r0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	4603      	mov	r3, r0
 800603a:	6039      	str	r1, [r7, #0]
 800603c:	80fb      	strh	r3, [r7, #6]
 800603e:	4613      	mov	r3, r2
 8006040:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8006042:	797b      	ldrb	r3, [r7, #5]
 8006044:	b29a      	uxth	r2, r3
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f001 fed6 	bl	8007dfc <SUBGRF_WriteRegisters>
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	6039      	str	r1, [r7, #0]
 8006062:	80fb      	strh	r3, [r7, #6]
 8006064:	4613      	mov	r3, r2
 8006066:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8006068:	797b      	ldrb	r3, [r7, #5]
 800606a:	b29a      	uxth	r2, r3
 800606c:	88fb      	ldrh	r3, [r7, #6]
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f001 fee5 	bl	8007e40 <SUBGRF_ReadRegisters>
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	460a      	mov	r2, r1
 800608a:	71fb      	strb	r3, [r7, #7]
 800608c:	4613      	mov	r3, r2
 800608e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d10a      	bne.n	80060ac <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8006096:	4a0e      	ldr	r2, [pc, #56]	; (80060d0 <RadioSetMaxPayloadLength+0x50>)
 8006098:	79bb      	ldrb	r3, [r7, #6]
 800609a:	7013      	strb	r3, [r2, #0]
 800609c:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <RadioSetMaxPayloadLength+0x50>)
 800609e:	781a      	ldrb	r2, [r3, #0]
 80060a0:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <RadioSetMaxPayloadLength+0x54>)
 80060a2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80060a4:	480c      	ldr	r0, [pc, #48]	; (80060d8 <RadioSetMaxPayloadLength+0x58>)
 80060a6:	f001 fd39 	bl	8007b1c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80060aa:	e00d      	b.n	80060c8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80060ac:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <RadioSetMaxPayloadLength+0x54>)
 80060ae:	7d5b      	ldrb	r3, [r3, #21]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d109      	bne.n	80060c8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80060b4:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <RadioSetMaxPayloadLength+0x50>)
 80060b6:	79bb      	ldrb	r3, [r7, #6]
 80060b8:	7013      	strb	r3, [r2, #0]
 80060ba:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <RadioSetMaxPayloadLength+0x50>)
 80060bc:	781a      	ldrb	r2, [r3, #0]
 80060be:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <RadioSetMaxPayloadLength+0x54>)
 80060c0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80060c2:	4805      	ldr	r0, [pc, #20]	; (80060d8 <RadioSetMaxPayloadLength+0x58>)
 80060c4:	f001 fd2a 	bl	8007b1c <SUBGRF_SetPacketParams>
}
 80060c8:	bf00      	nop
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	2000000d 	.word	0x2000000d
 80060d4:	20000384 	.word	0x20000384
 80060d8:	20000392 	.word	0x20000392

080060dc <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80060e6:	4a13      	ldr	r2, [pc, #76]	; (8006134 <RadioSetPublicNetwork+0x58>)
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	7313      	strb	r3, [r2, #12]
 80060ec:	4b11      	ldr	r3, [pc, #68]	; (8006134 <RadioSetPublicNetwork+0x58>)
 80060ee:	7b1a      	ldrb	r2, [r3, #12]
 80060f0:	4b10      	ldr	r3, [pc, #64]	; (8006134 <RadioSetPublicNetwork+0x58>)
 80060f2:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80060f4:	2001      	movs	r0, #1
 80060f6:	f7ff f819 	bl	800512c <RadioSetModem>
    if( enable == true )
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8006100:	2134      	movs	r1, #52	; 0x34
 8006102:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006106:	f001 fe51 	bl	8007dac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800610a:	2144      	movs	r1, #68	; 0x44
 800610c:	f240 7041 	movw	r0, #1857	; 0x741
 8006110:	f001 fe4c 	bl	8007dac <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8006114:	e009      	b.n	800612a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8006116:	2114      	movs	r1, #20
 8006118:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800611c:	f001 fe46 	bl	8007dac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006120:	2124      	movs	r1, #36	; 0x24
 8006122:	f240 7041 	movw	r0, #1857	; 0x741
 8006126:	f001 fe41 	bl	8007dac <SUBGRF_WriteRegister>
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000384 	.word	0x20000384

08006138 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800613c:	f001 ff86 	bl	800804c <SUBGRF_GetRadioWakeUpTime>
 8006140:	4603      	mov	r3, r0
 8006142:	3303      	adds	r3, #3
}
 8006144:	4618      	mov	r0, r3
 8006146:	bd80      	pop	{r7, pc}

08006148 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8006150:	f000 f80e 	bl	8006170 <RadioOnTxTimeoutProcess>
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8006164:	f000 f818 	bl	8006198 <RadioOnRxTimeoutProcess>
}
 8006168:	bf00      	nop
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006174:	4b07      	ldr	r3, [pc, #28]	; (8006194 <RadioOnTxTimeoutProcess+0x24>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d008      	beq.n	800618e <RadioOnTxTimeoutProcess+0x1e>
 800617c:	4b05      	ldr	r3, [pc, #20]	; (8006194 <RadioOnTxTimeoutProcess+0x24>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8006186:	4b03      	ldr	r3, [pc, #12]	; (8006194 <RadioOnTxTimeoutProcess+0x24>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4798      	blx	r3
    }
}
 800618e:	bf00      	nop
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000380 	.word	0x20000380

08006198 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800619c:	4b07      	ldr	r3, [pc, #28]	; (80061bc <RadioOnRxTimeoutProcess+0x24>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <RadioOnRxTimeoutProcess+0x1e>
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <RadioOnRxTimeoutProcess+0x24>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80061ae:	4b03      	ldr	r3, [pc, #12]	; (80061bc <RadioOnRxTimeoutProcess+0x24>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	4798      	blx	r3
    }
}
 80061b6:	bf00      	nop
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20000380 	.word	0x20000380

080061c0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	4603      	mov	r3, r0
 80061c8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80061ca:	4a05      	ldr	r2, [pc, #20]	; (80061e0 <RadioOnDioIrq+0x20>)
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80061d2:	f000 f807 	bl	80061e4 <RadioIrqProcess>
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000384 	.word	0x20000384

080061e4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80061e4:	b5b0      	push	{r4, r5, r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80061f2:	4ba5      	ldr	r3, [pc, #660]	; (8006488 <RadioIrqProcess+0x2a4>)
 80061f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80061f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fc:	f000 810d 	beq.w	800641a <RadioIrqProcess+0x236>
 8006200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006204:	f300 81c0 	bgt.w	8006588 <RadioIrqProcess+0x3a4>
 8006208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620c:	f000 80f1 	beq.w	80063f2 <RadioIrqProcess+0x20e>
 8006210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006214:	f300 81b8 	bgt.w	8006588 <RadioIrqProcess+0x3a4>
 8006218:	2b80      	cmp	r3, #128	; 0x80
 800621a:	f000 80d6 	beq.w	80063ca <RadioIrqProcess+0x1e6>
 800621e:	2b80      	cmp	r3, #128	; 0x80
 8006220:	f300 81b2 	bgt.w	8006588 <RadioIrqProcess+0x3a4>
 8006224:	2b20      	cmp	r3, #32
 8006226:	dc49      	bgt.n	80062bc <RadioIrqProcess+0xd8>
 8006228:	2b00      	cmp	r3, #0
 800622a:	f340 81ad 	ble.w	8006588 <RadioIrqProcess+0x3a4>
 800622e:	3b01      	subs	r3, #1
 8006230:	2b1f      	cmp	r3, #31
 8006232:	f200 81a9 	bhi.w	8006588 <RadioIrqProcess+0x3a4>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <RadioIrqProcess+0x58>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	080062c5 	.word	0x080062c5
 8006240:	080062ff 	.word	0x080062ff
 8006244:	08006589 	.word	0x08006589
 8006248:	080064a5 	.word	0x080064a5
 800624c:	08006589 	.word	0x08006589
 8006250:	08006589 	.word	0x08006589
 8006254:	08006589 	.word	0x08006589
 8006258:	08006513 	.word	0x08006513
 800625c:	08006589 	.word	0x08006589
 8006260:	08006589 	.word	0x08006589
 8006264:	08006589 	.word	0x08006589
 8006268:	08006589 	.word	0x08006589
 800626c:	08006589 	.word	0x08006589
 8006270:	08006589 	.word	0x08006589
 8006274:	08006589 	.word	0x08006589
 8006278:	08006589 	.word	0x08006589
 800627c:	08006589 	.word	0x08006589
 8006280:	08006589 	.word	0x08006589
 8006284:	08006589 	.word	0x08006589
 8006288:	08006589 	.word	0x08006589
 800628c:	08006589 	.word	0x08006589
 8006290:	08006589 	.word	0x08006589
 8006294:	08006589 	.word	0x08006589
 8006298:	08006589 	.word	0x08006589
 800629c:	08006589 	.word	0x08006589
 80062a0:	08006589 	.word	0x08006589
 80062a4:	08006589 	.word	0x08006589
 80062a8:	08006589 	.word	0x08006589
 80062ac:	08006589 	.word	0x08006589
 80062b0:	08006589 	.word	0x08006589
 80062b4:	08006589 	.word	0x08006589
 80062b8:	08006523 	.word	0x08006523
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	f000 814b 	beq.w	8006558 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80062c2:	e161      	b.n	8006588 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 80062c4:	4871      	ldr	r0, [pc, #452]	; (800648c <RadioIrqProcess+0x2a8>)
 80062c6:	f002 facd 	bl	8008864 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80062ca:	2000      	movs	r0, #0
 80062cc:	f000 ffea 	bl	80072a4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80062d0:	f002 f860 	bl	8008394 <RFW_Is_LongPacketModeEnabled>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80062da:	f002 f884 	bl	80083e6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80062de:	4b6c      	ldr	r3, [pc, #432]	; (8006490 <RadioIrqProcess+0x2ac>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 8152 	beq.w	800658c <RadioIrqProcess+0x3a8>
 80062e8:	4b69      	ldr	r3, [pc, #420]	; (8006490 <RadioIrqProcess+0x2ac>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 814c 	beq.w	800658c <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 80062f4:	4b66      	ldr	r3, [pc, #408]	; (8006490 <RadioIrqProcess+0x2ac>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4798      	blx	r3
        break;
 80062fc:	e146      	b.n	800658c <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 80062fe:	4865      	ldr	r0, [pc, #404]	; (8006494 <RadioIrqProcess+0x2b0>)
 8006300:	f002 fab0 	bl	8008864 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8006304:	4b60      	ldr	r3, [pc, #384]	; (8006488 <RadioIrqProcess+0x2a4>)
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	f083 0301 	eor.w	r3, r3, #1
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d014      	beq.n	800633c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8006312:	2000      	movs	r0, #0
 8006314:	f000 ffc6 	bl	80072a4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8006318:	2100      	movs	r1, #0
 800631a:	f640 1002 	movw	r0, #2306	; 0x902
 800631e:	f001 fd45 	bl	8007dac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8006322:	f640 1044 	movw	r0, #2372	; 0x944
 8006326:	f001 fd55 	bl	8007dd4 <SUBGRF_ReadRegister>
 800632a:	4603      	mov	r3, r0
 800632c:	f043 0302 	orr.w	r3, r3, #2
 8006330:	b2db      	uxtb	r3, r3
 8006332:	4619      	mov	r1, r3
 8006334:	f640 1044 	movw	r0, #2372	; 0x944
 8006338:	f001 fd38 	bl	8007dac <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800633c:	1dfb      	adds	r3, r7, #7
 800633e:	22ff      	movs	r2, #255	; 0xff
 8006340:	4619      	mov	r1, r3
 8006342:	4855      	ldr	r0, [pc, #340]	; (8006498 <RadioIrqProcess+0x2b4>)
 8006344:	f000 fe7e 	bl	8007044 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8006348:	4854      	ldr	r0, [pc, #336]	; (800649c <RadioIrqProcess+0x2b8>)
 800634a:	f001 fcdd 	bl	8007d08 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800634e:	4b50      	ldr	r3, [pc, #320]	; (8006490 <RadioIrqProcess+0x2ac>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 811c 	beq.w	8006590 <RadioIrqProcess+0x3ac>
 8006358:	4b4d      	ldr	r3, [pc, #308]	; (8006490 <RadioIrqProcess+0x2ac>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8116 	beq.w	8006590 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8006364:	4b48      	ldr	r3, [pc, #288]	; (8006488 <RadioIrqProcess+0x2a4>)
 8006366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800636a:	2b01      	cmp	r3, #1
 800636c:	d10e      	bne.n	800638c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800636e:	4b48      	ldr	r3, [pc, #288]	; (8006490 <RadioIrqProcess+0x2ac>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689c      	ldr	r4, [r3, #8]
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	b299      	uxth	r1, r3
 8006378:	4b43      	ldr	r3, [pc, #268]	; (8006488 <RadioIrqProcess+0x2a4>)
 800637a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800637e:	b21a      	sxth	r2, r3
 8006380:	4b41      	ldr	r3, [pc, #260]	; (8006488 <RadioIrqProcess+0x2a4>)
 8006382:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8006386:	4844      	ldr	r0, [pc, #272]	; (8006498 <RadioIrqProcess+0x2b4>)
 8006388:	47a0      	blx	r4
                break;
 800638a:	e01d      	b.n	80063c8 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800638c:	4b3e      	ldr	r3, [pc, #248]	; (8006488 <RadioIrqProcess+0x2a4>)
 800638e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006390:	463a      	mov	r2, r7
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f001 ff4b 	bl	8008230 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800639a:	4b3d      	ldr	r3, [pc, #244]	; (8006490 <RadioIrqProcess+0x2ac>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689c      	ldr	r4, [r3, #8]
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	b299      	uxth	r1, r3
 80063a4:	4b38      	ldr	r3, [pc, #224]	; (8006488 <RadioIrqProcess+0x2a4>)
 80063a6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80063aa:	b218      	sxth	r0, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80063b2:	4a3b      	ldr	r2, [pc, #236]	; (80064a0 <RadioIrqProcess+0x2bc>)
 80063b4:	fb82 5203 	smull	r5, r2, r2, r3
 80063b8:	1192      	asrs	r2, r2, #6
 80063ba:	17db      	asrs	r3, r3, #31
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	4602      	mov	r2, r0
 80063c2:	4835      	ldr	r0, [pc, #212]	; (8006498 <RadioIrqProcess+0x2b4>)
 80063c4:	47a0      	blx	r4
                break;
 80063c6:	bf00      	nop
        break;
 80063c8:	e0e2      	b.n	8006590 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80063ca:	2000      	movs	r0, #0
 80063cc:	f000 ff6a 	bl	80072a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80063d0:	4b2f      	ldr	r3, [pc, #188]	; (8006490 <RadioIrqProcess+0x2ac>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80dd 	beq.w	8006594 <RadioIrqProcess+0x3b0>
 80063da:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <RadioIrqProcess+0x2ac>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80d7 	beq.w	8006594 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 80063e6:	4b2a      	ldr	r3, [pc, #168]	; (8006490 <RadioIrqProcess+0x2ac>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	2000      	movs	r0, #0
 80063ee:	4798      	blx	r3
        break;
 80063f0:	e0d0      	b.n	8006594 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 80063f2:	2000      	movs	r0, #0
 80063f4:	f000 ff56 	bl	80072a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80063f8:	4b25      	ldr	r3, [pc, #148]	; (8006490 <RadioIrqProcess+0x2ac>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 80cb 	beq.w	8006598 <RadioIrqProcess+0x3b4>
 8006402:	4b23      	ldr	r3, [pc, #140]	; (8006490 <RadioIrqProcess+0x2ac>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80c5 	beq.w	8006598 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 800640e:	4b20      	ldr	r3, [pc, #128]	; (8006490 <RadioIrqProcess+0x2ac>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	2001      	movs	r0, #1
 8006416:	4798      	blx	r3
        break;
 8006418:	e0be      	b.n	8006598 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800641a:	f000 fdf9 	bl	8007010 <SUBGRF_GetOperatingMode>
 800641e:	4603      	mov	r3, r0
 8006420:	2b04      	cmp	r3, #4
 8006422:	d115      	bne.n	8006450 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8006424:	4819      	ldr	r0, [pc, #100]	; (800648c <RadioIrqProcess+0x2a8>)
 8006426:	f002 fa1d 	bl	8008864 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800642a:	2000      	movs	r0, #0
 800642c:	f000 ff3a 	bl	80072a4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006430:	4b17      	ldr	r3, [pc, #92]	; (8006490 <RadioIrqProcess+0x2ac>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80b1 	beq.w	800659c <RadioIrqProcess+0x3b8>
 800643a:	4b15      	ldr	r3, [pc, #84]	; (8006490 <RadioIrqProcess+0x2ac>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80ab 	beq.w	800659c <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8006446:	4b12      	ldr	r3, [pc, #72]	; (8006490 <RadioIrqProcess+0x2ac>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	4798      	blx	r3
        break;
 800644e:	e0a5      	b.n	800659c <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8006450:	f000 fdde 	bl	8007010 <SUBGRF_GetOperatingMode>
 8006454:	4603      	mov	r3, r0
 8006456:	2b05      	cmp	r3, #5
 8006458:	f040 80a0 	bne.w	800659c <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 800645c:	480d      	ldr	r0, [pc, #52]	; (8006494 <RadioIrqProcess+0x2b0>)
 800645e:	f002 fa01 	bl	8008864 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8006462:	2000      	movs	r0, #0
 8006464:	f000 ff1e 	bl	80072a4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006468:	4b09      	ldr	r3, [pc, #36]	; (8006490 <RadioIrqProcess+0x2ac>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8095 	beq.w	800659c <RadioIrqProcess+0x3b8>
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <RadioIrqProcess+0x2ac>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 808f 	beq.w	800659c <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 800647e:	4b04      	ldr	r3, [pc, #16]	; (8006490 <RadioIrqProcess+0x2ac>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4798      	blx	r3
        break;
 8006486:	e089      	b.n	800659c <RadioIrqProcess+0x3b8>
 8006488:	20000384 	.word	0x20000384
 800648c:	200003e0 	.word	0x200003e0
 8006490:	20000380 	.word	0x20000380
 8006494:	200003f8 	.word	0x200003f8
 8006498:	20000280 	.word	0x20000280
 800649c:	200003a8 	.word	0x200003a8
 80064a0:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80064a4:	4b44      	ldr	r3, [pc, #272]	; (80065b8 <RadioIrqProcess+0x3d4>)
 80064a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d079      	beq.n	80065a0 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80064ac:	4a43      	ldr	r2, [pc, #268]	; (80065bc <RadioIrqProcess+0x3d8>)
 80064ae:	4b42      	ldr	r3, [pc, #264]	; (80065b8 <RadioIrqProcess+0x3d4>)
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	4619      	mov	r1, r3
 80064b8:	f640 1003 	movw	r0, #2307	; 0x903
 80064bc:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80064be:	4a3f      	ldr	r2, [pc, #252]	; (80065bc <RadioIrqProcess+0x3d8>)
 80064c0:	4b3d      	ldr	r3, [pc, #244]	; (80065b8 <RadioIrqProcess+0x3d4>)
 80064c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c4:	0a1b      	lsrs	r3, r3, #8
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	4619      	mov	r1, r3
 80064ca:	f640 1004 	movw	r0, #2308	; 0x904
 80064ce:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80064d0:	4a3a      	ldr	r2, [pc, #232]	; (80065bc <RadioIrqProcess+0x3d8>)
 80064d2:	4b39      	ldr	r3, [pc, #228]	; (80065b8 <RadioIrqProcess+0x3d4>)
 80064d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	4619      	mov	r1, r3
 80064da:	f640 1005 	movw	r0, #2309	; 0x905
 80064de:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80064e0:	4c36      	ldr	r4, [pc, #216]	; (80065bc <RadioIrqProcess+0x3d8>)
 80064e2:	4b37      	ldr	r3, [pc, #220]	; (80065c0 <RadioIrqProcess+0x3dc>)
 80064e4:	f640 1002 	movw	r0, #2306	; 0x902
 80064e8:	4798      	blx	r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	f640 1002 	movw	r0, #2306	; 0x902
 80064f8:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80064fa:	4b2f      	ldr	r3, [pc, #188]	; (80065b8 <RadioIrqProcess+0x3d4>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006500:	2300      	movs	r3, #0
 8006502:	2200      	movs	r2, #0
 8006504:	f240 2162 	movw	r1, #610	; 0x262
 8006508:	f240 2062 	movw	r0, #610	; 0x262
 800650c:	f001 f89e 	bl	800764c <SUBGRF_SetDioIrqParams>
        break;
 8006510:	e046      	b.n	80065a0 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8006512:	f001 ff38 	bl	8008386 <RFW_Is_Init>
 8006516:	4603      	mov	r3, r0
 8006518:	2b01      	cmp	r3, #1
 800651a:	d143      	bne.n	80065a4 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 800651c:	f001 ff69 	bl	80083f2 <RFW_ReceivePayload>
        break;
 8006520:	e040      	b.n	80065a4 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8006522:	4828      	ldr	r0, [pc, #160]	; (80065c4 <RadioIrqProcess+0x3e0>)
 8006524:	f002 f99e 	bl	8008864 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8006528:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <RadioIrqProcess+0x3d4>)
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	f083 0301 	eor.w	r3, r3, #1
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8006536:	2000      	movs	r0, #0
 8006538:	f000 feb4 	bl	80072a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800653c:	4b22      	ldr	r3, [pc, #136]	; (80065c8 <RadioIrqProcess+0x3e4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d031      	beq.n	80065a8 <RadioIrqProcess+0x3c4>
 8006544:	4b20      	ldr	r3, [pc, #128]	; (80065c8 <RadioIrqProcess+0x3e4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d02c      	beq.n	80065a8 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 800654e:	4b1e      	ldr	r3, [pc, #120]	; (80065c8 <RadioIrqProcess+0x3e4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	4798      	blx	r3
        break;
 8006556:	e027      	b.n	80065a8 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8006558:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <RadioIrqProcess+0x3d4>)
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	f083 0301 	eor.w	r3, r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8006566:	2000      	movs	r0, #0
 8006568:	f000 fe9c 	bl	80072a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800656c:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <RadioIrqProcess+0x3e4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01b      	beq.n	80065ac <RadioIrqProcess+0x3c8>
 8006574:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <RadioIrqProcess+0x3e4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d016      	beq.n	80065ac <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800657e:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <RadioIrqProcess+0x3e4>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	4798      	blx	r3
        break;
 8006586:	e011      	b.n	80065ac <RadioIrqProcess+0x3c8>
        break;
 8006588:	bf00      	nop
 800658a:	e010      	b.n	80065ae <RadioIrqProcess+0x3ca>
        break;
 800658c:	bf00      	nop
 800658e:	e00e      	b.n	80065ae <RadioIrqProcess+0x3ca>
        break;
 8006590:	bf00      	nop
 8006592:	e00c      	b.n	80065ae <RadioIrqProcess+0x3ca>
        break;
 8006594:	bf00      	nop
 8006596:	e00a      	b.n	80065ae <RadioIrqProcess+0x3ca>
        break;
 8006598:	bf00      	nop
 800659a:	e008      	b.n	80065ae <RadioIrqProcess+0x3ca>
        break;
 800659c:	bf00      	nop
 800659e:	e006      	b.n	80065ae <RadioIrqProcess+0x3ca>
        break;
 80065a0:	bf00      	nop
 80065a2:	e004      	b.n	80065ae <RadioIrqProcess+0x3ca>
        break;
 80065a4:	bf00      	nop
 80065a6:	e002      	b.n	80065ae <RadioIrqProcess+0x3ca>
        break;
 80065a8:	bf00      	nop
 80065aa:	e000      	b.n	80065ae <RadioIrqProcess+0x3ca>
        break;
 80065ac:	bf00      	nop
    }
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bdb0      	pop	{r4, r5, r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000384 	.word	0x20000384
 80065bc:	08005ff3 	.word	0x08005ff3
 80065c0:	08006017 	.word	0x08006017
 80065c4:	200003f8 	.word	0x200003f8
 80065c8:	20000380 	.word	0x20000380

080065cc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80065d0:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <RadioTxPrbs+0x2c>)
 80065d2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80065d6:	2101      	movs	r1, #1
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 fcdb 	bl	8007f94 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80065de:	4b07      	ldr	r3, [pc, #28]	; (80065fc <RadioTxPrbs+0x30>)
 80065e0:	212d      	movs	r1, #45	; 0x2d
 80065e2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80065e6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80065e8:	f000 ff1f 	bl	800742a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80065ec:	4804      	ldr	r0, [pc, #16]	; (8006600 <RadioTxPrbs+0x34>)
 80065ee:	f000 fe75 	bl	80072dc <SUBGRF_SetTx>
}
 80065f2:	bf00      	nop
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000384 	.word	0x20000384
 80065fc:	08005ff3 	.word	0x08005ff3
 8006600:	000fffff 	.word	0x000fffff

08006604 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800660e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006612:	4618      	mov	r0, r3
 8006614:	f001 fce6 	bl	8007fe4 <SUBGRF_SetRfTxPower>
 8006618:	4603      	mov	r3, r0
 800661a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800661c:	210e      	movs	r1, #14
 800661e:	f640 101f 	movw	r0, #2335	; 0x91f
 8006622:	f001 fbc3 	bl	8007dac <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2101      	movs	r1, #1
 800662a:	4618      	mov	r0, r3
 800662c:	f001 fcb2 	bl	8007f94 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8006630:	f000 fef2 	bl	8007418 <SUBGRF_SetTxContinuousWave>
}
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800663c:	b480      	push	{r7}
 800663e:	b089      	sub	sp, #36	; 0x24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8006652:	2300      	movs	r3, #0
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e011      	b.n	800667c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	4413      	add	r3, r2
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	68b9      	ldr	r1, [r7, #8]
 8006664:	440b      	add	r3, r1
 8006666:	43d2      	mvns	r2, r2
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4413      	add	r3, r2
 8006672:	2200      	movs	r2, #0
 8006674:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	3301      	adds	r3, #1
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	429a      	cmp	r2, r3
 8006682:	dbe9      	blt.n	8006658 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8006684:	2300      	movs	r3, #0
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	e049      	b.n	800671e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	425a      	negs	r2, r3
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	f002 0207 	and.w	r2, r2, #7
 8006696:	bf58      	it	pl
 8006698:	4253      	negpl	r3, r2
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f1c3 0307 	rsb	r3, r3, #7
 80066a0:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	da00      	bge.n	80066aa <payload_integration+0x6e>
 80066a8:	3307      	adds	r3, #7
 80066aa:	10db      	asrs	r3, r3, #3
 80066ac:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	3301      	adds	r3, #1
 80066b2:	425a      	negs	r2, r3
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	f002 0207 	and.w	r2, r2, #7
 80066bc:	bf58      	it	pl
 80066be:	4253      	negpl	r3, r2
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	f1c3 0307 	rsb	r3, r3, #7
 80066c6:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	3301      	adds	r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	da00      	bge.n	80066d2 <payload_integration+0x96>
 80066d0:	3307      	adds	r3, #7
 80066d2:	10db      	asrs	r3, r3, #3
 80066d4:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80066d6:	7dbb      	ldrb	r3, [r7, #22]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	4413      	add	r3, r2
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	fa42 f303 	asr.w	r3, r2, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80066ee:	7ffa      	ldrb	r2, [r7, #31]
 80066f0:	7cfb      	ldrb	r3, [r7, #19]
 80066f2:	4053      	eors	r3, r2
 80066f4:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80066f6:	7d3b      	ldrb	r3, [r7, #20]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b25a      	sxtb	r2, r3
 8006700:	7ff9      	ldrb	r1, [r7, #31]
 8006702:	7d7b      	ldrb	r3, [r7, #21]
 8006704:	fa01 f303 	lsl.w	r3, r1, r3
 8006708:	b25b      	sxtb	r3, r3
 800670a:	4313      	orrs	r3, r2
 800670c:	b259      	sxtb	r1, r3
 800670e:	7d3b      	ldrb	r3, [r7, #20]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	b2ca      	uxtb	r2, r1
 8006716:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	3301      	adds	r3, #1
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	429a      	cmp	r2, r3
 8006726:	dbb0      	blt.n	800668a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8006728:	7ffb      	ldrb	r3, [r7, #31]
 800672a:	01db      	lsls	r3, r3, #7
 800672c:	b25a      	sxtb	r2, r3
 800672e:	7ffb      	ldrb	r3, [r7, #31]
 8006730:	019b      	lsls	r3, r3, #6
 8006732:	b25b      	sxtb	r3, r3
 8006734:	4313      	orrs	r3, r2
 8006736:	b25b      	sxtb	r3, r3
 8006738:	7ffa      	ldrb	r2, [r7, #31]
 800673a:	2a00      	cmp	r2, #0
 800673c:	d101      	bne.n	8006742 <payload_integration+0x106>
 800673e:	2220      	movs	r2, #32
 8006740:	e000      	b.n	8006744 <payload_integration+0x108>
 8006742:	2200      	movs	r2, #0
 8006744:	4313      	orrs	r3, r2
 8006746:	b259      	sxtb	r1, r3
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	b2ca      	uxtb	r2, r1
 8006750:	701a      	strb	r2, [r3, #0]
}
 8006752:	bf00      	nop
 8006754:	3724      	adds	r7, #36	; 0x24
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr

0800675c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08c      	sub	sp, #48	; 0x30
 8006760:	af00      	add	r7, sp, #0
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	607a      	str	r2, [r7, #4]
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8006770:	2300      	movs	r3, #0
 8006772:	623b      	str	r3, [r7, #32]
 8006774:	2300      	movs	r3, #0
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006778:	f001 fdff 	bl	800837a <RFW_DeInit>

    if( rxContinuous != 0 )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	bf14      	ite	ne
 800678c:	2301      	movne	r3, #1
 800678e:	2300      	moveq	r3, #0
 8006790:	b2da      	uxtb	r2, r3
 8006792:	4ba3      	ldr	r3, [pc, #652]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006794:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <RadioSetRxGenericConfig+0x48>
 800679c:	2b01      	cmp	r3, #1
 800679e:	f000 80dc 	beq.w	800695a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80067a2:	e194      	b.n	8006ace <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <RadioSetRxGenericConfig+0x58>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <RadioSetRxGenericConfig+0x5e>
            return -1;
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b8:	e18a      	b.n	8006ad0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	7f9b      	ldrb	r3, [r3, #30]
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d902      	bls.n	80067c8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80067c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067c6:	e183      	b.n	8006ad0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6919      	ldr	r1, [r3, #16]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	7f9b      	ldrb	r3, [r3, #30]
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	f107 0320 	add.w	r3, r7, #32
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 ff66 	bl	80086a8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bf14      	ite	ne
 80067e4:	2301      	movne	r3, #1
 80067e6:	2300      	moveq	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fe26 	bl	800743c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80067f0:	4b8b      	ldr	r3, [pc, #556]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	4a88      	ldr	r2, [pc, #544]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80067fe:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006806:	4b86      	ldr	r3, [pc, #536]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	4618      	mov	r0, r3
 8006812:	f001 fce5 	bl	80081e0 <SUBGRF_GetFskBandwidthRegValue>
 8006816:	4603      	mov	r3, r0
 8006818:	461a      	mov	r2, r3
 800681a:	4b81      	ldr	r3, [pc, #516]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 800681c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006820:	4b7f      	ldr	r3, [pc, #508]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006822:	2200      	movs	r2, #0
 8006824:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	b29b      	uxth	r3, r3
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	b29a      	uxth	r2, r3
 8006830:	4b7b      	ldr	r3, [pc, #492]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006832:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	7fda      	ldrb	r2, [r3, #31]
 8006838:	4b79      	ldr	r3, [pc, #484]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 800683a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	7f9b      	ldrb	r3, [r3, #30]
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	b2da      	uxtb	r2, r3
 8006844:	4b76      	ldr	r3, [pc, #472]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006846:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800684e:	4b74      	ldr	r3, [pc, #464]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006850:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006858:	2b00      	cmp	r3, #0
 800685a:	d105      	bne.n	8006868 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	b2da      	uxtb	r2, r3
 8006862:	4b6f      	ldr	r3, [pc, #444]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006864:	759a      	strb	r2, [r3, #22]
 8006866:	e00b      	b.n	8006880 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800686e:	2b02      	cmp	r3, #2
 8006870:	d103      	bne.n	800687a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006872:	4b6b      	ldr	r3, [pc, #428]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006874:	22ff      	movs	r2, #255	; 0xff
 8006876:	759a      	strb	r2, [r3, #22]
 8006878:	e002      	b.n	8006880 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800687a:	4b69      	ldr	r3, [pc, #420]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 800687c:	22ff      	movs	r2, #255	; 0xff
 800687e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006886:	2b02      	cmp	r3, #2
 8006888:	d004      	beq.n	8006894 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006890:	2b02      	cmp	r3, #2
 8006892:	d12d      	bne.n	80068f0 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800689a:	2bf1      	cmp	r3, #241	; 0xf1
 800689c:	d00c      	beq.n	80068b8 <RadioSetRxGenericConfig+0x15c>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80068a4:	2bf2      	cmp	r3, #242	; 0xf2
 80068a6:	d007      	beq.n	80068b8 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d002      	beq.n	80068b8 <RadioSetRxGenericConfig+0x15c>
                return -1;
 80068b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068b6:	e10b      	b.n	8006ad0 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80068b8:	2300      	movs	r3, #0
 80068ba:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80068c0:	4b58      	ldr	r3, [pc, #352]	; (8006a24 <RadioSetRxGenericConfig+0x2c8>)
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	f107 0314 	add.w	r3, r7, #20
 80068c8:	4a57      	ldr	r2, [pc, #348]	; (8006a28 <RadioSetRxGenericConfig+0x2cc>)
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 fd48 	bl	8008360 <RFW_Init>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <RadioSetRxGenericConfig+0x180>
                return -1;
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068da:	e0f9      	b.n	8006ad0 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80068dc:	4b50      	ldr	r3, [pc, #320]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80068de:	2200      	movs	r2, #0
 80068e0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80068e2:	4b4f      	ldr	r3, [pc, #316]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80068e8:	4b4d      	ldr	r3, [pc, #308]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	755a      	strb	r2, [r3, #21]
        {
 80068ee:	e00e      	b.n	800690e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80068f6:	4b4a      	ldr	r3, [pc, #296]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80068f8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006900:	4b47      	ldr	r3, [pc, #284]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006902:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800690a:	4b45      	ldr	r3, [pc, #276]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 800690c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800690e:	f7ff fa6e 	bl	8005dee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006912:	2000      	movs	r0, #0
 8006914:	f7fe fc0a 	bl	800512c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006918:	4844      	ldr	r0, [pc, #272]	; (8006a2c <RadioSetRxGenericConfig+0x2d0>)
 800691a:	f001 f82d 	bl	8007978 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800691e:	4844      	ldr	r0, [pc, #272]	; (8006a30 <RadioSetRxGenericConfig+0x2d4>)
 8006920:	f001 f8fc 	bl	8007b1c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006924:	f107 0320 	add.w	r3, r7, #32
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fbc0 	bl	80070ae <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	8b9b      	ldrh	r3, [r3, #28]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fc0a 	bl	800714c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	8b1b      	ldrh	r3, [r3, #24]
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fbe5 	bl	800710c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006948:	fb03 f202 	mul.w	r2, r3, r2
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	4a32      	ldr	r2, [pc, #200]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006956:	6093      	str	r3, [r2, #8]
        break;
 8006958:	e0b9      	b.n	8006ace <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800695e:	2b00      	cmp	r3, #0
 8006960:	d102      	bne.n	8006968 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8006962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006966:	e0b3      	b.n	8006ad0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800696e:	2b01      	cmp	r3, #1
 8006970:	d104      	bne.n	800697c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800697a:	e002      	b.n	8006982 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800697c:	23ff      	movs	r3, #255	; 0xff
 800697e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	2b00      	cmp	r3, #0
 8006988:	bf14      	ite	ne
 800698a:	2301      	movne	r3, #1
 800698c:	2300      	moveq	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fd53 	bl	800743c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fd5d 	bl	800745a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80069a0:	4b1f      	ldr	r3, [pc, #124]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80069ae:	4b1c      	ldr	r3, [pc, #112]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80069b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80069ba:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80069bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80069c6:	4b16      	ldr	r3, [pc, #88]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80069c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d010      	beq.n	80069f8 <RadioSetRxGenericConfig+0x29c>
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	dc2c      	bgt.n	8006a34 <RadioSetRxGenericConfig+0x2d8>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <RadioSetRxGenericConfig+0x288>
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d005      	beq.n	80069ee <RadioSetRxGenericConfig+0x292>
            break;
 80069e2:	e027      	b.n	8006a34 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80069ec:	e023      	b.n	8006a36 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80069ee:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80069f6:	e01e      	b.n	8006a36 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069fe:	2b0b      	cmp	r3, #11
 8006a00:	d004      	beq.n	8006a0c <RadioSetRxGenericConfig+0x2b0>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a08:	2b0c      	cmp	r3, #12
 8006a0a:	d104      	bne.n	8006a16 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a14:	e00f      	b.n	8006a36 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006a16:	4b02      	ldr	r3, [pc, #8]	; (8006a20 <RadioSetRxGenericConfig+0x2c4>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a1e:	e00a      	b.n	8006a36 <RadioSetRxGenericConfig+0x2da>
 8006a20:	20000384 	.word	0x20000384
 8006a24:	20000380 	.word	0x20000380
 8006a28:	200003f8 	.word	0x200003f8
 8006a2c:	200003bc 	.word	0x200003bc
 8006a30:	20000392 	.word	0x20000392
            break;
 8006a34:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006a36:	4b28      	ldr	r3, [pc, #160]	; (8006ad8 <RadioSetRxGenericConfig+0x37c>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8006a40:	4b25      	ldr	r3, [pc, #148]	; (8006ad8 <RadioSetRxGenericConfig+0x37c>)
 8006a42:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006a4a:	4b23      	ldr	r3, [pc, #140]	; (8006ad8 <RadioSetRxGenericConfig+0x37c>)
 8006a4c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006a4e:	4a22      	ldr	r2, [pc, #136]	; (8006ad8 <RadioSetRxGenericConfig+0x37c>)
 8006a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a54:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8006a5c:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <RadioSetRxGenericConfig+0x37c>)
 8006a5e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8006a68:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <RadioSetRxGenericConfig+0x37c>)
 8006a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006a6e:	f7ff f9be 	bl	8005dee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006a72:	2001      	movs	r0, #1
 8006a74:	f7fe fb5a 	bl	800512c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006a78:	4818      	ldr	r0, [pc, #96]	; (8006adc <RadioSetRxGenericConfig+0x380>)
 8006a7a:	f000 ff7d 	bl	8007978 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006a7e:	4818      	ldr	r0, [pc, #96]	; (8006ae0 <RadioSetRxGenericConfig+0x384>)
 8006a80:	f001 f84c 	bl	8007b1c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006a84:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <RadioSetRxGenericConfig+0x37c>)
 8006a86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d10d      	bne.n	8006aaa <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8006a8e:	f240 7036 	movw	r0, #1846	; 0x736
 8006a92:	f001 f99f 	bl	8007dd4 <SUBGRF_ReadRegister>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f023 0304 	bic.w	r3, r3, #4
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f240 7036 	movw	r0, #1846	; 0x736
 8006aa4:	f001 f982 	bl	8007dac <SUBGRF_WriteRegister>
 8006aa8:	e00c      	b.n	8006ac4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8006aaa:	f240 7036 	movw	r0, #1846	; 0x736
 8006aae:	f001 f991 	bl	8007dd4 <SUBGRF_ReadRegister>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	f043 0304 	orr.w	r3, r3, #4
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	4619      	mov	r1, r3
 8006abc:	f240 7036 	movw	r0, #1846	; 0x736
 8006ac0:	f001 f974 	bl	8007dac <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006ac4:	4b04      	ldr	r3, [pc, #16]	; (8006ad8 <RadioSetRxGenericConfig+0x37c>)
 8006ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aca:	609a      	str	r2, [r3, #8]
        break;
 8006acc:	bf00      	nop
    }
    return status;
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3730      	adds	r7, #48	; 0x30
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000384 	.word	0x20000384
 8006adc:	200003bc 	.word	0x200003bc
 8006ae0:	20000392 	.word	0x20000392

08006ae4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08e      	sub	sp, #56	; 0x38
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]
 8006af2:	4613      	mov	r3, r2
 8006af4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8006af6:	2300      	movs	r3, #0
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afa:	2300      	movs	r3, #0
 8006afc:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006afe:	f001 fc3c 	bl	800837a <RFW_DeInit>
    switch( modem )
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	f200 8204 	bhi.w	8006f12 <RadioSetTxGenericConfig+0x42e>
 8006b0a:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <RadioSetTxGenericConfig+0x2c>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006c95 	.word	0x08006c95
 8006b14:	08006ddd 	.word	0x08006ddd
 8006b18:	08006ed5 	.word	0x08006ed5
 8006b1c:	08006b21 	.word	0x08006b21
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	7c9b      	ldrb	r3, [r3, #18]
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d902      	bls.n	8006b2e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8006b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b2c:	e206      	b.n	8006f3c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6899      	ldr	r1, [r3, #8]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	7c9b      	ldrb	r3, [r3, #18]
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f001 fdb3 	bl	80086a8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8006b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b4e:	e1f5      	b.n	8006f3c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d813      	bhi.n	8006b84 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8006b62:	4b99      	ldr	r3, [pc, #612]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006b64:	2203      	movs	r2, #3
 8006b66:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8006b68:	4b97      	ldr	r3, [pc, #604]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a94      	ldr	r2, [pc, #592]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006b76:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	7cda      	ldrb	r2, [r3, #19]
 8006b7c:	4b92      	ldr	r3, [pc, #584]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b82:	e017      	b.n	8006bb4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006b8a:	4b8f      	ldr	r3, [pc, #572]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006b90:	4b8d      	ldr	r3, [pc, #564]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a8a      	ldr	r2, [pc, #552]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006b9e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	7cda      	ldrb	r2, [r3, #19]
 8006ba4:	4b88      	ldr	r3, [pc, #544]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	089b      	lsrs	r3, r3, #2
 8006bb0:	4a85      	ldr	r2, [pc, #532]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006bb2:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	4b82      	ldr	r3, [pc, #520]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006bc0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006bc2:	4b81      	ldr	r3, [pc, #516]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	7c9b      	ldrb	r3, [r3, #18]
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	4b7d      	ldr	r3, [pc, #500]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006bd2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8006bd4:	4b7c      	ldr	r3, [pc, #496]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	7d9b      	ldrb	r3, [r3, #22]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d003      	beq.n	8006bea <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	7d1b      	ldrb	r3, [r3, #20]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d12b      	bne.n	8006c42 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	7d5b      	ldrb	r3, [r3, #21]
 8006bee:	2bf1      	cmp	r3, #241	; 0xf1
 8006bf0:	d00a      	beq.n	8006c08 <RadioSetTxGenericConfig+0x124>
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	7d5b      	ldrb	r3, [r3, #21]
 8006bf6:	2bf2      	cmp	r3, #242	; 0xf2
 8006bf8:	d006      	beq.n	8006c08 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	7d5b      	ldrb	r3, [r3, #21]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d002      	beq.n	8006c08 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8006c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c06:	e199      	b.n	8006f3c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8006c12:	4b6e      	ldr	r3, [pc, #440]	; (8006dcc <RadioSetTxGenericConfig+0x2e8>)
 8006c14:	6819      	ldr	r1, [r3, #0]
 8006c16:	f107 0320 	add.w	r3, r7, #32
 8006c1a:	4a6d      	ldr	r2, [pc, #436]	; (8006dd0 <RadioSetTxGenericConfig+0x2ec>)
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 fb9f 	bl	8008360 <RFW_Init>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8006c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c2c:	e186      	b.n	8006f3c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006c2e:	4b66      	ldr	r3, [pc, #408]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006c34:	4b64      	ldr	r3, [pc, #400]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006c3a:	4b63      	ldr	r3, [pc, #396]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	755a      	strb	r2, [r3, #21]
        {
 8006c40:	e00b      	b.n	8006c5a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	7d5a      	ldrb	r2, [r3, #21]
 8006c46:	4b60      	ldr	r3, [pc, #384]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006c48:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	7d9a      	ldrb	r2, [r3, #22]
 8006c4e:	4b5e      	ldr	r3, [pc, #376]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006c50:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	7d1a      	ldrb	r2, [r3, #20]
 8006c56:	4b5c      	ldr	r3, [pc, #368]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006c58:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8006c5a:	f7ff f8c8 	bl	8005dee <RadioStandby>
        RadioSetModem( radio_modem );
 8006c5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe fa62 	bl	800512c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006c68:	485a      	ldr	r0, [pc, #360]	; (8006dd4 <RadioSetTxGenericConfig+0x2f0>)
 8006c6a:	f000 fe85 	bl	8007978 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006c6e:	485a      	ldr	r0, [pc, #360]	; (8006dd8 <RadioSetTxGenericConfig+0x2f4>)
 8006c70:	f000 ff54 	bl	8007b1c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fa18 	bl	80070ae <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	8a1b      	ldrh	r3, [r3, #16]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fa62 	bl	800714c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	899b      	ldrh	r3, [r3, #12]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fa3d 	bl	800710c <SUBGRF_SetCrcPolynomial>
        break;
 8006c92:	e13f      	b.n	8006f14 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d102      	bne.n	8006ca2 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8006c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ca0:	e14c      	b.n	8006f3c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	7c9b      	ldrb	r3, [r3, #18]
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d902      	bls.n	8006cb0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8006caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cae:	e145      	b.n	8006f3c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6899      	ldr	r1, [r3, #8]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	7c9b      	ldrb	r3, [r3, #18]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 fcf2 	bl	80086a8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006cc4:	4b40      	ldr	r3, [pc, #256]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a3d      	ldr	r2, [pc, #244]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006cd2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	7cda      	ldrb	r2, [r3, #19]
 8006cd8:	4b3b      	ldr	r3, [pc, #236]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	4a39      	ldr	r2, [pc, #228]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006ce4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006ce6:	4b38      	ldr	r3, [pc, #224]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	4b34      	ldr	r3, [pc, #208]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006cf8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006cfa:	4b33      	ldr	r3, [pc, #204]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006cfc:	2204      	movs	r2, #4
 8006cfe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	7c9b      	ldrb	r3, [r3, #18]
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	4b2f      	ldr	r3, [pc, #188]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006d0a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8006d0c:	4b2e      	ldr	r3, [pc, #184]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	7d9b      	ldrb	r3, [r3, #22]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d003      	beq.n	8006d22 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	7d1b      	ldrb	r3, [r3, #20]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d12a      	bne.n	8006d78 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	7d5b      	ldrb	r3, [r3, #21]
 8006d26:	2bf1      	cmp	r3, #241	; 0xf1
 8006d28:	d00a      	beq.n	8006d40 <RadioSetTxGenericConfig+0x25c>
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	7d5b      	ldrb	r3, [r3, #21]
 8006d2e:	2bf2      	cmp	r3, #242	; 0xf2
 8006d30:	d006      	beq.n	8006d40 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	7d5b      	ldrb	r3, [r3, #21]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d002      	beq.n	8006d40 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d3e:	e0fd      	b.n	8006f3c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8006d40:	2301      	movs	r3, #1
 8006d42:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8006d48:	4b20      	ldr	r3, [pc, #128]	; (8006dcc <RadioSetTxGenericConfig+0x2e8>)
 8006d4a:	6819      	ldr	r1, [r3, #0]
 8006d4c:	f107 0314 	add.w	r3, r7, #20
 8006d50:	4a1f      	ldr	r2, [pc, #124]	; (8006dd0 <RadioSetTxGenericConfig+0x2ec>)
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 fb04 	bl	8008360 <RFW_Init>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d62:	e0eb      	b.n	8006f3c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006d64:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006d6a:	4b17      	ldr	r3, [pc, #92]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006d70:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	755a      	strb	r2, [r3, #21]
        {
 8006d76:	e00b      	b.n	8006d90 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	7d5a      	ldrb	r2, [r3, #21]
 8006d7c:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006d7e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	7d9a      	ldrb	r2, [r3, #22]
 8006d84:	4b10      	ldr	r3, [pc, #64]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006d86:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	7d1a      	ldrb	r2, [r3, #20]
 8006d8c:	4b0e      	ldr	r3, [pc, #56]	; (8006dc8 <RadioSetTxGenericConfig+0x2e4>)
 8006d8e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8006d90:	f7ff f82d 	bl	8005dee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006d94:	2000      	movs	r0, #0
 8006d96:	f7fe f9c9 	bl	800512c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006d9a:	480e      	ldr	r0, [pc, #56]	; (8006dd4 <RadioSetTxGenericConfig+0x2f0>)
 8006d9c:	f000 fdec 	bl	8007978 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006da0:	480d      	ldr	r0, [pc, #52]	; (8006dd8 <RadioSetTxGenericConfig+0x2f4>)
 8006da2:	f000 febb 	bl	8007b1c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 f97f 	bl	80070ae <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	8a1b      	ldrh	r3, [r3, #16]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 f9c9 	bl	800714c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	899b      	ldrh	r3, [r3, #12]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 f9a4 	bl	800710c <SUBGRF_SetCrcPolynomial>
        break;
 8006dc4:	e0a6      	b.n	8006f14 <RadioSetTxGenericConfig+0x430>
 8006dc6:	bf00      	nop
 8006dc8:	20000384 	.word	0x20000384
 8006dcc:	20000380 	.word	0x20000380
 8006dd0:	200003e0 	.word	0x200003e0
 8006dd4:	200003bc 	.word	0x200003bc
 8006dd8:	20000392 	.word	0x20000392
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006ddc:	4b59      	ldr	r3, [pc, #356]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	781a      	ldrb	r2, [r3, #0]
 8006de8:	4b56      	ldr	r3, [pc, #344]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	785a      	ldrb	r2, [r3, #1]
 8006df2:	4b54      	ldr	r3, [pc, #336]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	789a      	ldrb	r2, [r3, #2]
 8006dfc:	4b51      	ldr	r3, [pc, #324]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006dfe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	78db      	ldrb	r3, [r3, #3]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d010      	beq.n	8006e2c <RadioSetTxGenericConfig+0x348>
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	dc20      	bgt.n	8006e50 <RadioSetTxGenericConfig+0x36c>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <RadioSetTxGenericConfig+0x334>
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d005      	beq.n	8006e22 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8006e16:	e01b      	b.n	8006e50 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006e18:	4b4a      	ldr	r3, [pc, #296]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006e20:	e017      	b.n	8006e52 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006e22:	4b48      	ldr	r3, [pc, #288]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006e2a:	e012      	b.n	8006e52 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b0b      	cmp	r3, #11
 8006e32:	d003      	beq.n	8006e3c <RadioSetTxGenericConfig+0x358>
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b0c      	cmp	r3, #12
 8006e3a:	d104      	bne.n	8006e46 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006e3c:	4b41      	ldr	r3, [pc, #260]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006e44:	e005      	b.n	8006e52 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006e46:	4b3f      	ldr	r3, [pc, #252]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006e4e:	e000      	b.n	8006e52 <RadioSetTxGenericConfig+0x36e>
            break;
 8006e50:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006e52:	4b3c      	ldr	r3, [pc, #240]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006e54:	2201      	movs	r2, #1
 8006e56:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	889a      	ldrh	r2, [r3, #4]
 8006e5c:	4b39      	ldr	r3, [pc, #228]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006e5e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	799a      	ldrb	r2, [r3, #6]
 8006e64:	4b37      	ldr	r3, [pc, #220]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006e66:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	79da      	ldrb	r2, [r3, #7]
 8006e6c:	4b35      	ldr	r3, [pc, #212]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006e6e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	7a1a      	ldrb	r2, [r3, #8]
 8006e76:	4b33      	ldr	r3, [pc, #204]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006e78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8006e7c:	f7fe ffb7 	bl	8005dee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006e80:	2001      	movs	r0, #1
 8006e82:	f7fe f953 	bl	800512c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006e86:	4830      	ldr	r0, [pc, #192]	; (8006f48 <RadioSetTxGenericConfig+0x464>)
 8006e88:	f000 fd76 	bl	8007978 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e8c:	482f      	ldr	r0, [pc, #188]	; (8006f4c <RadioSetTxGenericConfig+0x468>)
 8006e8e:	f000 fe45 	bl	8007b1c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8006e92:	4b2c      	ldr	r3, [pc, #176]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e98:	2b06      	cmp	r3, #6
 8006e9a:	d10d      	bne.n	8006eb8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8006e9c:	f640 0089 	movw	r0, #2185	; 0x889
 8006ea0:	f000 ff98 	bl	8007dd4 <SUBGRF_ReadRegister>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f023 0304 	bic.w	r3, r3, #4
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	4619      	mov	r1, r3
 8006eae:	f640 0089 	movw	r0, #2185	; 0x889
 8006eb2:	f000 ff7b 	bl	8007dac <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8006eb6:	e02d      	b.n	8006f14 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8006eb8:	f640 0089 	movw	r0, #2185	; 0x889
 8006ebc:	f000 ff8a 	bl	8007dd4 <SUBGRF_ReadRegister>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f043 0304 	orr.w	r3, r3, #4
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f640 0089 	movw	r0, #2185	; 0x889
 8006ece:	f000 ff6d 	bl	8007dac <SUBGRF_WriteRegister>
        break;
 8006ed2:	e01f      	b.n	8006f14 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d004      	beq.n	8006ee6 <RadioSetTxGenericConfig+0x402>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ee4:	d902      	bls.n	8006eec <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8006ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eea:	e027      	b.n	8006f3c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8006eec:	2003      	movs	r0, #3
 8006eee:	f7fe f91d 	bl	800512c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006ef2:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a11      	ldr	r2, [pc, #68]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006f00:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006f02:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006f04:	2216      	movs	r2, #22
 8006f06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006f0a:	480f      	ldr	r0, [pc, #60]	; (8006f48 <RadioSetTxGenericConfig+0x464>)
 8006f0c:	f000 fd34 	bl	8007978 <SUBGRF_SetModulationParams>
        break;
 8006f10:	e000      	b.n	8006f14 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8006f12:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 f863 	bl	8007fe4 <SUBGRF_SetRfTxPower>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	461a      	mov	r2, r3
 8006f22:	4b08      	ldr	r3, [pc, #32]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006f24:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006f28:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006f2a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f001 fa37 	bl	80083a2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006f34:	4a03      	ldr	r2, [pc, #12]	; (8006f44 <RadioSetTxGenericConfig+0x460>)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6053      	str	r3, [r2, #4]
    return 0;
 8006f3a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3738      	adds	r7, #56	; 0x38
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20000384 	.word	0x20000384
 8006f48:	200003bc 	.word	0x200003bc
 8006f4c:	20000392 	.word	0x20000392

08006f50 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr

08006f68 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8006f72:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bc80      	pop	{r7}
 8006f7c:	4770      	bx	lr
	...

08006f80 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8006f8e:	4a1d      	ldr	r2, [pc, #116]	; (8007004 <SUBGRF_Init+0x84>)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8006f94:	f7f9 fdf2 	bl	8000b7c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006f98:	2002      	movs	r0, #2
 8006f9a:	f001 f8ff 	bl	800819c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8006f9e:	4b1a      	ldr	r3, [pc, #104]	; (8007008 <SUBGRF_Init+0x88>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	f000 f97d 	bl	80072a4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8006faa:	f001 fb52 	bl	8008652 <RBI_IsTCXO>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d10e      	bne.n	8006fd2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8006fb4:	2140      	movs	r1, #64	; 0x40
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	f000 fb82 	bl	80076c0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	f640 1011 	movw	r0, #2321	; 0x911
 8006fc2:	f000 fef3 	bl	8007dac <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8006fc6:	237f      	movs	r3, #127	; 0x7f
 8006fc8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8006fca:	7b38      	ldrb	r0, [r7, #12]
 8006fcc:	f000 fa8b 	bl	80074e6 <SUBGRF_Calibrate>
 8006fd0:	e009      	b.n	8006fe6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006fd2:	2120      	movs	r1, #32
 8006fd4:	f640 1011 	movw	r0, #2321	; 0x911
 8006fd8:	f000 fee8 	bl	8007dac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006fdc:	2120      	movs	r1, #32
 8006fde:	f640 1012 	movw	r0, #2322	; 0x912
 8006fe2:	f000 fee3 	bl	8007dac <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006fe6:	210e      	movs	r1, #14
 8006fe8:	f640 101f 	movw	r0, #2335	; 0x91f
 8006fec:	f000 fede 	bl	8007dac <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8006ff0:	f001 fa86 	bl	8008500 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <SUBGRF_Init+0x8c>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	701a      	strb	r2, [r3, #0]
}
 8006ffa:	bf00      	nop
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	2000041c 	.word	0x2000041c
 8007008:	20000418 	.word	0x20000418
 800700c:	20000410 	.word	0x20000410

08007010 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
    return OperatingMode;
 8007014:	4b02      	ldr	r3, [pc, #8]	; (8007020 <SUBGRF_GetOperatingMode+0x10>)
 8007016:	781b      	ldrb	r3, [r3, #0]
}
 8007018:	4618      	mov	r0, r3
 800701a:	46bd      	mov	sp, r7
 800701c:	bc80      	pop	{r7}
 800701e:	4770      	bx	lr
 8007020:	20000410 	.word	0x20000410

08007024 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	461a      	mov	r2, r3
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	2000      	movs	r0, #0
 8007038:	f000 ff24 	bl	8007e84 <SUBGRF_WriteBuffer>
}
 800703c:	bf00      	nop
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8007056:	f107 0317 	add.w	r3, r7, #23
 800705a:	4619      	mov	r1, r3
 800705c:	68b8      	ldr	r0, [r7, #8]
 800705e:	f000 fe27 	bl	8007cb0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	79fa      	ldrb	r2, [r7, #7]
 8007068:	429a      	cmp	r2, r3
 800706a:	d201      	bcs.n	8007070 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800706c:	2301      	movs	r3, #1
 800706e:	e007      	b.n	8007080 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8007070:	7df8      	ldrb	r0, [r7, #23]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	68f9      	ldr	r1, [r7, #12]
 800707a:	f000 ff25 	bl	8007ec8 <SUBGRF_ReadBuffer>

    return 0;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	460b      	mov	r3, r1
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8007096:	7afb      	ldrb	r3, [r7, #11]
 8007098:	4619      	mov	r1, r3
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff ffc2 	bl	8007024 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f91b 	bl	80072dc <SUBGRF_SetTx>
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80070b6:	2208      	movs	r2, #8
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80070be:	f000 fe9d 	bl	8007dfc <SUBGRF_WriteRegisters>
    return 0;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80070d6:	88fb      	ldrh	r3, [r7, #6]
 80070d8:	0a1b      	lsrs	r3, r3, #8
 80070da:	b29b      	uxth	r3, r3
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80070e0:	88fb      	ldrh	r3, [r7, #6]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80070e6:	f000 fb6f 	bl	80077c8 <SUBGRF_GetPacketType>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d108      	bne.n	8007102 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80070f0:	f107 030c 	add.w	r3, r7, #12
 80070f4:	2202      	movs	r2, #2
 80070f6:	4619      	mov	r1, r3
 80070f8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80070fc:	f000 fe7e 	bl	8007dfc <SUBGRF_WriteRegisters>
            break;
 8007100:	e000      	b.n	8007104 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8007102:	bf00      	nop
    }
}
 8007104:	bf00      	nop
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	0a1b      	lsrs	r3, r3, #8
 800711a:	b29b      	uxth	r3, r3
 800711c:	b2db      	uxtb	r3, r3
 800711e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007126:	f000 fb4f 	bl	80077c8 <SUBGRF_GetPacketType>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d108      	bne.n	8007142 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	2202      	movs	r2, #2
 8007136:	4619      	mov	r1, r3
 8007138:	f240 60be 	movw	r0, #1726	; 0x6be
 800713c:	f000 fe5e 	bl	8007dfc <SUBGRF_WriteRegisters>
            break;
 8007140:	e000      	b.n	8007144 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8007142:	bf00      	nop
    }
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800715a:	f000 fb35 	bl	80077c8 <SUBGRF_GetPacketType>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d121      	bne.n	80071a8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8007164:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007168:	f000 fe34 	bl	8007dd4 <SUBGRF_ReadRegister>
 800716c:	4603      	mov	r3, r0
 800716e:	f023 0301 	bic.w	r3, r3, #1
 8007172:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8007174:	88fb      	ldrh	r3, [r7, #6]
 8007176:	0a1b      	lsrs	r3, r3, #8
 8007178:	b29b      	uxth	r3, r3
 800717a:	b25b      	sxtb	r3, r3
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	b25a      	sxtb	r2, r3
 8007182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007186:	4313      	orrs	r3, r2
 8007188:	b25b      	sxtb	r3, r3
 800718a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	4619      	mov	r1, r3
 8007190:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007194:	f000 fe0a 	bl	8007dac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8007198:	88fb      	ldrh	r3, [r7, #6]
 800719a:	b2db      	uxtb	r3, r3
 800719c:	4619      	mov	r1, r3
 800719e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80071a2:	f000 fe03 	bl	8007dac <SUBGRF_WriteRegister>
            break;
 80071a6:	e000      	b.n	80071aa <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80071a8:	bf00      	nop
    }
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80071c0:	2300      	movs	r3, #0
 80071c2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80071c4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80071c8:	f000 fe04 	bl	8007dd4 <SUBGRF_ReadRegister>
 80071cc:	4603      	mov	r3, r0
 80071ce:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	f023 0301 	bic.w	r3, r3, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	4619      	mov	r1, r3
 80071da:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80071de:	f000 fde5 	bl	8007dac <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80071e2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80071e6:	f000 fdf5 	bl	8007dd4 <SUBGRF_ReadRegister>
 80071ea:	4603      	mov	r3, r0
 80071ec:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80071ee:	79bb      	ldrb	r3, [r7, #6]
 80071f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	4619      	mov	r1, r3
 80071f8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80071fc:	f000 fdd6 	bl	8007dac <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007200:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007204:	f000 f88a 	bl	800731c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8007208:	463b      	mov	r3, r7
 800720a:	2204      	movs	r2, #4
 800720c:	4619      	mov	r1, r3
 800720e:	f640 0019 	movw	r0, #2073	; 0x819
 8007212:	f000 fe15 	bl	8007e40 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8007216:	2000      	movs	r0, #0
 8007218:	f000 f844 	bl	80072a4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	4619      	mov	r1, r3
 8007220:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007224:	f000 fdc2 	bl	8007dac <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8007228:	79bb      	ldrb	r3, [r7, #6]
 800722a:	4619      	mov	r1, r3
 800722c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007230:	f000 fdbc 	bl	8007dac <SUBGRF_WriteRegister>

    return number;
 8007234:	683b      	ldr	r3, [r7, #0]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8007248:	2000      	movs	r0, #0
 800724a:	f001 f999 	bl	8008580 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800724e:	2002      	movs	r0, #2
 8007250:	f000 ffa4 	bl	800819c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007254:	793b      	ldrb	r3, [r7, #4]
 8007256:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800725a:	b2db      	uxtb	r3, r3
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007260:	793b      	ldrb	r3, [r7, #4]
 8007262:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007266:	b2db      	uxtb	r3, r3
 8007268:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800726a:	b25b      	sxtb	r3, r3
 800726c:	4313      	orrs	r3, r2
 800726e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8007270:	793b      	ldrb	r3, [r7, #4]
 8007272:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800727a:	4313      	orrs	r3, r2
 800727c:	b25b      	sxtb	r3, r3
 800727e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007280:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8007282:	f107 030f 	add.w	r3, r7, #15
 8007286:	2201      	movs	r2, #1
 8007288:	4619      	mov	r1, r3
 800728a:	2084      	movs	r0, #132	; 0x84
 800728c:	f000 fe3e 	bl	8007f0c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8007290:	4b03      	ldr	r3, [pc, #12]	; (80072a0 <SUBGRF_SetSleep+0x60>)
 8007292:	2200      	movs	r2, #0
 8007294:	701a      	strb	r2, [r3, #0]
}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000410 	.word	0x20000410

080072a4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80072ae:	1dfb      	adds	r3, r7, #7
 80072b0:	2201      	movs	r2, #1
 80072b2:	4619      	mov	r1, r3
 80072b4:	2080      	movs	r0, #128	; 0x80
 80072b6:	f000 fe29 	bl	8007f0c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d103      	bne.n	80072c8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80072c0:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <SUBGRF_SetStandby+0x34>)
 80072c2:	2201      	movs	r2, #1
 80072c4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80072c6:	e002      	b.n	80072ce <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80072c8:	4b03      	ldr	r3, [pc, #12]	; (80072d8 <SUBGRF_SetStandby+0x34>)
 80072ca:	2202      	movs	r2, #2
 80072cc:	701a      	strb	r2, [r3, #0]
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000410 	.word	0x20000410

080072dc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <SUBGRF_SetTx+0x3c>)
 80072e6:	2204      	movs	r2, #4
 80072e8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	0a1b      	lsrs	r3, r3, #8
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8007300:	f107 030c 	add.w	r3, r7, #12
 8007304:	2203      	movs	r2, #3
 8007306:	4619      	mov	r1, r3
 8007308:	2083      	movs	r0, #131	; 0x83
 800730a:	f000 fdff 	bl	8007f0c <SUBGRF_WriteCommand>
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000410 	.word	0x20000410

0800731c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <SUBGRF_SetRx+0x3c>)
 8007326:	2205      	movs	r2, #5
 8007328:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	0c1b      	lsrs	r3, r3, #16
 800732e:	b2db      	uxtb	r3, r3
 8007330:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	0a1b      	lsrs	r3, r3, #8
 8007336:	b2db      	uxtb	r3, r3
 8007338:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8007340:	f107 030c 	add.w	r3, r7, #12
 8007344:	2203      	movs	r2, #3
 8007346:	4619      	mov	r1, r3
 8007348:	2082      	movs	r0, #130	; 0x82
 800734a:	f000 fddf 	bl	8007f0c <SUBGRF_WriteCommand>
}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000410 	.word	0x20000410

0800735c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007364:	4b0e      	ldr	r3, [pc, #56]	; (80073a0 <SUBGRF_SetRxBoosted+0x44>)
 8007366:	2205      	movs	r2, #5
 8007368:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800736a:	2197      	movs	r1, #151	; 0x97
 800736c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8007370:	f000 fd1c 	bl	8007dac <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	0c1b      	lsrs	r3, r3, #16
 8007378:	b2db      	uxtb	r3, r3
 800737a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	0a1b      	lsrs	r3, r3, #8
 8007380:	b2db      	uxtb	r3, r3
 8007382:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800738a:	f107 030c 	add.w	r3, r7, #12
 800738e:	2203      	movs	r2, #3
 8007390:	4619      	mov	r1, r3
 8007392:	2082      	movs	r0, #130	; 0x82
 8007394:	f000 fdba 	bl	8007f0c <SUBGRF_WriteCommand>
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20000410 	.word	0x20000410

080073a4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	0c1b      	lsrs	r3, r3, #16
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	0a1b      	lsrs	r3, r3, #8
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	0c1b      	lsrs	r3, r3, #16
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	0a1b      	lsrs	r3, r3, #8
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80073da:	f107 0308 	add.w	r3, r7, #8
 80073de:	2206      	movs	r2, #6
 80073e0:	4619      	mov	r1, r3
 80073e2:	2094      	movs	r0, #148	; 0x94
 80073e4:	f000 fd92 	bl	8007f0c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80073e8:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <SUBGRF_SetRxDutyCycle+0x54>)
 80073ea:	2206      	movs	r2, #6
 80073ec:	701a      	strb	r2, [r3, #0]
}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000410 	.word	0x20000410

080073fc <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8007400:	2200      	movs	r2, #0
 8007402:	2100      	movs	r1, #0
 8007404:	20c5      	movs	r0, #197	; 0xc5
 8007406:	f000 fd81 	bl	8007f0c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800740a:	4b02      	ldr	r3, [pc, #8]	; (8007414 <SUBGRF_SetCad+0x18>)
 800740c:	2207      	movs	r2, #7
 800740e:	701a      	strb	r2, [r3, #0]
}
 8007410:	bf00      	nop
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20000410 	.word	0x20000410

08007418 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800741c:	2200      	movs	r2, #0
 800741e:	2100      	movs	r1, #0
 8007420:	20d1      	movs	r0, #209	; 0xd1
 8007422:	f000 fd73 	bl	8007f0c <SUBGRF_WriteCommand>
}
 8007426:	bf00      	nop
 8007428:	bd80      	pop	{r7, pc}

0800742a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800742a:	b580      	push	{r7, lr}
 800742c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800742e:	2200      	movs	r2, #0
 8007430:	2100      	movs	r1, #0
 8007432:	20d2      	movs	r0, #210	; 0xd2
 8007434:	f000 fd6a 	bl	8007f0c <SUBGRF_WriteCommand>
}
 8007438:	bf00      	nop
 800743a:	bd80      	pop	{r7, pc}

0800743c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8007446:	1dfb      	adds	r3, r7, #7
 8007448:	2201      	movs	r2, #1
 800744a:	4619      	mov	r1, r3
 800744c:	209f      	movs	r0, #159	; 0x9f
 800744e:	f000 fd5d 	bl	8007f0c <SUBGRF_WriteCommand>
}
 8007452:	bf00      	nop
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	4603      	mov	r3, r0
 8007462:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8007464:	1dfb      	adds	r3, r7, #7
 8007466:	2201      	movs	r2, #1
 8007468:	4619      	mov	r1, r3
 800746a:	20a0      	movs	r0, #160	; 0xa0
 800746c:	f000 fd4e 	bl	8007f0c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	2b3f      	cmp	r3, #63	; 0x3f
 8007474:	d91c      	bls.n	80074b0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	085b      	lsrs	r3, r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8007484:	e005      	b.n	8007492 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	089b      	lsrs	r3, r3, #2
 800748a:	73fb      	strb	r3, [r7, #15]
            exp++;
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	3301      	adds	r3, #1
 8007490:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2b1f      	cmp	r3, #31
 8007496:	d8f6      	bhi.n	8007486 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	b2da      	uxtb	r2, r3
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	4413      	add	r3, r2
 80074a2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80074a4:	7b7b      	ldrb	r3, [r7, #13]
 80074a6:	4619      	mov	r1, r3
 80074a8:	f240 7006 	movw	r0, #1798	; 0x706
 80074ac:	f000 fc7e 	bl	8007dac <SUBGRF_WriteRegister>
    }
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80074be:	f001 f8d3 	bl	8008668 <RBI_IsDCDC>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d102      	bne.n	80074ce <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80074c8:	2301      	movs	r3, #1
 80074ca:	71fb      	strb	r3, [r7, #7]
 80074cc:	e001      	b.n	80074d2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80074ce:	2300      	movs	r3, #0
 80074d0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80074d2:	1dfb      	adds	r3, r7, #7
 80074d4:	2201      	movs	r2, #1
 80074d6:	4619      	mov	r1, r3
 80074d8:	2096      	movs	r0, #150	; 0x96
 80074da:	f000 fd17 	bl	8007f0c <SUBGRF_WriteCommand>
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80074ee:	793b      	ldrb	r3, [r7, #4]
 80074f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	019b      	lsls	r3, r3, #6
 80074f8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80074fa:	793b      	ldrb	r3, [r7, #4]
 80074fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007500:	b2db      	uxtb	r3, r3
 8007502:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007504:	b25b      	sxtb	r3, r3
 8007506:	4313      	orrs	r3, r2
 8007508:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800750a:	793b      	ldrb	r3, [r7, #4]
 800750c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007510:	b2db      	uxtb	r3, r3
 8007512:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007514:	b25b      	sxtb	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800751a:	793b      	ldrb	r3, [r7, #4]
 800751c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007520:	b2db      	uxtb	r3, r3
 8007522:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007524:	b25b      	sxtb	r3, r3
 8007526:	4313      	orrs	r3, r2
 8007528:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800752a:	793b      	ldrb	r3, [r7, #4]
 800752c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007530:	b2db      	uxtb	r3, r3
 8007532:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007534:	b25b      	sxtb	r3, r3
 8007536:	4313      	orrs	r3, r2
 8007538:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800753a:	793b      	ldrb	r3, [r7, #4]
 800753c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007540:	b2db      	uxtb	r3, r3
 8007542:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007544:	b25b      	sxtb	r3, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800754a:	793b      	ldrb	r3, [r7, #4]
 800754c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007550:	b2db      	uxtb	r3, r3
 8007552:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007554:	4313      	orrs	r3, r2
 8007556:	b25b      	sxtb	r3, r3
 8007558:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800755a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800755c:	f107 030f 	add.w	r3, r7, #15
 8007560:	2201      	movs	r2, #1
 8007562:	4619      	mov	r1, r3
 8007564:	2089      	movs	r0, #137	; 0x89
 8007566:	f000 fcd1 	bl	8007f0c <SUBGRF_WriteCommand>
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a1d      	ldr	r2, [pc, #116]	; (80075f4 <SUBGRF_CalibrateImage+0x80>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d904      	bls.n	800758e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8007584:	23e1      	movs	r3, #225	; 0xe1
 8007586:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8007588:	23e9      	movs	r3, #233	; 0xe9
 800758a:	737b      	strb	r3, [r7, #13]
 800758c:	e027      	b.n	80075de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a19      	ldr	r2, [pc, #100]	; (80075f8 <SUBGRF_CalibrateImage+0x84>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d904      	bls.n	80075a0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8007596:	23d7      	movs	r3, #215	; 0xd7
 8007598:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800759a:	23db      	movs	r3, #219	; 0xdb
 800759c:	737b      	strb	r3, [r7, #13]
 800759e:	e01e      	b.n	80075de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a16      	ldr	r2, [pc, #88]	; (80075fc <SUBGRF_CalibrateImage+0x88>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d904      	bls.n	80075b2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80075a8:	23c1      	movs	r3, #193	; 0xc1
 80075aa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80075ac:	23c5      	movs	r3, #197	; 0xc5
 80075ae:	737b      	strb	r3, [r7, #13]
 80075b0:	e015      	b.n	80075de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a12      	ldr	r2, [pc, #72]	; (8007600 <SUBGRF_CalibrateImage+0x8c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d904      	bls.n	80075c4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80075ba:	2375      	movs	r3, #117	; 0x75
 80075bc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80075be:	2381      	movs	r3, #129	; 0x81
 80075c0:	737b      	strb	r3, [r7, #13]
 80075c2:	e00c      	b.n	80075de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a0f      	ldr	r2, [pc, #60]	; (8007604 <SUBGRF_CalibrateImage+0x90>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d904      	bls.n	80075d6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80075cc:	236b      	movs	r3, #107	; 0x6b
 80075ce:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80075d0:	236f      	movs	r3, #111	; 0x6f
 80075d2:	737b      	strb	r3, [r7, #13]
 80075d4:	e003      	b.n	80075de <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80075d6:	2329      	movs	r3, #41	; 0x29
 80075d8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80075da:	232b      	movs	r3, #43	; 0x2b
 80075dc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80075de:	f107 030c 	add.w	r3, r7, #12
 80075e2:	2202      	movs	r2, #2
 80075e4:	4619      	mov	r1, r3
 80075e6:	2098      	movs	r0, #152	; 0x98
 80075e8:	f000 fc90 	bl	8007f0c <SUBGRF_WriteCommand>
}
 80075ec:	bf00      	nop
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	35a4e900 	.word	0x35a4e900
 80075f8:	32a9f880 	.word	0x32a9f880
 80075fc:	2de54480 	.word	0x2de54480
 8007600:	1b6b0b00 	.word	0x1b6b0b00
 8007604:	1954fc40 	.word	0x1954fc40

08007608 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8007608:	b590      	push	{r4, r7, lr}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	4604      	mov	r4, r0
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	461a      	mov	r2, r3
 8007616:	4623      	mov	r3, r4
 8007618:	71fb      	strb	r3, [r7, #7]
 800761a:	4603      	mov	r3, r0
 800761c:	71bb      	strb	r3, [r7, #6]
 800761e:	460b      	mov	r3, r1
 8007620:	717b      	strb	r3, [r7, #5]
 8007622:	4613      	mov	r3, r2
 8007624:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800762a:	79bb      	ldrb	r3, [r7, #6]
 800762c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800762e:	797b      	ldrb	r3, [r7, #5]
 8007630:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8007632:	793b      	ldrb	r3, [r7, #4]
 8007634:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8007636:	f107 030c 	add.w	r3, r7, #12
 800763a:	2204      	movs	r2, #4
 800763c:	4619      	mov	r1, r3
 800763e:	2095      	movs	r0, #149	; 0x95
 8007640:	f000 fc64 	bl	8007f0c <SUBGRF_WriteCommand>
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	bd90      	pop	{r4, r7, pc}

0800764c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800764c:	b590      	push	{r4, r7, lr}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	4604      	mov	r4, r0
 8007654:	4608      	mov	r0, r1
 8007656:	4611      	mov	r1, r2
 8007658:	461a      	mov	r2, r3
 800765a:	4623      	mov	r3, r4
 800765c:	80fb      	strh	r3, [r7, #6]
 800765e:	4603      	mov	r3, r0
 8007660:	80bb      	strh	r3, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	807b      	strh	r3, [r7, #2]
 8007666:	4613      	mov	r3, r2
 8007668:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800766a:	88fb      	ldrh	r3, [r7, #6]
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	b29b      	uxth	r3, r3
 8007670:	b2db      	uxtb	r3, r3
 8007672:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8007674:	88fb      	ldrh	r3, [r7, #6]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800767a:	88bb      	ldrh	r3, [r7, #4]
 800767c:	0a1b      	lsrs	r3, r3, #8
 800767e:	b29b      	uxth	r3, r3
 8007680:	b2db      	uxtb	r3, r3
 8007682:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8007684:	88bb      	ldrh	r3, [r7, #4]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800768a:	887b      	ldrh	r3, [r7, #2]
 800768c:	0a1b      	lsrs	r3, r3, #8
 800768e:	b29b      	uxth	r3, r3
 8007690:	b2db      	uxtb	r3, r3
 8007692:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8007694:	887b      	ldrh	r3, [r7, #2]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800769a:	883b      	ldrh	r3, [r7, #0]
 800769c:	0a1b      	lsrs	r3, r3, #8
 800769e:	b29b      	uxth	r3, r3
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80076a4:	883b      	ldrh	r3, [r7, #0]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80076aa:	f107 0308 	add.w	r3, r7, #8
 80076ae:	2208      	movs	r2, #8
 80076b0:	4619      	mov	r1, r3
 80076b2:	2008      	movs	r0, #8
 80076b4:	f000 fc2a 	bl	8007f0c <SUBGRF_WriteCommand>
}
 80076b8:	bf00      	nop
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd90      	pop	{r4, r7, pc}

080076c0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	6039      	str	r1, [r7, #0]
 80076ca:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	0c1b      	lsrs	r3, r3, #16
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	0a1b      	lsrs	r3, r3, #8
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80076ec:	f107 030c 	add.w	r3, r7, #12
 80076f0:	2204      	movs	r2, #4
 80076f2:	4619      	mov	r1, r3
 80076f4:	2097      	movs	r0, #151	; 0x97
 80076f6:	f000 fc09 	bl	8007f0c <SUBGRF_WriteCommand>
}
 80076fa:	bf00      	nop
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8007704:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8007712:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <SUBGRF_SetRfFrequency+0x84>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f083 0301 	eor.w	r3, r3, #1
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff ff27 	bl	8007574 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8007726:	4b18      	ldr	r3, [pc, #96]	; (8007788 <SUBGRF_SetRfFrequency+0x84>)
 8007728:	2201      	movs	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	461c      	mov	r4, r3
 8007732:	4615      	mov	r5, r2
 8007734:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8007738:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800773c:	4a13      	ldr	r2, [pc, #76]	; (800778c <SUBGRF_SetRfFrequency+0x88>)
 800773e:	f04f 0300 	mov.w	r3, #0
 8007742:	4640      	mov	r0, r8
 8007744:	4649      	mov	r1, r9
 8007746:	f7f8 fd6b 	bl	8000220 <__aeabi_uldivmod>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4613      	mov	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	0e1b      	lsrs	r3, r3, #24
 8007756:	b2db      	uxtb	r3, r3
 8007758:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	b2db      	uxtb	r3, r3
 8007760:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	b2db      	uxtb	r3, r3
 8007768:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8007770:	f107 0308 	add.w	r3, r7, #8
 8007774:	2204      	movs	r2, #4
 8007776:	4619      	mov	r1, r3
 8007778:	2086      	movs	r0, #134	; 0x86
 800777a:	f000 fbc7 	bl	8007f0c <SUBGRF_WriteCommand>
}
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007788:	20000418 	.word	0x20000418
 800778c:	01e84800 	.word	0x01e84800

08007790 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800779a:	79fa      	ldrb	r2, [r7, #7]
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <SUBGRF_SetPacketType+0x34>)
 800779e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d104      	bne.n	80077b0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80077a6:	2100      	movs	r1, #0
 80077a8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80077ac:	f000 fafe 	bl	8007dac <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80077b0:	1dfb      	adds	r3, r7, #7
 80077b2:	2201      	movs	r2, #1
 80077b4:	4619      	mov	r1, r3
 80077b6:	208a      	movs	r0, #138	; 0x8a
 80077b8:	f000 fba8 	bl	8007f0c <SUBGRF_WriteCommand>
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000411 	.word	0x20000411

080077c8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
    return PacketType;
 80077cc:	4b02      	ldr	r3, [pc, #8]	; (80077d8 <SUBGRF_GetPacketType+0x10>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr
 80077d8:	20000411 	.word	0x20000411

080077dc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	71fb      	strb	r3, [r7, #7]
 80077e6:	460b      	mov	r3, r1
 80077e8:	71bb      	strb	r3, [r7, #6]
 80077ea:	4613      	mov	r3, r2
 80077ec:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d149      	bne.n	8007888 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80077f4:	2000      	movs	r0, #0
 80077f6:	f000 ff42 	bl	800867e <RBI_GetRFOMaxPowerConfig>
 80077fa:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80077fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	429a      	cmp	r2, r3
 8007804:	da01      	bge.n	800780a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b0e      	cmp	r3, #14
 800780e:	d10e      	bne.n	800782e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8007810:	2301      	movs	r3, #1
 8007812:	2201      	movs	r2, #1
 8007814:	2100      	movs	r1, #0
 8007816:	2004      	movs	r0, #4
 8007818:	f7ff fef6 	bl	8007608 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800781c:	79ba      	ldrb	r2, [r7, #6]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	b2db      	uxtb	r3, r3
 8007826:	330e      	adds	r3, #14
 8007828:	b2db      	uxtb	r3, r3
 800782a:	71bb      	strb	r3, [r7, #6]
 800782c:	e01f      	b.n	800786e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b0a      	cmp	r3, #10
 8007832:	d10e      	bne.n	8007852 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8007834:	2301      	movs	r3, #1
 8007836:	2201      	movs	r2, #1
 8007838:	2100      	movs	r1, #0
 800783a:	2001      	movs	r0, #1
 800783c:	f7ff fee4 	bl	8007608 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8007840:	79ba      	ldrb	r2, [r7, #6]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	b2db      	uxtb	r3, r3
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	b2db      	uxtb	r3, r3
 800784a:	330d      	adds	r3, #13
 800784c:	b2db      	uxtb	r3, r3
 800784e:	71bb      	strb	r3, [r7, #6]
 8007850:	e00d      	b.n	800786e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8007852:	2301      	movs	r3, #1
 8007854:	2201      	movs	r2, #1
 8007856:	2100      	movs	r1, #0
 8007858:	2007      	movs	r0, #7
 800785a:	f7ff fed5 	bl	8007608 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800785e:	79ba      	ldrb	r2, [r7, #6]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	b2db      	uxtb	r3, r3
 8007868:	330e      	adds	r3, #14
 800786a:	b2db      	uxtb	r3, r3
 800786c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800786e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007872:	f113 0f11 	cmn.w	r3, #17
 8007876:	da01      	bge.n	800787c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8007878:	23ef      	movs	r3, #239	; 0xef
 800787a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800787c:	2118      	movs	r1, #24
 800787e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007882:	f000 fa93 	bl	8007dac <SUBGRF_WriteRegister>
 8007886:	e067      	b.n	8007958 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8007888:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800788c:	f000 faa2 	bl	8007dd4 <SUBGRF_ReadRegister>
 8007890:	4603      	mov	r3, r0
 8007892:	f043 031e 	orr.w	r3, r3, #30
 8007896:	b2db      	uxtb	r3, r3
 8007898:	4619      	mov	r1, r3
 800789a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800789e:	f000 fa85 	bl	8007dac <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80078a2:	2001      	movs	r0, #1
 80078a4:	f000 feeb 	bl	800867e <RBI_GetRFOMaxPowerConfig>
 80078a8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80078aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	da01      	bge.n	80078b8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b14      	cmp	r3, #20
 80078bc:	d10e      	bne.n	80078dc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80078be:	2301      	movs	r3, #1
 80078c0:	2200      	movs	r2, #0
 80078c2:	2105      	movs	r1, #5
 80078c4:	2003      	movs	r0, #3
 80078c6:	f7ff fe9f 	bl	8007608 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80078ca:	79ba      	ldrb	r2, [r7, #6]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	3316      	adds	r3, #22
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	71bb      	strb	r3, [r7, #6]
 80078da:	e031      	b.n	8007940 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b11      	cmp	r3, #17
 80078e0:	d10e      	bne.n	8007900 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80078e2:	2301      	movs	r3, #1
 80078e4:	2200      	movs	r2, #0
 80078e6:	2103      	movs	r1, #3
 80078e8:	2002      	movs	r0, #2
 80078ea:	f7ff fe8d 	bl	8007608 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80078ee:	79ba      	ldrb	r2, [r7, #6]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	3316      	adds	r3, #22
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	71bb      	strb	r3, [r7, #6]
 80078fe:	e01f      	b.n	8007940 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b0e      	cmp	r3, #14
 8007904:	d10e      	bne.n	8007924 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8007906:	2301      	movs	r3, #1
 8007908:	2200      	movs	r2, #0
 800790a:	2102      	movs	r1, #2
 800790c:	2002      	movs	r0, #2
 800790e:	f7ff fe7b 	bl	8007608 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007912:	79ba      	ldrb	r2, [r7, #6]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	b2db      	uxtb	r3, r3
 800791c:	330e      	adds	r3, #14
 800791e:	b2db      	uxtb	r3, r3
 8007920:	71bb      	strb	r3, [r7, #6]
 8007922:	e00d      	b.n	8007940 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8007924:	2301      	movs	r3, #1
 8007926:	2200      	movs	r2, #0
 8007928:	2107      	movs	r1, #7
 800792a:	2004      	movs	r0, #4
 800792c:	f7ff fe6c 	bl	8007608 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8007930:	79ba      	ldrb	r2, [r7, #6]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	b2db      	uxtb	r3, r3
 800793a:	3316      	adds	r3, #22
 800793c:	b2db      	uxtb	r3, r3
 800793e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8007940:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007944:	f113 0f09 	cmn.w	r3, #9
 8007948:	da01      	bge.n	800794e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800794a:	23f7      	movs	r3, #247	; 0xf7
 800794c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800794e:	2138      	movs	r1, #56	; 0x38
 8007950:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007954:	f000 fa2a 	bl	8007dac <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8007958:	79bb      	ldrb	r3, [r7, #6]
 800795a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800795c:	797b      	ldrb	r3, [r7, #5]
 800795e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8007960:	f107 0308 	add.w	r3, r7, #8
 8007964:	2202      	movs	r2, #2
 8007966:	4619      	mov	r1, r3
 8007968:	208e      	movs	r0, #142	; 0x8e
 800796a:	f000 facf 	bl	8007f0c <SUBGRF_WriteCommand>
}
 800796e:	bf00      	nop
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8007978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800797c:	b086      	sub	sp, #24
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007986:	4a61      	ldr	r2, [pc, #388]	; (8007b0c <SUBGRF_SetModulationParams+0x194>)
 8007988:	f107 0308 	add.w	r3, r7, #8
 800798c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007990:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	781a      	ldrb	r2, [r3, #0]
 8007998:	4b5d      	ldr	r3, [pc, #372]	; (8007b10 <SUBGRF_SetModulationParams+0x198>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d004      	beq.n	80079aa <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff fef3 	bl	8007790 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	f200 80a5 	bhi.w	8007afe <SUBGRF_SetModulationParams+0x186>
 80079b4:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <SUBGRF_SetModulationParams+0x44>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	08007a8d 	.word	0x08007a8d
 80079c4:	08007a4f 	.word	0x08007a4f
 80079c8:	08007abb 	.word	0x08007abb
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80079cc:	2308      	movs	r3, #8
 80079ce:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	4a4f      	ldr	r2, [pc, #316]	; (8007b14 <SUBGRF_SetModulationParams+0x19c>)
 80079d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079da:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	0c1b      	lsrs	r3, r3, #16
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	0a1b      	lsrs	r3, r3, #8
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7b1b      	ldrb	r3, [r3, #12]
 80079f6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	7b5b      	ldrb	r3, [r3, #13]
 80079fc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	2200      	movs	r2, #0
 8007a04:	461c      	mov	r4, r3
 8007a06:	4615      	mov	r5, r2
 8007a08:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8007a0c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8007a10:	4a41      	ldr	r2, [pc, #260]	; (8007b18 <SUBGRF_SetModulationParams+0x1a0>)
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	4640      	mov	r0, r8
 8007a18:	4649      	mov	r1, r9
 8007a1a:	f7f8 fc01 	bl	8000220 <__aeabi_uldivmod>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4613      	mov	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	0c1b      	lsrs	r3, r3, #16
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	0a1b      	lsrs	r3, r3, #8
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007a3c:	7cfb      	ldrb	r3, [r7, #19]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	f107 0308 	add.w	r3, r7, #8
 8007a44:	4619      	mov	r1, r3
 8007a46:	208b      	movs	r0, #139	; 0x8b
 8007a48:	f000 fa60 	bl	8007f0c <SUBGRF_WriteCommand>
        break;
 8007a4c:	e058      	b.n	8007b00 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8007a4e:	2304      	movs	r3, #4
 8007a50:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	4a2f      	ldr	r2, [pc, #188]	; (8007b14 <SUBGRF_SetModulationParams+0x19c>)
 8007a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	0a1b      	lsrs	r3, r3, #8
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	7d1b      	ldrb	r3, [r3, #20]
 8007a78:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007a7a:	7cfb      	ldrb	r3, [r7, #19]
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	f107 0308 	add.w	r3, r7, #8
 8007a82:	4619      	mov	r1, r3
 8007a84:	208b      	movs	r0, #139	; 0x8b
 8007a86:	f000 fa41 	bl	8007f0c <SUBGRF_WriteCommand>
        break;
 8007a8a:	e039      	b.n	8007b00 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7e1b      	ldrb	r3, [r3, #24]
 8007a94:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	7e5b      	ldrb	r3, [r3, #25]
 8007a9a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	7e9b      	ldrb	r3, [r3, #26]
 8007aa0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7edb      	ldrb	r3, [r3, #27]
 8007aa6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007aa8:	7cfb      	ldrb	r3, [r7, #19]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	f107 0308 	add.w	r3, r7, #8
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	208b      	movs	r0, #139	; 0x8b
 8007ab4:	f000 fa2a 	bl	8007f0c <SUBGRF_WriteCommand>

        break;
 8007ab8:	e022      	b.n	8007b00 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8007aba:	2305      	movs	r3, #5
 8007abc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	4a14      	ldr	r2, [pc, #80]	; (8007b14 <SUBGRF_SetModulationParams+0x19c>)
 8007ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	0c1b      	lsrs	r3, r3, #16
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	0a1b      	lsrs	r3, r3, #8
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	7b1b      	ldrb	r3, [r3, #12]
 8007ae4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	7b5b      	ldrb	r3, [r3, #13]
 8007aea:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007aec:	7cfb      	ldrb	r3, [r7, #19]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	f107 0308 	add.w	r3, r7, #8
 8007af4:	4619      	mov	r1, r3
 8007af6:	208b      	movs	r0, #139	; 0x8b
 8007af8:	f000 fa08 	bl	8007f0c <SUBGRF_WriteCommand>
        break;
 8007afc:	e000      	b.n	8007b00 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8007afe:	bf00      	nop
    }
}
 8007b00:	bf00      	nop
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007b0a:	bf00      	nop
 8007b0c:	080098f4 	.word	0x080098f4
 8007b10:	20000411 	.word	0x20000411
 8007b14:	3d090000 	.word	0x3d090000
 8007b18:	01e84800 	.word	0x01e84800

08007b1c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007b28:	4a48      	ldr	r2, [pc, #288]	; (8007c4c <SUBGRF_SetPacketParams+0x130>)
 8007b2a:	f107 030c 	add.w	r3, r7, #12
 8007b2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b30:	c303      	stmia	r3!, {r0, r1}
 8007b32:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	4b45      	ldr	r3, [pc, #276]	; (8007c50 <SUBGRF_SetPacketParams+0x134>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d004      	beq.n	8007b4a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff fe23 	bl	8007790 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d878      	bhi.n	8007c44 <SUBGRF_SetPacketParams+0x128>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <SUBGRF_SetPacketParams+0x3c>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007bf9 	.word	0x08007bf9
 8007b60:	08007bed 	.word	0x08007bed
 8007b64:	08007b69 	.word	0x08007b69
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	7a5b      	ldrb	r3, [r3, #9]
 8007b6c:	2bf1      	cmp	r3, #241	; 0xf1
 8007b6e:	d10a      	bne.n	8007b86 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007b70:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007b74:	f7ff faaa 	bl	80070cc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8007b78:	f248 0005 	movw	r0, #32773	; 0x8005
 8007b7c:	f7ff fac6 	bl	800710c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007b80:	2302      	movs	r3, #2
 8007b82:	75bb      	strb	r3, [r7, #22]
 8007b84:	e011      	b.n	8007baa <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7a5b      	ldrb	r3, [r3, #9]
 8007b8a:	2bf2      	cmp	r3, #242	; 0xf2
 8007b8c:	d10a      	bne.n	8007ba4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8007b8e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8007b92:	f7ff fa9b 	bl	80070cc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8007b96:	f241 0021 	movw	r0, #4129	; 0x1021
 8007b9a:	f7ff fab7 	bl	800710c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8007b9e:	2306      	movs	r3, #6
 8007ba0:	75bb      	strb	r3, [r7, #22]
 8007ba2:	e002      	b.n	8007baa <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	7a5b      	ldrb	r3, [r3, #9]
 8007ba8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8007baa:	2309      	movs	r3, #9
 8007bac:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	885b      	ldrh	r3, [r3, #2]
 8007bb2:	0a1b      	lsrs	r3, r3, #8
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	885b      	ldrh	r3, [r3, #2]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	791b      	ldrb	r3, [r3, #4]
 8007bc6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	795b      	ldrb	r3, [r3, #5]
 8007bcc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	799b      	ldrb	r3, [r3, #6]
 8007bd2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	79db      	ldrb	r3, [r3, #7]
 8007bd8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	7a1b      	ldrb	r3, [r3, #8]
 8007bde:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007be0:	7dbb      	ldrb	r3, [r7, #22]
 8007be2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7a9b      	ldrb	r3, [r3, #10]
 8007be8:	753b      	strb	r3, [r7, #20]
        break;
 8007bea:	e022      	b.n	8007c32 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8007bec:	2301      	movs	r3, #1
 8007bee:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7b1b      	ldrb	r3, [r3, #12]
 8007bf4:	733b      	strb	r3, [r7, #12]
        break;
 8007bf6:	e01c      	b.n	8007c32 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8007bf8:	2306      	movs	r3, #6
 8007bfa:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	89db      	ldrh	r3, [r3, #14]
 8007c00:	0a1b      	lsrs	r3, r3, #8
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	89db      	ldrh	r3, [r3, #14]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	7c1a      	ldrb	r2, [r3, #16]
 8007c14:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <SUBGRF_SetPacketParams+0x138>)
 8007c16:	4611      	mov	r1, r2
 8007c18:	7019      	strb	r1, [r3, #0]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7c5b      	ldrb	r3, [r3, #17]
 8007c22:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7c9b      	ldrb	r3, [r3, #18]
 8007c28:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	7cdb      	ldrb	r3, [r3, #19]
 8007c2e:	747b      	strb	r3, [r7, #17]
        break;
 8007c30:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f107 030c 	add.w	r3, r7, #12
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	208c      	movs	r0, #140	; 0x8c
 8007c3e:	f000 f965 	bl	8007f0c <SUBGRF_WriteCommand>
 8007c42:	e000      	b.n	8007c46 <SUBGRF_SetPacketParams+0x12a>
        return;
 8007c44:	bf00      	nop
}
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	080098fc 	.word	0x080098fc
 8007c50:	20000411 	.word	0x20000411
 8007c54:	20000412 	.word	0x20000412

08007c58 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	460a      	mov	r2, r1
 8007c62:	71fb      	strb	r3, [r7, #7]
 8007c64:	4613      	mov	r3, r2
 8007c66:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8007c68:	79fb      	ldrb	r3, [r7, #7]
 8007c6a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8007c6c:	79bb      	ldrb	r3, [r7, #6]
 8007c6e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8007c70:	f107 030c 	add.w	r3, r7, #12
 8007c74:	2202      	movs	r2, #2
 8007c76:	4619      	mov	r1, r3
 8007c78:	208f      	movs	r0, #143	; 0x8f
 8007c7a:	f000 f947 	bl	8007f0c <SUBGRF_WriteCommand>
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8007c90:	1d3b      	adds	r3, r7, #4
 8007c92:	2201      	movs	r2, #1
 8007c94:	4619      	mov	r1, r3
 8007c96:	2015      	movs	r0, #21
 8007c98:	f000 f95a 	bl	8007f50 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8007c9c:	793b      	ldrb	r3, [r7, #4]
 8007c9e:	425b      	negs	r3, r3
 8007ca0:	105b      	asrs	r3, r3, #1
 8007ca2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8007ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007cba:	f107 030c 	add.w	r3, r7, #12
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	2013      	movs	r0, #19
 8007cc4:	f000 f944 	bl	8007f50 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007cc8:	f7ff fd7e 	bl	80077c8 <SUBGRF_GetPacketType>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d10d      	bne.n	8007cee <SUBGRF_GetRxBufferStatus+0x3e>
 8007cd2:	4b0c      	ldr	r3, [pc, #48]	; (8007d04 <SUBGRF_GetRxBufferStatus+0x54>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d108      	bne.n	8007cee <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007cdc:	f240 7002 	movw	r0, #1794	; 0x702
 8007ce0:	f000 f878 	bl	8007dd4 <SUBGRF_ReadRegister>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e002      	b.n	8007cf4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8007cee:	7b3a      	ldrb	r2, [r7, #12]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8007cf4:	7b7a      	ldrb	r2, [r7, #13]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	701a      	strb	r2, [r3, #0]
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000412 	.word	0x20000412

08007d08 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8007d10:	f107 030c 	add.w	r3, r7, #12
 8007d14:	2203      	movs	r2, #3
 8007d16:	4619      	mov	r1, r3
 8007d18:	2014      	movs	r0, #20
 8007d1a:	f000 f919 	bl	8007f50 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8007d1e:	f7ff fd53 	bl	80077c8 <SUBGRF_GetPacketType>
 8007d22:	4603      	mov	r3, r0
 8007d24:	461a      	mov	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <SUBGRF_GetPacketStatus+0x30>
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d013      	beq.n	8007d5e <SUBGRF_GetPacketStatus+0x56>
 8007d36:	e02a      	b.n	8007d8e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8007d38:	7b3a      	ldrb	r2, [r7, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8007d3e:	7b7b      	ldrb	r3, [r7, #13]
 8007d40:	425b      	negs	r3, r3
 8007d42:	105b      	asrs	r3, r3, #1
 8007d44:	b25a      	sxtb	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	425b      	negs	r3, r3
 8007d4e:	105b      	asrs	r3, r3, #1
 8007d50:	b25a      	sxtb	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	609a      	str	r2, [r3, #8]
            break;
 8007d5c:	e020      	b.n	8007da0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8007d5e:	7b3b      	ldrb	r3, [r7, #12]
 8007d60:	425b      	negs	r3, r3
 8007d62:	105b      	asrs	r3, r3, #1
 8007d64:	b25a      	sxtb	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8007d6a:	7b7b      	ldrb	r3, [r7, #13]
 8007d6c:	b25b      	sxtb	r3, r3
 8007d6e:	3302      	adds	r3, #2
 8007d70:	109b      	asrs	r3, r3, #2
 8007d72:	b25a      	sxtb	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	425b      	negs	r3, r3
 8007d7c:	105b      	asrs	r3, r3, #1
 8007d7e:	b25a      	sxtb	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8007d84:	4b08      	ldr	r3, [pc, #32]	; (8007da8 <SUBGRF_GetPacketStatus+0xa0>)
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	611a      	str	r2, [r3, #16]
            break;
 8007d8c:	e008      	b.n	8007da0 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8007d8e:	2214      	movs	r2, #20
 8007d90:	2100      	movs	r1, #0
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fca7 	bl	80086e6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	220f      	movs	r2, #15
 8007d9c:	701a      	strb	r2, [r3, #0]
            break;
 8007d9e:	bf00      	nop
    }
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000414 	.word	0x20000414

08007dac <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	460a      	mov	r2, r1
 8007db6:	80fb      	strh	r3, [r7, #6]
 8007db8:	4613      	mov	r3, r2
 8007dba:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8007dbc:	1d7a      	adds	r2, r7, #5
 8007dbe:	88f9      	ldrh	r1, [r7, #6]
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	4803      	ldr	r0, [pc, #12]	; (8007dd0 <SUBGRF_WriteRegister+0x24>)
 8007dc4:	f7fb fad2 	bl	800336c <HAL_SUBGHZ_WriteRegisters>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000110 	.word	0x20000110

08007dd4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8007dde:	f107 020f 	add.w	r2, r7, #15
 8007de2:	88f9      	ldrh	r1, [r7, #6]
 8007de4:	2301      	movs	r3, #1
 8007de6:	4804      	ldr	r0, [pc, #16]	; (8007df8 <SUBGRF_ReadRegister+0x24>)
 8007de8:	f7fb fb1f 	bl	800342a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20000110 	.word	0x20000110

08007dfc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	80fb      	strh	r3, [r7, #6]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e10:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e12:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007e14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e16:	b672      	cpsid	i
}
 8007e18:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8007e1a:	88bb      	ldrh	r3, [r7, #4]
 8007e1c:	88f9      	ldrh	r1, [r7, #6]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	4806      	ldr	r0, [pc, #24]	; (8007e3c <SUBGRF_WriteRegisters+0x40>)
 8007e22:	f7fb faa3 	bl	800336c <HAL_SUBGHZ_WriteRegisters>
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f383 8810 	msr	PRIMASK, r3
}
 8007e30:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007e32:	bf00      	nop
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000110 	.word	0x20000110

08007e40 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	6039      	str	r1, [r7, #0]
 8007e4a:	80fb      	strh	r3, [r7, #6]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e50:	f3ef 8310 	mrs	r3, PRIMASK
 8007e54:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e56:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007e58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e5a:	b672      	cpsid	i
}
 8007e5c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8007e5e:	88bb      	ldrh	r3, [r7, #4]
 8007e60:	88f9      	ldrh	r1, [r7, #6]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	4806      	ldr	r0, [pc, #24]	; (8007e80 <SUBGRF_ReadRegisters+0x40>)
 8007e66:	f7fb fae0 	bl	800342a <HAL_SUBGHZ_ReadRegisters>
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f383 8810 	msr	PRIMASK, r3
}
 8007e74:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007e76:	bf00      	nop
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000110 	.word	0x20000110

08007e84 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	71fb      	strb	r3, [r7, #7]
 8007e90:	4613      	mov	r3, r2
 8007e92:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e94:	f3ef 8310 	mrs	r3, PRIMASK
 8007e98:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007e9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e9e:	b672      	cpsid	i
}
 8007ea0:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007ea2:	79bb      	ldrb	r3, [r7, #6]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	79f9      	ldrb	r1, [r7, #7]
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	4806      	ldr	r0, [pc, #24]	; (8007ec4 <SUBGRF_WriteBuffer+0x40>)
 8007eac:	f7fb fbd1 	bl	8003652 <HAL_SUBGHZ_WriteBuffer>
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f383 8810 	msr	PRIMASK, r3
}
 8007eba:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007ebc:	bf00      	nop
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20000110 	.word	0x20000110

08007ec8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	6039      	str	r1, [r7, #0]
 8007ed2:	71fb      	strb	r3, [r7, #7]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8007edc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ede:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007ee0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ee2:	b672      	cpsid	i
}
 8007ee4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8007ee6:	79bb      	ldrb	r3, [r7, #6]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	79f9      	ldrb	r1, [r7, #7]
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	4806      	ldr	r0, [pc, #24]	; (8007f08 <SUBGRF_ReadBuffer+0x40>)
 8007ef0:	f7fb fc02 	bl	80036f8 <HAL_SUBGHZ_ReadBuffer>
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f383 8810 	msr	PRIMASK, r3
}
 8007efe:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007f00:	bf00      	nop
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20000110 	.word	0x20000110

08007f0c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	6039      	str	r1, [r7, #0]
 8007f16:	71fb      	strb	r3, [r7, #7]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f20:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f22:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007f24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f26:	b672      	cpsid	i
}
 8007f28:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8007f2a:	88bb      	ldrh	r3, [r7, #4]
 8007f2c:	79f9      	ldrb	r1, [r7, #7]
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	4806      	ldr	r0, [pc, #24]	; (8007f4c <SUBGRF_WriteCommand+0x40>)
 8007f32:	f7fb fadb 	bl	80034ec <HAL_SUBGHZ_ExecSetCmd>
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f383 8810 	msr	PRIMASK, r3
}
 8007f40:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007f42:	bf00      	nop
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000110 	.word	0x20000110

08007f50 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	6039      	str	r1, [r7, #0]
 8007f5a:	71fb      	strb	r3, [r7, #7]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f60:	f3ef 8310 	mrs	r3, PRIMASK
 8007f64:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f66:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007f68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f6a:	b672      	cpsid	i
}
 8007f6c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007f6e:	88bb      	ldrh	r3, [r7, #4]
 8007f70:	79f9      	ldrb	r1, [r7, #7]
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	4806      	ldr	r0, [pc, #24]	; (8007f90 <SUBGRF_ReadCommand+0x40>)
 8007f76:	f7fb fb18 	bl	80035aa <HAL_SUBGHZ_ExecGetCmd>
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f383 8810 	msr	PRIMASK, r3
}
 8007f84:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007f86:	bf00      	nop
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20000110 	.word	0x20000110

08007f94 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	460a      	mov	r2, r1
 8007f9e:	71fb      	strb	r3, [r7, #7]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8007fa8:	79bb      	ldrb	r3, [r7, #6]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d10d      	bne.n	8007fca <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d104      	bne.n	8007fbe <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8007fb8:	2004      	movs	r0, #4
 8007fba:	f000 f8ef 	bl	800819c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d107      	bne.n	8007fd4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	73fb      	strb	r3, [r7, #15]
 8007fc8:	e004      	b.n	8007fd4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8007fca:	79bb      	ldrb	r3, [r7, #6]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fad2 	bl	8008580 <RBI_ConfigRFSwitch>
}
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8007ff2:	f000 fb23 	bl	800863c <RBI_GetTxConfig>
 8007ff6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d016      	beq.n	800802c <SUBGRF_SetRfTxPower+0x48>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b02      	cmp	r3, #2
 8008002:	dc16      	bgt.n	8008032 <SUBGRF_SetRfTxPower+0x4e>
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <SUBGRF_SetRfTxPower+0x2e>
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d00a      	beq.n	8008026 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8008010:	e00f      	b.n	8008032 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8008012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008016:	2b0f      	cmp	r3, #15
 8008018:	dd02      	ble.n	8008020 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800801a:	2302      	movs	r3, #2
 800801c:	73fb      	strb	r3, [r7, #15]
            break;
 800801e:	e009      	b.n	8008034 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8008020:	2301      	movs	r3, #1
 8008022:	73fb      	strb	r3, [r7, #15]
            break;
 8008024:	e006      	b.n	8008034 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8008026:	2301      	movs	r3, #1
 8008028:	73fb      	strb	r3, [r7, #15]
            break;
 800802a:	e003      	b.n	8008034 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800802c:	2302      	movs	r3, #2
 800802e:	73fb      	strb	r3, [r7, #15]
            break;
 8008030:	e000      	b.n	8008034 <SUBGRF_SetRfTxPower+0x50>
            break;
 8008032:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8008034:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	2202      	movs	r2, #2
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff fbcd 	bl	80077dc <SUBGRF_SetTxParams>

    return paSelect;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8008050:	2301      	movs	r3, #1
}
 8008052:	4618      	mov	r0, r3
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr
	...

0800805c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8008064:	4b03      	ldr	r3, [pc, #12]	; (8008074 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2001      	movs	r0, #1
 800806a:	4798      	blx	r3
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	2000041c 	.word	0x2000041c

08008078 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8008080:	4b03      	ldr	r3, [pc, #12]	; (8008090 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2002      	movs	r0, #2
 8008086:	4798      	blx	r3
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	2000041c 	.word	0x2000041c

08008094 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800809c:	4b03      	ldr	r3, [pc, #12]	; (80080ac <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2040      	movs	r0, #64	; 0x40
 80080a2:	4798      	blx	r3
}
 80080a4:	bf00      	nop
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	2000041c 	.word	0x2000041c

080080b0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d005      	beq.n	80080d2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80080c6:	e00a      	b.n	80080de <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80080c8:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2080      	movs	r0, #128	; 0x80
 80080ce:	4798      	blx	r3
            break;
 80080d0:	e005      	b.n	80080de <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80080da:	4798      	blx	r3
            break;
 80080dc:	bf00      	nop
    }
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	2000041c 	.word	0x2000041c

080080ec <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80080f4:	4b04      	ldr	r3, [pc, #16]	; (8008108 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80080fc:	4798      	blx	r3
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	2000041c 	.word	0x2000041c

0800810c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8008114:	4b03      	ldr	r3, [pc, #12]	; (8008124 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2020      	movs	r0, #32
 800811a:	4798      	blx	r3
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	2000041c 	.word	0x2000041c

08008128 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8008130:	4b03      	ldr	r3, [pc, #12]	; (8008140 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2004      	movs	r0, #4
 8008136:	4798      	blx	r3
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	2000041c 	.word	0x2000041c

08008144 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800814c:	4b03      	ldr	r3, [pc, #12]	; (800815c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2008      	movs	r0, #8
 8008152:	4798      	blx	r3
}
 8008154:	bf00      	nop
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	2000041c 	.word	0x2000041c

08008160 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8008168:	4b03      	ldr	r3, [pc, #12]	; (8008178 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2010      	movs	r0, #16
 800816e:	4798      	blx	r3
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	2000041c 	.word	0x2000041c

0800817c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8008184:	4b04      	ldr	r3, [pc, #16]	; (8008198 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800818c:	4798      	blx	r3
}
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	2000041c 	.word	0x2000041c

0800819c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	4603      	mov	r3, r0
 80081a4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80081a6:	f000 fa5f 	bl	8008668 <RBI_IsDCDC>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d112      	bne.n	80081d6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80081b0:	f640 1023 	movw	r0, #2339	; 0x923
 80081b4:	f7ff fe0e 	bl	8007dd4 <SUBGRF_ReadRegister>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
 80081be:	f023 0306 	bic.w	r3, r3, #6
 80081c2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80081c4:	7bfa      	ldrb	r2, [r7, #15]
 80081c6:	79fb      	ldrb	r3, [r7, #7]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	4619      	mov	r1, r3
 80081ce:	f640 1023 	movw	r0, #2339	; 0x923
 80081d2:	f7ff fdeb 	bl	8007dac <SUBGRF_WriteRegister>
  }
}
 80081d6:	bf00      	nop
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80081ee:	231f      	movs	r3, #31
 80081f0:	e016      	b.n	8008220 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]
 80081f6:	e00f      	b.n	8008218 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	4a0c      	ldr	r2, [pc, #48]	; (800822c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80081fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	429a      	cmp	r2, r3
 8008204:	d205      	bcs.n	8008212 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	4a08      	ldr	r2, [pc, #32]	; (800822c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	4413      	add	r3, r2
 800820e:	791b      	ldrb	r3, [r3, #4]
 8008210:	e006      	b.n	8008220 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	3301      	adds	r3, #1
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	2b15      	cmp	r3, #21
 800821c:	d9ec      	bls.n	80081f8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800821e:	e7fe      	b.n	800821e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	08009a8c 	.word	0x08009a8c

08008230 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08a      	sub	sp, #40	; 0x28
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800823a:	4b35      	ldr	r3, [pc, #212]	; (8008310 <SUBGRF_GetCFO+0xe0>)
 800823c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800823e:	f640 0007 	movw	r0, #2055	; 0x807
 8008242:	f7ff fdc7 	bl	8007dd4 <SUBGRF_ReadRegister>
 8008246:	4603      	mov	r3, r0
 8008248:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800824a:	7ffb      	ldrb	r3, [r7, #31]
 800824c:	08db      	lsrs	r3, r3, #3
 800824e:	b2db      	uxtb	r3, r3
 8008250:	f003 0303 	and.w	r3, r3, #3
 8008254:	3328      	adds	r3, #40	; 0x28
 8008256:	443b      	add	r3, r7
 8008258:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800825c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800825e:	7ffb      	ldrb	r3, [r7, #31]
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8008266:	7fba      	ldrb	r2, [r7, #30]
 8008268:	7f7b      	ldrb	r3, [r7, #29]
 800826a:	3301      	adds	r3, #1
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	461a      	mov	r2, r3
 8008272:	4b28      	ldr	r3, [pc, #160]	; (8008314 <SUBGRF_GetCFO+0xe4>)
 8008274:	fbb3 f3f2 	udiv	r3, r3, r2
 8008278:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008282:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8008284:	2301      	movs	r3, #1
 8008286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800828a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	fb02 f303 	mul.w	r3, r2, r3
 8008294:	2b07      	cmp	r3, #7
 8008296:	d802      	bhi.n	800829e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8008298:	2302      	movs	r3, #2
 800829a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800829e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	fb02 f303 	mul.w	r3, r2, r3
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d802      	bhi.n	80082b2 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 80082ac:	2304      	movs	r3, #4
 80082ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80082b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	fb02 f303 	mul.w	r3, r2, r3
 80082bc:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80082be:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80082c2:	f7ff fd87 	bl	8007dd4 <SUBGRF_ReadRegister>
 80082c6:	4603      	mov	r3, r0
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80082ce:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80082d0:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80082d4:	f7ff fd7e 	bl	8007dd4 <SUBGRF_ReadRegister>
 80082d8:	4603      	mov	r3, r0
 80082da:	461a      	mov	r2, r3
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	4313      	orrs	r3, r2
 80082e0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80082f2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80082f6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	095b      	lsrs	r3, r3, #5
 80082fc:	6a3a      	ldr	r2, [r7, #32]
 80082fe:	fb02 f303 	mul.w	r3, r2, r3
 8008302:	11da      	asrs	r2, r3, #7
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	601a      	str	r2, [r3, #0]
}
 8008308:	bf00      	nop
 800830a:	3728      	adds	r7, #40	; 0x28
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	0c0a0804 	.word	0x0c0a0804
 8008314:	01e84800 	.word	0x01e84800

08008318 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800832a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800832e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8008330:	697b      	ldr	r3, [r7, #20]
}
 8008332:	4618      	mov	r0, r3
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr

0800833c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800834e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008352:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8008354:	697b      	ldr	r3, [r7, #20]
}
 8008356:	4618      	mov	r0, r3
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	bc80      	pop	{r7}
 800835e:	4770      	bx	lr

08008360 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800836c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	bc80      	pop	{r7}
 8008378:	4770      	bx	lr

0800837a <RFW_DeInit>:

void RFW_DeInit( void )
{
 800837a:	b480      	push	{r7}
 800837c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800837e:	bf00      	nop
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr

08008386 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8008386:	b480      	push	{r7}
 8008388:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800838a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800838c:	4618      	mov	r0, r3
 800838e:	46bd      	mov	sp, r7
 8008390:	bc80      	pop	{r7}
 8008392:	4770      	bx	lr

08008394 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8008398:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800839a:	4618      	mov	r0, r3
 800839c:	46bd      	mov	sp, r7
 800839e:	bc80      	pop	{r7}
 80083a0:	4770      	bx	lr

080083a2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	4603      	mov	r3, r0
 80083aa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bc80      	pop	{r7}
 80083b4:	4770      	bx	lr

080083b6 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 80083b6:	b480      	push	{r7}
 80083b8:	b087      	sub	sp, #28
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	460b      	mov	r3, r1
 80083c0:	607a      	str	r2, [r7, #4]
 80083c2:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 80083c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083c8:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 80083ca:	697b      	ldr	r3, [r7, #20]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	371c      	adds	r7, #28
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc80      	pop	{r7}
 80083d4:	4770      	bx	lr

080083d6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 80083d6:	b480      	push	{r7}
 80083d8:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 80083da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 80083de:	4618      	mov	r0, r3
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr

080083e6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 80083e6:	b480      	push	{r7}
 80083e8:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80083ea:	bf00      	nop
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bc80      	pop	{r7}
 80083f0:	4770      	bx	lr

080083f2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 80083f2:	b480      	push	{r7}
 80083f4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80083f6:	bf00      	nop
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr

080083fe <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	4603      	mov	r3, r0
 8008406:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr

08008412 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8008416:	f7f8 ff89 	bl	800132c <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800841a:	f000 f809 	bl	8008430 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800841e:	bf00      	nop
 8008420:	bd80      	pop	{r7, pc}

08008422 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8008422:	b480      	push	{r7}
 8008424:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 8008426:	bf00      	nop
 8008428:	46bd      	mov	sp, r7
 800842a:	bc80      	pop	{r7}
 800842c:	4770      	bx	lr
	...

08008430 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8008434:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <SubghzApp_Init+0x30>)
 8008436:	4a0b      	ldr	r2, [pc, #44]	; (8008464 <SubghzApp_Init+0x34>)
 8008438:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800843a:	4b09      	ldr	r3, [pc, #36]	; (8008460 <SubghzApp_Init+0x30>)
 800843c:	4a0a      	ldr	r2, [pc, #40]	; (8008468 <SubghzApp_Init+0x38>)
 800843e:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <SubghzApp_Init+0x30>)
 8008442:	4a0a      	ldr	r2, [pc, #40]	; (800846c <SubghzApp_Init+0x3c>)
 8008444:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8008446:	4b06      	ldr	r3, [pc, #24]	; (8008460 <SubghzApp_Init+0x30>)
 8008448:	4a09      	ldr	r2, [pc, #36]	; (8008470 <SubghzApp_Init+0x40>)
 800844a:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800844c:	4b04      	ldr	r3, [pc, #16]	; (8008460 <SubghzApp_Init+0x30>)
 800844e:	4a09      	ldr	r2, [pc, #36]	; (8008474 <SubghzApp_Init+0x44>)
 8008450:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8008452:	4b09      	ldr	r3, [pc, #36]	; (8008478 <SubghzApp_Init+0x48>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4802      	ldr	r0, [pc, #8]	; (8008460 <SubghzApp_Init+0x30>)
 8008458:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800845a:	bf00      	nop
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000420 	.word	0x20000420
 8008464:	0800847d 	.word	0x0800847d
 8008468:	08008489 	.word	0x08008489
 800846c:	080084ad 	.word	0x080084ad
 8008470:	080084b9 	.word	0x080084b9
 8008474:	080084c5 	.word	0x080084c5
 8008478:	080099fc 	.word	0x080099fc

0800847c <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8008480:	bf00      	nop
 8008482:	46bd      	mov	sp, r7
 8008484:	bc80      	pop	{r7}
 8008486:	4770      	bx	lr

08008488 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	4608      	mov	r0, r1
 8008492:	4611      	mov	r1, r2
 8008494:	461a      	mov	r2, r3
 8008496:	4603      	mov	r3, r0
 8008498:	817b      	strh	r3, [r7, #10]
 800849a:	460b      	mov	r3, r1
 800849c:	813b      	strh	r3, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 80084a2:	bf00      	nop
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bc80      	pop	{r7}
 80084aa:	4770      	bx	lr

080084ac <OnTxTimeout>:

static void OnTxTimeout(void)
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 80084b0:	bf00      	nop
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc80      	pop	{r7}
 80084b6:	4770      	bx	lr

080084b8 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 80084bc:	bf00      	nop
 80084be:	46bd      	mov	sp, r7
 80084c0:	bc80      	pop	{r7}
 80084c2:	4770      	bx	lr

080084c4 <OnRxError>:

static void OnRxError(void)
{
 80084c4:	b480      	push	{r7}
 80084c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 80084c8:	bf00      	nop
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bc80      	pop	{r7}
 80084ce:	4770      	bx	lr

080084d0 <LL_AHB2_GRP1_EnableClock>:
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80084d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80084e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4013      	ands	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80084f4:	68fb      	ldr	r3, [r7, #12]
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bc80      	pop	{r7}
 80084fe:	4770      	bx	lr

08008500 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800850a:	463b      	mov	r3, r7
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	605a      	str	r2, [r3, #4]
 8008512:	609a      	str	r2, [r3, #8]
 8008514:	60da      	str	r2, [r3, #12]
 8008516:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8008518:	2004      	movs	r0, #4
 800851a:	f7ff ffd9 	bl	80084d0 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800851e:	2310      	movs	r3, #16
 8008520:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8008522:	2301      	movs	r3, #1
 8008524:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8008526:	2300      	movs	r3, #0
 8008528:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800852a:	2303      	movs	r3, #3
 800852c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800852e:	463b      	mov	r3, r7
 8008530:	4619      	mov	r1, r3
 8008532:	4812      	ldr	r0, [pc, #72]	; (800857c <RBI_Init+0x7c>)
 8008534:	f7f9 f976 	bl	8001824 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8008538:	2320      	movs	r3, #32
 800853a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800853c:	463b      	mov	r3, r7
 800853e:	4619      	mov	r1, r3
 8008540:	480e      	ldr	r0, [pc, #56]	; (800857c <RBI_Init+0x7c>)
 8008542:	f7f9 f96f 	bl	8001824 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8008546:	2308      	movs	r3, #8
 8008548:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800854a:	463b      	mov	r3, r7
 800854c:	4619      	mov	r1, r3
 800854e:	480b      	ldr	r0, [pc, #44]	; (800857c <RBI_Init+0x7c>)
 8008550:	f7f9 f968 	bl	8001824 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8008554:	2200      	movs	r2, #0
 8008556:	2120      	movs	r1, #32
 8008558:	4808      	ldr	r0, [pc, #32]	; (800857c <RBI_Init+0x7c>)
 800855a:	f7f9 fac3 	bl	8001ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800855e:	2200      	movs	r2, #0
 8008560:	2110      	movs	r1, #16
 8008562:	4806      	ldr	r0, [pc, #24]	; (800857c <RBI_Init+0x7c>)
 8008564:	f7f9 fabe 	bl	8001ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8008568:	2200      	movs	r2, #0
 800856a:	2108      	movs	r1, #8
 800856c:	4803      	ldr	r0, [pc, #12]	; (800857c <RBI_Init+0x7c>)
 800856e:	f7f9 fab9 	bl	8001ae4 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8008572:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	48000800 	.word	0x48000800

08008580 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d84b      	bhi.n	800862c <RBI_ConfigRFSwitch+0xac>
 8008594:	a201      	add	r2, pc, #4	; (adr r2, 800859c <RBI_ConfigRFSwitch+0x1c>)
 8008596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859a:	bf00      	nop
 800859c:	080085ad 	.word	0x080085ad
 80085a0:	080085cd 	.word	0x080085cd
 80085a4:	080085ed 	.word	0x080085ed
 80085a8:	0800860d 	.word	0x0800860d
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 80085ac:	2200      	movs	r2, #0
 80085ae:	2108      	movs	r1, #8
 80085b0:	4821      	ldr	r0, [pc, #132]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 80085b2:	f7f9 fa97 	bl	8001ae4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 80085b6:	2200      	movs	r2, #0
 80085b8:	2110      	movs	r1, #16
 80085ba:	481f      	ldr	r0, [pc, #124]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 80085bc:	f7f9 fa92 	bl	8001ae4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 80085c0:	2200      	movs	r2, #0
 80085c2:	2120      	movs	r1, #32
 80085c4:	481c      	ldr	r0, [pc, #112]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 80085c6:	f7f9 fa8d 	bl	8001ae4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 80085ca:	e030      	b.n	800862e <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80085cc:	2201      	movs	r2, #1
 80085ce:	2108      	movs	r1, #8
 80085d0:	4819      	ldr	r0, [pc, #100]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 80085d2:	f7f9 fa87 	bl	8001ae4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 80085d6:	2201      	movs	r2, #1
 80085d8:	2110      	movs	r1, #16
 80085da:	4817      	ldr	r0, [pc, #92]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 80085dc:	f7f9 fa82 	bl	8001ae4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 80085e0:	2200      	movs	r2, #0
 80085e2:	2120      	movs	r1, #32
 80085e4:	4814      	ldr	r0, [pc, #80]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 80085e6:	f7f9 fa7d 	bl	8001ae4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 80085ea:	e020      	b.n	800862e <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80085ec:	2201      	movs	r2, #1
 80085ee:	2108      	movs	r1, #8
 80085f0:	4811      	ldr	r0, [pc, #68]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 80085f2:	f7f9 fa77 	bl	8001ae4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 80085f6:	2201      	movs	r2, #1
 80085f8:	2110      	movs	r1, #16
 80085fa:	480f      	ldr	r0, [pc, #60]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 80085fc:	f7f9 fa72 	bl	8001ae4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8008600:	2201      	movs	r2, #1
 8008602:	2120      	movs	r1, #32
 8008604:	480c      	ldr	r0, [pc, #48]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 8008606:	f7f9 fa6d 	bl	8001ae4 <HAL_GPIO_WritePin>
		break;
 800860a:	e010      	b.n	800862e <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800860c:	2201      	movs	r2, #1
 800860e:	2108      	movs	r1, #8
 8008610:	4809      	ldr	r0, [pc, #36]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 8008612:	f7f9 fa67 	bl	8001ae4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 8008616:	2200      	movs	r2, #0
 8008618:	2110      	movs	r1, #16
 800861a:	4807      	ldr	r0, [pc, #28]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 800861c:	f7f9 fa62 	bl	8001ae4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8008620:	2201      	movs	r2, #1
 8008622:	2120      	movs	r1, #32
 8008624:	4804      	ldr	r0, [pc, #16]	; (8008638 <RBI_ConfigRFSwitch+0xb8>)
 8008626:	f7f9 fa5d 	bl	8001ae4 <HAL_GPIO_WritePin>
		break;
 800862a:	e000      	b.n	800862e <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 800862c:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800862e:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	48000800 	.word	0x48000800

0800863c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8008642:	2300      	movs	r3, #0
 8008644:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 8008646:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8008652:	b480      	push	{r7}
 8008654:	b083      	sub	sp, #12
 8008656:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8008658:	2301      	movs	r3, #1
 800865a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800865c:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800865e:	4618      	mov	r0, r3
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	bc80      	pop	{r7}
 8008666:	4770      	bx	lr

08008668 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800866e:	2301      	movs	r3, #1
 8008670:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 8008672:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	bc80      	pop	{r7}
 800867c:	4770      	bx	lr

0800867e <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800867e:	b480      	push	{r7}
 8008680:	b085      	sub	sp, #20
 8008682:	af00      	add	r7, sp, #0
 8008684:	4603      	mov	r3, r0
 8008686:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 8008692:	230f      	movs	r3, #15
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	e001      	b.n	800869c <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 8008698:	2316      	movs	r3, #22
 800869a:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800869c:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bc80      	pop	{r7}
 80086a6:	4770      	bx	lr

080086a8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	613b      	str	r3, [r7, #16]

  while( size-- )
 80086be:	e007      	b.n	80086d0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	1c53      	adds	r3, r2, #1
 80086c4:	613b      	str	r3, [r7, #16]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	1c59      	adds	r1, r3, #1
 80086ca:	6179      	str	r1, [r7, #20]
 80086cc:	7812      	ldrb	r2, [r2, #0]
 80086ce:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80086d0:	88fb      	ldrh	r3, [r7, #6]
 80086d2:	1e5a      	subs	r2, r3, #1
 80086d4:	80fa      	strh	r2, [r7, #6]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1f2      	bne.n	80086c0 <UTIL_MEM_cpy_8+0x18>
    }
}
 80086da:	bf00      	nop
 80086dc:	bf00      	nop
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc80      	pop	{r7}
 80086e4:	4770      	bx	lr

080086e6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
 80086f2:	4613      	mov	r3, r2
 80086f4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80086fa:	e004      	b.n	8008706 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	60fa      	str	r2, [r7, #12]
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8008706:	883b      	ldrh	r3, [r7, #0]
 8008708:	1e5a      	subs	r2, r3, #1
 800870a:	803a      	strh	r2, [r7, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1f5      	bne.n	80086fc <UTIL_MEM_set_8+0x16>
  }
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr

0800871c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	4613      	mov	r3, r2
 800872a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d023      	beq.n	800877a <UTIL_TIMER_Create+0x5e>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d020      	beq.n	800877a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800873e:	4b11      	ldr	r3, [pc, #68]	; (8008784 <UTIL_TIMER_Create+0x68>)
 8008740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008742:	68b8      	ldr	r0, [r7, #8]
 8008744:	4798      	blx	r3
 8008746:	4602      	mov	r2, r0
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	79fa      	ldrb	r2, [r7, #7]
 800876e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	e000      	b.n	800877c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800877a:	2301      	movs	r3, #1
  }
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	080099a8 	.word	0x080099a8

08008788 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	; 0x28
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d056      	beq.n	800884a <UTIL_TIMER_Start+0xc2>
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f929 	bl	80089f4 <TimerExists>
 80087a2:	4603      	mov	r3, r0
 80087a4:	f083 0301 	eor.w	r3, r3, #1
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d04d      	beq.n	800884a <UTIL_TIMER_Start+0xc2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	7a5b      	ldrb	r3, [r3, #9]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d149      	bne.n	800884a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087b6:	f3ef 8310 	mrs	r3, PRIMASK
 80087ba:	613b      	str	r3, [r7, #16]
  return(result);
 80087bc:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80087be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80087c0:	b672      	cpsid	i
}
 80087c2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80087ca:	4b24      	ldr	r3, [pc, #144]	; (800885c <UTIL_TIMER_Start+0xd4>)
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	4798      	blx	r3
 80087d0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 80087d2:	6a3a      	ldr	r2, [r7, #32]
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d201      	bcs.n	80087de <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a3a      	ldr	r2, [r7, #32]
 80087e2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 80087f6:	4b1a      	ldr	r3, [pc, #104]	; (8008860 <UTIL_TIMER_Start+0xd8>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d106      	bne.n	800880c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 80087fe:	4b17      	ldr	r3, [pc, #92]	; (800885c <UTIL_TIMER_Start+0xd4>)
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f96b 	bl	8008ae0 <TimerInsertNewHeadTimer>
 800880a:	e017      	b.n	800883c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800880c:	4b13      	ldr	r3, [pc, #76]	; (800885c <UTIL_TIMER_Start+0xd4>)
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	4798      	blx	r3
 8008812:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	441a      	add	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	4b0e      	ldr	r3, [pc, #56]	; (8008860 <UTIL_TIMER_Start+0xd8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d203      	bcs.n	8008836 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f956 	bl	8008ae0 <TimerInsertNewHeadTimer>
 8008834:	e002      	b.n	800883c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f922 	bl	8008a80 <TimerInsertTimer>
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f383 8810 	msr	PRIMASK, r3
}
 8008846:	bf00      	nop
  {
 8008848:	e002      	b.n	8008850 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800884a:	2301      	movs	r3, #1
 800884c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008854:	4618      	mov	r0, r3
 8008856:	3728      	adds	r7, #40	; 0x28
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	080099a8 	.word	0x080099a8
 8008860:	2000043c 	.word	0x2000043c

08008864 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d05b      	beq.n	800892e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008876:	f3ef 8310 	mrs	r3, PRIMASK
 800887a:	60fb      	str	r3, [r7, #12]
  return(result);
 800887c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800887e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008880:	b672      	cpsid	i
}
 8008882:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8008884:	4b2d      	ldr	r3, [pc, #180]	; (800893c <UTIL_TIMER_Stop+0xd8>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800888a:	4b2c      	ldr	r3, [pc, #176]	; (800893c <UTIL_TIMER_Stop+0xd8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8008896:	4b29      	ldr	r3, [pc, #164]	; (800893c <UTIL_TIMER_Stop+0xd8>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d041      	beq.n	8008922 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80088a4:	4b25      	ldr	r3, [pc, #148]	; (800893c <UTIL_TIMER_Stop+0xd8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d134      	bne.n	8008918 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 80088ae:	4b23      	ldr	r3, [pc, #140]	; (800893c <UTIL_TIMER_Stop+0xd8>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2200      	movs	r2, #0
 80088b4:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 80088b6:	4b21      	ldr	r3, [pc, #132]	; (800893c <UTIL_TIMER_Stop+0xd8>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00a      	beq.n	80088d6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 80088c0:	4b1e      	ldr	r3, [pc, #120]	; (800893c <UTIL_TIMER_Stop+0xd8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	4a1d      	ldr	r2, [pc, #116]	; (800893c <UTIL_TIMER_Stop+0xd8>)
 80088c8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 80088ca:	4b1c      	ldr	r3, [pc, #112]	; (800893c <UTIL_TIMER_Stop+0xd8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f8ac 	bl	8008a2c <TimerSetTimeout>
 80088d4:	e023      	b.n	800891e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 80088d6:	4b1a      	ldr	r3, [pc, #104]	; (8008940 <UTIL_TIMER_Stop+0xdc>)
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	4798      	blx	r3
            TimerListHead = NULL;
 80088dc:	4b17      	ldr	r3, [pc, #92]	; (800893c <UTIL_TIMER_Stop+0xd8>)
 80088de:	2200      	movs	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	e01c      	b.n	800891e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d110      	bne.n	800890e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d006      	beq.n	8008902 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8008900:	e00d      	b.n	800891e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8008902:	2300      	movs	r3, #0
 8008904:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	615a      	str	r2, [r3, #20]
            break;
 800890c:	e007      	b.n	800891e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e2      	bne.n	80088e4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	77fb      	strb	r3, [r7, #31]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f383 8810 	msr	PRIMASK, r3
}
 800892c:	e001      	b.n	8008932 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800892e:	2301      	movs	r3, #1
 8008930:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8008932:	7ffb      	ldrb	r3, [r7, #31]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3720      	adds	r7, #32
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	2000043c 	.word	0x2000043c
 8008940:	080099a8 	.word	0x080099a8

08008944 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d102      	bne.n	800895e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8008958:	2301      	movs	r3, #1
 800895a:	73fb      	strb	r3, [r7, #15]
 800895c:	e014      	b.n	8008988 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <UTIL_TIMER_SetPeriod+0x50>)
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	6838      	ldr	r0, [r7, #0]
 8008964:	4798      	blx	r3
 8008966:	4602      	mov	r2, r0
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f841 	bl	80089f4 <TimerExists>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d007      	beq.n	8008988 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff ff73 	bl	8008864 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff ff02 	bl	8008788 <UTIL_TIMER_Start>
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	080099a8 	.word	0x080099a8

08008998 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800899e:	4b06      	ldr	r3, [pc, #24]	; (80089b8 <UTIL_TIMER_GetCurrentTime+0x20>)
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	4798      	blx	r3
 80089a4:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 80089a6:	4b04      	ldr	r3, [pc, #16]	; (80089b8 <UTIL_TIMER_GetCurrentTime+0x20>)
 80089a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	4798      	blx	r3
 80089ae:	4603      	mov	r3, r0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	080099a8 	.word	0x080099a8

080089bc <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80089c4:	4b0a      	ldr	r3, [pc, #40]	; (80089f0 <UTIL_TIMER_GetElapsedTime+0x34>)
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	4798      	blx	r3
 80089ca:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80089cc:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <UTIL_TIMER_GetElapsedTime+0x34>)
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	4798      	blx	r3
 80089d4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80089d6:	4b06      	ldr	r3, [pc, #24]	; (80089f0 <UTIL_TIMER_GetElapsedTime+0x34>)
 80089d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089da:	68f9      	ldr	r1, [r7, #12]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	1a8a      	subs	r2, r1, r2
 80089e0:	4610      	mov	r0, r2
 80089e2:	4798      	blx	r3
 80089e4:	4603      	mov	r3, r0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	080099a8 	.word	0x080099a8

080089f4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80089fc:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <TimerExists+0x34>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8008a02:	e008      	b.n	8008a16 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d101      	bne.n	8008a10 <TimerExists+0x1c>
    {
      return true;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e006      	b.n	8008a1e <TimerExists+0x2a>
    }
    cur = cur->Next;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f3      	bne.n	8008a04 <TimerExists+0x10>
  }
  return false;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bc80      	pop	{r7}
 8008a26:	4770      	bx	lr
 8008a28:	2000043c 	.word	0x2000043c

08008a2c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8008a2c:	b590      	push	{r4, r7, lr}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8008a34:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <TimerSetTimeout+0x50>)
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	4798      	blx	r3
 8008a3a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681c      	ldr	r4, [r3, #0]
 8008a46:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <TimerSetTimeout+0x50>)
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	4798      	blx	r3
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	4413      	add	r3, r2
 8008a52:	429c      	cmp	r4, r3
 8008a54:	d207      	bcs.n	8008a66 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <TimerSetTimeout+0x50>)
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	4798      	blx	r3
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	441a      	add	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8008a66:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <TimerSetTimeout+0x50>)
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	6812      	ldr	r2, [r2, #0]
 8008a6e:	4610      	mov	r0, r2
 8008a70:	4798      	blx	r3
}
 8008a72:	bf00      	nop
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd90      	pop	{r4, r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	080099a8 	.word	0x080099a8

08008a80 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8008a88:	4b14      	ldr	r3, [pc, #80]	; (8008adc <TimerInsertTimer+0x5c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8008a8e:	4b13      	ldr	r3, [pc, #76]	; (8008adc <TimerInsertTimer+0x5c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8008a96:	e012      	b.n	8008abe <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d905      	bls.n	8008ab0 <TimerInsertTimer+0x30>
    {
        cur = next;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	60bb      	str	r3, [r7, #8]
 8008aae:	e006      	b.n	8008abe <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	615a      	str	r2, [r3, #20]
        return;
 8008abc:	e009      	b.n	8008ad2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e8      	bne.n	8008a98 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	615a      	str	r2, [r3, #20]
}
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bc80      	pop	{r7}
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	2000043c 	.word	0x2000043c

08008ae0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8008ae8:	4b0b      	ldr	r3, [pc, #44]	; (8008b18 <TimerInsertNewHeadTimer+0x38>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8008b00:	4a05      	ldr	r2, [pc, #20]	; (8008b18 <TimerInsertNewHeadTimer+0x38>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8008b06:	4b04      	ldr	r3, [pc, #16]	; (8008b18 <TimerInsertNewHeadTimer+0x38>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff ff8e 	bl	8008a2c <TimerSetTimeout>
}
 8008b10:	bf00      	nop
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	2000043c 	.word	0x2000043c

08008b1c <_vsniprintf_r>:
 8008b1c:	b530      	push	{r4, r5, lr}
 8008b1e:	4614      	mov	r4, r2
 8008b20:	2c00      	cmp	r4, #0
 8008b22:	b09b      	sub	sp, #108	; 0x6c
 8008b24:	4605      	mov	r5, r0
 8008b26:	461a      	mov	r2, r3
 8008b28:	da05      	bge.n	8008b36 <_vsniprintf_r+0x1a>
 8008b2a:	238b      	movs	r3, #139	; 0x8b
 8008b2c:	6003      	str	r3, [r0, #0]
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b32:	b01b      	add	sp, #108	; 0x6c
 8008b34:	bd30      	pop	{r4, r5, pc}
 8008b36:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b3a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008b3e:	bf14      	ite	ne
 8008b40:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008b44:	4623      	moveq	r3, r4
 8008b46:	9302      	str	r3, [sp, #8]
 8008b48:	9305      	str	r3, [sp, #20]
 8008b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b4e:	9100      	str	r1, [sp, #0]
 8008b50:	9104      	str	r1, [sp, #16]
 8008b52:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008b56:	4669      	mov	r1, sp
 8008b58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b5a:	f000 f8b5 	bl	8008cc8 <_svfiprintf_r>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	bfbc      	itt	lt
 8008b62:	238b      	movlt	r3, #139	; 0x8b
 8008b64:	602b      	strlt	r3, [r5, #0]
 8008b66:	2c00      	cmp	r4, #0
 8008b68:	d0e3      	beq.n	8008b32 <_vsniprintf_r+0x16>
 8008b6a:	9b00      	ldr	r3, [sp, #0]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	701a      	strb	r2, [r3, #0]
 8008b70:	e7df      	b.n	8008b32 <_vsniprintf_r+0x16>
	...

08008b74 <vsniprintf>:
 8008b74:	b507      	push	{r0, r1, r2, lr}
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	460a      	mov	r2, r1
 8008b7c:	4601      	mov	r1, r0
 8008b7e:	4803      	ldr	r0, [pc, #12]	; (8008b8c <vsniprintf+0x18>)
 8008b80:	6800      	ldr	r0, [r0, #0]
 8008b82:	f7ff ffcb 	bl	8008b1c <_vsniprintf_r>
 8008b86:	b003      	add	sp, #12
 8008b88:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b8c:	2000005c 	.word	0x2000005c

08008b90 <memset>:
 8008b90:	4402      	add	r2, r0
 8008b92:	4603      	mov	r3, r0
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d100      	bne.n	8008b9a <memset+0xa>
 8008b98:	4770      	bx	lr
 8008b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b9e:	e7f9      	b.n	8008b94 <memset+0x4>

08008ba0 <__errno>:
 8008ba0:	4b01      	ldr	r3, [pc, #4]	; (8008ba8 <__errno+0x8>)
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	2000005c 	.word	0x2000005c

08008bac <__libc_init_array>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4d0d      	ldr	r5, [pc, #52]	; (8008be4 <__libc_init_array+0x38>)
 8008bb0:	4c0d      	ldr	r4, [pc, #52]	; (8008be8 <__libc_init_array+0x3c>)
 8008bb2:	1b64      	subs	r4, r4, r5
 8008bb4:	10a4      	asrs	r4, r4, #2
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	42a6      	cmp	r6, r4
 8008bba:	d109      	bne.n	8008bd0 <__libc_init_array+0x24>
 8008bbc:	4d0b      	ldr	r5, [pc, #44]	; (8008bec <__libc_init_array+0x40>)
 8008bbe:	4c0c      	ldr	r4, [pc, #48]	; (8008bf0 <__libc_init_array+0x44>)
 8008bc0:	f000 fc68 	bl	8009494 <_init>
 8008bc4:	1b64      	subs	r4, r4, r5
 8008bc6:	10a4      	asrs	r4, r4, #2
 8008bc8:	2600      	movs	r6, #0
 8008bca:	42a6      	cmp	r6, r4
 8008bcc:	d105      	bne.n	8008bda <__libc_init_array+0x2e>
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd4:	4798      	blx	r3
 8008bd6:	3601      	adds	r6, #1
 8008bd8:	e7ee      	b.n	8008bb8 <__libc_init_array+0xc>
 8008bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bde:	4798      	blx	r3
 8008be0:	3601      	adds	r6, #1
 8008be2:	e7f2      	b.n	8008bca <__libc_init_array+0x1e>
 8008be4:	08009b78 	.word	0x08009b78
 8008be8:	08009b78 	.word	0x08009b78
 8008bec:	08009b78 	.word	0x08009b78
 8008bf0:	08009b7c 	.word	0x08009b7c

08008bf4 <__retarget_lock_acquire_recursive>:
 8008bf4:	4770      	bx	lr

08008bf6 <__retarget_lock_release_recursive>:
 8008bf6:	4770      	bx	lr

08008bf8 <memcpy>:
 8008bf8:	440a      	add	r2, r1
 8008bfa:	4291      	cmp	r1, r2
 8008bfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c00:	d100      	bne.n	8008c04 <memcpy+0xc>
 8008c02:	4770      	bx	lr
 8008c04:	b510      	push	{r4, lr}
 8008c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c0e:	4291      	cmp	r1, r2
 8008c10:	d1f9      	bne.n	8008c06 <memcpy+0xe>
 8008c12:	bd10      	pop	{r4, pc}

08008c14 <__ssputs_r>:
 8008c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	688e      	ldr	r6, [r1, #8]
 8008c1a:	461f      	mov	r7, r3
 8008c1c:	42be      	cmp	r6, r7
 8008c1e:	680b      	ldr	r3, [r1, #0]
 8008c20:	4682      	mov	sl, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	4690      	mov	r8, r2
 8008c26:	d82c      	bhi.n	8008c82 <__ssputs_r+0x6e>
 8008c28:	898a      	ldrh	r2, [r1, #12]
 8008c2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c2e:	d026      	beq.n	8008c7e <__ssputs_r+0x6a>
 8008c30:	6965      	ldr	r5, [r4, #20]
 8008c32:	6909      	ldr	r1, [r1, #16]
 8008c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c38:	eba3 0901 	sub.w	r9, r3, r1
 8008c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c40:	1c7b      	adds	r3, r7, #1
 8008c42:	444b      	add	r3, r9
 8008c44:	106d      	asrs	r5, r5, #1
 8008c46:	429d      	cmp	r5, r3
 8008c48:	bf38      	it	cc
 8008c4a:	461d      	movcc	r5, r3
 8008c4c:	0553      	lsls	r3, r2, #21
 8008c4e:	d527      	bpl.n	8008ca0 <__ssputs_r+0x8c>
 8008c50:	4629      	mov	r1, r5
 8008c52:	f000 f957 	bl	8008f04 <_malloc_r>
 8008c56:	4606      	mov	r6, r0
 8008c58:	b360      	cbz	r0, 8008cb4 <__ssputs_r+0xa0>
 8008c5a:	6921      	ldr	r1, [r4, #16]
 8008c5c:	464a      	mov	r2, r9
 8008c5e:	f7ff ffcb 	bl	8008bf8 <memcpy>
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c6c:	81a3      	strh	r3, [r4, #12]
 8008c6e:	6126      	str	r6, [r4, #16]
 8008c70:	6165      	str	r5, [r4, #20]
 8008c72:	444e      	add	r6, r9
 8008c74:	eba5 0509 	sub.w	r5, r5, r9
 8008c78:	6026      	str	r6, [r4, #0]
 8008c7a:	60a5      	str	r5, [r4, #8]
 8008c7c:	463e      	mov	r6, r7
 8008c7e:	42be      	cmp	r6, r7
 8008c80:	d900      	bls.n	8008c84 <__ssputs_r+0x70>
 8008c82:	463e      	mov	r6, r7
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	4632      	mov	r2, r6
 8008c88:	4641      	mov	r1, r8
 8008c8a:	f000 fb86 	bl	800939a <memmove>
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	1b9b      	subs	r3, r3, r6
 8008c92:	60a3      	str	r3, [r4, #8]
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	4433      	add	r3, r6
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca0:	462a      	mov	r2, r5
 8008ca2:	f000 fb4b 	bl	800933c <_realloc_r>
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d1e0      	bne.n	8008c6e <__ssputs_r+0x5a>
 8008cac:	6921      	ldr	r1, [r4, #16]
 8008cae:	4650      	mov	r0, sl
 8008cb0:	f000 fb9e 	bl	80093f0 <_free_r>
 8008cb4:	230c      	movs	r3, #12
 8008cb6:	f8ca 3000 	str.w	r3, [sl]
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc0:	81a3      	strh	r3, [r4, #12]
 8008cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cc6:	e7e9      	b.n	8008c9c <__ssputs_r+0x88>

08008cc8 <_svfiprintf_r>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	4698      	mov	r8, r3
 8008cce:	898b      	ldrh	r3, [r1, #12]
 8008cd0:	061b      	lsls	r3, r3, #24
 8008cd2:	b09d      	sub	sp, #116	; 0x74
 8008cd4:	4607      	mov	r7, r0
 8008cd6:	460d      	mov	r5, r1
 8008cd8:	4614      	mov	r4, r2
 8008cda:	d50e      	bpl.n	8008cfa <_svfiprintf_r+0x32>
 8008cdc:	690b      	ldr	r3, [r1, #16]
 8008cde:	b963      	cbnz	r3, 8008cfa <_svfiprintf_r+0x32>
 8008ce0:	2140      	movs	r1, #64	; 0x40
 8008ce2:	f000 f90f 	bl	8008f04 <_malloc_r>
 8008ce6:	6028      	str	r0, [r5, #0]
 8008ce8:	6128      	str	r0, [r5, #16]
 8008cea:	b920      	cbnz	r0, 8008cf6 <_svfiprintf_r+0x2e>
 8008cec:	230c      	movs	r3, #12
 8008cee:	603b      	str	r3, [r7, #0]
 8008cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cf4:	e0d0      	b.n	8008e98 <_svfiprintf_r+0x1d0>
 8008cf6:	2340      	movs	r3, #64	; 0x40
 8008cf8:	616b      	str	r3, [r5, #20]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfe:	2320      	movs	r3, #32
 8008d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d08:	2330      	movs	r3, #48	; 0x30
 8008d0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008eb0 <_svfiprintf_r+0x1e8>
 8008d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d12:	f04f 0901 	mov.w	r9, #1
 8008d16:	4623      	mov	r3, r4
 8008d18:	469a      	mov	sl, r3
 8008d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d1e:	b10a      	cbz	r2, 8008d24 <_svfiprintf_r+0x5c>
 8008d20:	2a25      	cmp	r2, #37	; 0x25
 8008d22:	d1f9      	bne.n	8008d18 <_svfiprintf_r+0x50>
 8008d24:	ebba 0b04 	subs.w	fp, sl, r4
 8008d28:	d00b      	beq.n	8008d42 <_svfiprintf_r+0x7a>
 8008d2a:	465b      	mov	r3, fp
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	4629      	mov	r1, r5
 8008d30:	4638      	mov	r0, r7
 8008d32:	f7ff ff6f 	bl	8008c14 <__ssputs_r>
 8008d36:	3001      	adds	r0, #1
 8008d38:	f000 80a9 	beq.w	8008e8e <_svfiprintf_r+0x1c6>
 8008d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d3e:	445a      	add	r2, fp
 8008d40:	9209      	str	r2, [sp, #36]	; 0x24
 8008d42:	f89a 3000 	ldrb.w	r3, [sl]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 80a1 	beq.w	8008e8e <_svfiprintf_r+0x1c6>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d56:	f10a 0a01 	add.w	sl, sl, #1
 8008d5a:	9304      	str	r3, [sp, #16]
 8008d5c:	9307      	str	r3, [sp, #28]
 8008d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d62:	931a      	str	r3, [sp, #104]	; 0x68
 8008d64:	4654      	mov	r4, sl
 8008d66:	2205      	movs	r2, #5
 8008d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d6c:	4850      	ldr	r0, [pc, #320]	; (8008eb0 <_svfiprintf_r+0x1e8>)
 8008d6e:	f7f7 fa07 	bl	8000180 <memchr>
 8008d72:	9a04      	ldr	r2, [sp, #16]
 8008d74:	b9d8      	cbnz	r0, 8008dae <_svfiprintf_r+0xe6>
 8008d76:	06d0      	lsls	r0, r2, #27
 8008d78:	bf44      	itt	mi
 8008d7a:	2320      	movmi	r3, #32
 8008d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d80:	0711      	lsls	r1, r2, #28
 8008d82:	bf44      	itt	mi
 8008d84:	232b      	movmi	r3, #43	; 0x2b
 8008d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d90:	d015      	beq.n	8008dbe <_svfiprintf_r+0xf6>
 8008d92:	9a07      	ldr	r2, [sp, #28]
 8008d94:	4654      	mov	r4, sl
 8008d96:	2000      	movs	r0, #0
 8008d98:	f04f 0c0a 	mov.w	ip, #10
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008da2:	3b30      	subs	r3, #48	; 0x30
 8008da4:	2b09      	cmp	r3, #9
 8008da6:	d94d      	bls.n	8008e44 <_svfiprintf_r+0x17c>
 8008da8:	b1b0      	cbz	r0, 8008dd8 <_svfiprintf_r+0x110>
 8008daa:	9207      	str	r2, [sp, #28]
 8008dac:	e014      	b.n	8008dd8 <_svfiprintf_r+0x110>
 8008dae:	eba0 0308 	sub.w	r3, r0, r8
 8008db2:	fa09 f303 	lsl.w	r3, r9, r3
 8008db6:	4313      	orrs	r3, r2
 8008db8:	9304      	str	r3, [sp, #16]
 8008dba:	46a2      	mov	sl, r4
 8008dbc:	e7d2      	b.n	8008d64 <_svfiprintf_r+0x9c>
 8008dbe:	9b03      	ldr	r3, [sp, #12]
 8008dc0:	1d19      	adds	r1, r3, #4
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	9103      	str	r1, [sp, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	bfbb      	ittet	lt
 8008dca:	425b      	neglt	r3, r3
 8008dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8008dd0:	9307      	strge	r3, [sp, #28]
 8008dd2:	9307      	strlt	r3, [sp, #28]
 8008dd4:	bfb8      	it	lt
 8008dd6:	9204      	strlt	r2, [sp, #16]
 8008dd8:	7823      	ldrb	r3, [r4, #0]
 8008dda:	2b2e      	cmp	r3, #46	; 0x2e
 8008ddc:	d10c      	bne.n	8008df8 <_svfiprintf_r+0x130>
 8008dde:	7863      	ldrb	r3, [r4, #1]
 8008de0:	2b2a      	cmp	r3, #42	; 0x2a
 8008de2:	d134      	bne.n	8008e4e <_svfiprintf_r+0x186>
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	1d1a      	adds	r2, r3, #4
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	9203      	str	r2, [sp, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	bfb8      	it	lt
 8008df0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008df4:	3402      	adds	r4, #2
 8008df6:	9305      	str	r3, [sp, #20]
 8008df8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008eb4 <_svfiprintf_r+0x1ec>
 8008dfc:	7821      	ldrb	r1, [r4, #0]
 8008dfe:	2203      	movs	r2, #3
 8008e00:	4650      	mov	r0, sl
 8008e02:	f7f7 f9bd 	bl	8000180 <memchr>
 8008e06:	b138      	cbz	r0, 8008e18 <_svfiprintf_r+0x150>
 8008e08:	9b04      	ldr	r3, [sp, #16]
 8008e0a:	eba0 000a 	sub.w	r0, r0, sl
 8008e0e:	2240      	movs	r2, #64	; 0x40
 8008e10:	4082      	lsls	r2, r0
 8008e12:	4313      	orrs	r3, r2
 8008e14:	3401      	adds	r4, #1
 8008e16:	9304      	str	r3, [sp, #16]
 8008e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1c:	4826      	ldr	r0, [pc, #152]	; (8008eb8 <_svfiprintf_r+0x1f0>)
 8008e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e22:	2206      	movs	r2, #6
 8008e24:	f7f7 f9ac 	bl	8000180 <memchr>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d038      	beq.n	8008e9e <_svfiprintf_r+0x1d6>
 8008e2c:	4b23      	ldr	r3, [pc, #140]	; (8008ebc <_svfiprintf_r+0x1f4>)
 8008e2e:	bb1b      	cbnz	r3, 8008e78 <_svfiprintf_r+0x1b0>
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	3307      	adds	r3, #7
 8008e34:	f023 0307 	bic.w	r3, r3, #7
 8008e38:	3308      	adds	r3, #8
 8008e3a:	9303      	str	r3, [sp, #12]
 8008e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3e:	4433      	add	r3, r6
 8008e40:	9309      	str	r3, [sp, #36]	; 0x24
 8008e42:	e768      	b.n	8008d16 <_svfiprintf_r+0x4e>
 8008e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e48:	460c      	mov	r4, r1
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	e7a6      	b.n	8008d9c <_svfiprintf_r+0xd4>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	3401      	adds	r4, #1
 8008e52:	9305      	str	r3, [sp, #20]
 8008e54:	4619      	mov	r1, r3
 8008e56:	f04f 0c0a 	mov.w	ip, #10
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e60:	3a30      	subs	r2, #48	; 0x30
 8008e62:	2a09      	cmp	r2, #9
 8008e64:	d903      	bls.n	8008e6e <_svfiprintf_r+0x1a6>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d0c6      	beq.n	8008df8 <_svfiprintf_r+0x130>
 8008e6a:	9105      	str	r1, [sp, #20]
 8008e6c:	e7c4      	b.n	8008df8 <_svfiprintf_r+0x130>
 8008e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e72:	4604      	mov	r4, r0
 8008e74:	2301      	movs	r3, #1
 8008e76:	e7f0      	b.n	8008e5a <_svfiprintf_r+0x192>
 8008e78:	ab03      	add	r3, sp, #12
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	462a      	mov	r2, r5
 8008e7e:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <_svfiprintf_r+0x1f8>)
 8008e80:	a904      	add	r1, sp, #16
 8008e82:	4638      	mov	r0, r7
 8008e84:	f3af 8000 	nop.w
 8008e88:	1c42      	adds	r2, r0, #1
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	d1d6      	bne.n	8008e3c <_svfiprintf_r+0x174>
 8008e8e:	89ab      	ldrh	r3, [r5, #12]
 8008e90:	065b      	lsls	r3, r3, #25
 8008e92:	f53f af2d 	bmi.w	8008cf0 <_svfiprintf_r+0x28>
 8008e96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e98:	b01d      	add	sp, #116	; 0x74
 8008e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	462a      	mov	r2, r5
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <_svfiprintf_r+0x1f8>)
 8008ea6:	a904      	add	r1, sp, #16
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f000 f919 	bl	80090e0 <_printf_i>
 8008eae:	e7eb      	b.n	8008e88 <_svfiprintf_r+0x1c0>
 8008eb0:	08009b3c 	.word	0x08009b3c
 8008eb4:	08009b42 	.word	0x08009b42
 8008eb8:	08009b46 	.word	0x08009b46
 8008ebc:	00000000 	.word	0x00000000
 8008ec0:	08008c15 	.word	0x08008c15

08008ec4 <sbrk_aligned>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	4e0e      	ldr	r6, [pc, #56]	; (8008f00 <sbrk_aligned+0x3c>)
 8008ec8:	460c      	mov	r4, r1
 8008eca:	6831      	ldr	r1, [r6, #0]
 8008ecc:	4605      	mov	r5, r0
 8008ece:	b911      	cbnz	r1, 8008ed6 <sbrk_aligned+0x12>
 8008ed0:	f000 fa7e 	bl	80093d0 <_sbrk_r>
 8008ed4:	6030      	str	r0, [r6, #0]
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f000 fa79 	bl	80093d0 <_sbrk_r>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d00a      	beq.n	8008ef8 <sbrk_aligned+0x34>
 8008ee2:	1cc4      	adds	r4, r0, #3
 8008ee4:	f024 0403 	bic.w	r4, r4, #3
 8008ee8:	42a0      	cmp	r0, r4
 8008eea:	d007      	beq.n	8008efc <sbrk_aligned+0x38>
 8008eec:	1a21      	subs	r1, r4, r0
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 fa6e 	bl	80093d0 <_sbrk_r>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d101      	bne.n	8008efc <sbrk_aligned+0x38>
 8008ef8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008efc:	4620      	mov	r0, r4
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	20000580 	.word	0x20000580

08008f04 <_malloc_r>:
 8008f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f08:	1ccd      	adds	r5, r1, #3
 8008f0a:	f025 0503 	bic.w	r5, r5, #3
 8008f0e:	3508      	adds	r5, #8
 8008f10:	2d0c      	cmp	r5, #12
 8008f12:	bf38      	it	cc
 8008f14:	250c      	movcc	r5, #12
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	4607      	mov	r7, r0
 8008f1a:	db01      	blt.n	8008f20 <_malloc_r+0x1c>
 8008f1c:	42a9      	cmp	r1, r5
 8008f1e:	d905      	bls.n	8008f2c <_malloc_r+0x28>
 8008f20:	230c      	movs	r3, #12
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	2600      	movs	r6, #0
 8008f26:	4630      	mov	r0, r6
 8008f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009000 <_malloc_r+0xfc>
 8008f30:	f000 f9f8 	bl	8009324 <__malloc_lock>
 8008f34:	f8d8 3000 	ldr.w	r3, [r8]
 8008f38:	461c      	mov	r4, r3
 8008f3a:	bb5c      	cbnz	r4, 8008f94 <_malloc_r+0x90>
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f7ff ffc0 	bl	8008ec4 <sbrk_aligned>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	4604      	mov	r4, r0
 8008f48:	d155      	bne.n	8008ff6 <_malloc_r+0xf2>
 8008f4a:	f8d8 4000 	ldr.w	r4, [r8]
 8008f4e:	4626      	mov	r6, r4
 8008f50:	2e00      	cmp	r6, #0
 8008f52:	d145      	bne.n	8008fe0 <_malloc_r+0xdc>
 8008f54:	2c00      	cmp	r4, #0
 8008f56:	d048      	beq.n	8008fea <_malloc_r+0xe6>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	eb04 0903 	add.w	r9, r4, r3
 8008f62:	f000 fa35 	bl	80093d0 <_sbrk_r>
 8008f66:	4581      	cmp	r9, r0
 8008f68:	d13f      	bne.n	8008fea <_malloc_r+0xe6>
 8008f6a:	6821      	ldr	r1, [r4, #0]
 8008f6c:	1a6d      	subs	r5, r5, r1
 8008f6e:	4629      	mov	r1, r5
 8008f70:	4638      	mov	r0, r7
 8008f72:	f7ff ffa7 	bl	8008ec4 <sbrk_aligned>
 8008f76:	3001      	adds	r0, #1
 8008f78:	d037      	beq.n	8008fea <_malloc_r+0xe6>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	442b      	add	r3, r5
 8008f7e:	6023      	str	r3, [r4, #0]
 8008f80:	f8d8 3000 	ldr.w	r3, [r8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d038      	beq.n	8008ffa <_malloc_r+0xf6>
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	42a2      	cmp	r2, r4
 8008f8c:	d12b      	bne.n	8008fe6 <_malloc_r+0xe2>
 8008f8e:	2200      	movs	r2, #0
 8008f90:	605a      	str	r2, [r3, #4]
 8008f92:	e00f      	b.n	8008fb4 <_malloc_r+0xb0>
 8008f94:	6822      	ldr	r2, [r4, #0]
 8008f96:	1b52      	subs	r2, r2, r5
 8008f98:	d41f      	bmi.n	8008fda <_malloc_r+0xd6>
 8008f9a:	2a0b      	cmp	r2, #11
 8008f9c:	d917      	bls.n	8008fce <_malloc_r+0xca>
 8008f9e:	1961      	adds	r1, r4, r5
 8008fa0:	42a3      	cmp	r3, r4
 8008fa2:	6025      	str	r5, [r4, #0]
 8008fa4:	bf18      	it	ne
 8008fa6:	6059      	strne	r1, [r3, #4]
 8008fa8:	6863      	ldr	r3, [r4, #4]
 8008faa:	bf08      	it	eq
 8008fac:	f8c8 1000 	streq.w	r1, [r8]
 8008fb0:	5162      	str	r2, [r4, r5]
 8008fb2:	604b      	str	r3, [r1, #4]
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	f104 060b 	add.w	r6, r4, #11
 8008fba:	f000 f9b9 	bl	8009330 <__malloc_unlock>
 8008fbe:	f026 0607 	bic.w	r6, r6, #7
 8008fc2:	1d23      	adds	r3, r4, #4
 8008fc4:	1af2      	subs	r2, r6, r3
 8008fc6:	d0ae      	beq.n	8008f26 <_malloc_r+0x22>
 8008fc8:	1b9b      	subs	r3, r3, r6
 8008fca:	50a3      	str	r3, [r4, r2]
 8008fcc:	e7ab      	b.n	8008f26 <_malloc_r+0x22>
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	6862      	ldr	r2, [r4, #4]
 8008fd2:	d1dd      	bne.n	8008f90 <_malloc_r+0x8c>
 8008fd4:	f8c8 2000 	str.w	r2, [r8]
 8008fd8:	e7ec      	b.n	8008fb4 <_malloc_r+0xb0>
 8008fda:	4623      	mov	r3, r4
 8008fdc:	6864      	ldr	r4, [r4, #4]
 8008fde:	e7ac      	b.n	8008f3a <_malloc_r+0x36>
 8008fe0:	4634      	mov	r4, r6
 8008fe2:	6876      	ldr	r6, [r6, #4]
 8008fe4:	e7b4      	b.n	8008f50 <_malloc_r+0x4c>
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	e7cc      	b.n	8008f84 <_malloc_r+0x80>
 8008fea:	230c      	movs	r3, #12
 8008fec:	603b      	str	r3, [r7, #0]
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f000 f99e 	bl	8009330 <__malloc_unlock>
 8008ff4:	e797      	b.n	8008f26 <_malloc_r+0x22>
 8008ff6:	6025      	str	r5, [r4, #0]
 8008ff8:	e7dc      	b.n	8008fb4 <_malloc_r+0xb0>
 8008ffa:	605b      	str	r3, [r3, #4]
 8008ffc:	deff      	udf	#255	; 0xff
 8008ffe:	bf00      	nop
 8009000:	2000057c 	.word	0x2000057c

08009004 <_printf_common>:
 8009004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009008:	4616      	mov	r6, r2
 800900a:	4699      	mov	r9, r3
 800900c:	688a      	ldr	r2, [r1, #8]
 800900e:	690b      	ldr	r3, [r1, #16]
 8009010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009014:	4293      	cmp	r3, r2
 8009016:	bfb8      	it	lt
 8009018:	4613      	movlt	r3, r2
 800901a:	6033      	str	r3, [r6, #0]
 800901c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009020:	4607      	mov	r7, r0
 8009022:	460c      	mov	r4, r1
 8009024:	b10a      	cbz	r2, 800902a <_printf_common+0x26>
 8009026:	3301      	adds	r3, #1
 8009028:	6033      	str	r3, [r6, #0]
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	0699      	lsls	r1, r3, #26
 800902e:	bf42      	ittt	mi
 8009030:	6833      	ldrmi	r3, [r6, #0]
 8009032:	3302      	addmi	r3, #2
 8009034:	6033      	strmi	r3, [r6, #0]
 8009036:	6825      	ldr	r5, [r4, #0]
 8009038:	f015 0506 	ands.w	r5, r5, #6
 800903c:	d106      	bne.n	800904c <_printf_common+0x48>
 800903e:	f104 0a19 	add.w	sl, r4, #25
 8009042:	68e3      	ldr	r3, [r4, #12]
 8009044:	6832      	ldr	r2, [r6, #0]
 8009046:	1a9b      	subs	r3, r3, r2
 8009048:	42ab      	cmp	r3, r5
 800904a:	dc26      	bgt.n	800909a <_printf_common+0x96>
 800904c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009050:	1e13      	subs	r3, r2, #0
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	bf18      	it	ne
 8009056:	2301      	movne	r3, #1
 8009058:	0692      	lsls	r2, r2, #26
 800905a:	d42b      	bmi.n	80090b4 <_printf_common+0xb0>
 800905c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009060:	4649      	mov	r1, r9
 8009062:	4638      	mov	r0, r7
 8009064:	47c0      	blx	r8
 8009066:	3001      	adds	r0, #1
 8009068:	d01e      	beq.n	80090a8 <_printf_common+0xa4>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	6922      	ldr	r2, [r4, #16]
 800906e:	f003 0306 	and.w	r3, r3, #6
 8009072:	2b04      	cmp	r3, #4
 8009074:	bf02      	ittt	eq
 8009076:	68e5      	ldreq	r5, [r4, #12]
 8009078:	6833      	ldreq	r3, [r6, #0]
 800907a:	1aed      	subeq	r5, r5, r3
 800907c:	68a3      	ldr	r3, [r4, #8]
 800907e:	bf0c      	ite	eq
 8009080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009084:	2500      	movne	r5, #0
 8009086:	4293      	cmp	r3, r2
 8009088:	bfc4      	itt	gt
 800908a:	1a9b      	subgt	r3, r3, r2
 800908c:	18ed      	addgt	r5, r5, r3
 800908e:	2600      	movs	r6, #0
 8009090:	341a      	adds	r4, #26
 8009092:	42b5      	cmp	r5, r6
 8009094:	d11a      	bne.n	80090cc <_printf_common+0xc8>
 8009096:	2000      	movs	r0, #0
 8009098:	e008      	b.n	80090ac <_printf_common+0xa8>
 800909a:	2301      	movs	r3, #1
 800909c:	4652      	mov	r2, sl
 800909e:	4649      	mov	r1, r9
 80090a0:	4638      	mov	r0, r7
 80090a2:	47c0      	blx	r8
 80090a4:	3001      	adds	r0, #1
 80090a6:	d103      	bne.n	80090b0 <_printf_common+0xac>
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b0:	3501      	adds	r5, #1
 80090b2:	e7c6      	b.n	8009042 <_printf_common+0x3e>
 80090b4:	18e1      	adds	r1, r4, r3
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	2030      	movs	r0, #48	; 0x30
 80090ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090be:	4422      	add	r2, r4
 80090c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090c8:	3302      	adds	r3, #2
 80090ca:	e7c7      	b.n	800905c <_printf_common+0x58>
 80090cc:	2301      	movs	r3, #1
 80090ce:	4622      	mov	r2, r4
 80090d0:	4649      	mov	r1, r9
 80090d2:	4638      	mov	r0, r7
 80090d4:	47c0      	blx	r8
 80090d6:	3001      	adds	r0, #1
 80090d8:	d0e6      	beq.n	80090a8 <_printf_common+0xa4>
 80090da:	3601      	adds	r6, #1
 80090dc:	e7d9      	b.n	8009092 <_printf_common+0x8e>
	...

080090e0 <_printf_i>:
 80090e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090e4:	7e0f      	ldrb	r7, [r1, #24]
 80090e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090e8:	2f78      	cmp	r7, #120	; 0x78
 80090ea:	4691      	mov	r9, r2
 80090ec:	4680      	mov	r8, r0
 80090ee:	460c      	mov	r4, r1
 80090f0:	469a      	mov	sl, r3
 80090f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090f6:	d807      	bhi.n	8009108 <_printf_i+0x28>
 80090f8:	2f62      	cmp	r7, #98	; 0x62
 80090fa:	d80a      	bhi.n	8009112 <_printf_i+0x32>
 80090fc:	2f00      	cmp	r7, #0
 80090fe:	f000 80d4 	beq.w	80092aa <_printf_i+0x1ca>
 8009102:	2f58      	cmp	r7, #88	; 0x58
 8009104:	f000 80c0 	beq.w	8009288 <_printf_i+0x1a8>
 8009108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800910c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009110:	e03a      	b.n	8009188 <_printf_i+0xa8>
 8009112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009116:	2b15      	cmp	r3, #21
 8009118:	d8f6      	bhi.n	8009108 <_printf_i+0x28>
 800911a:	a101      	add	r1, pc, #4	; (adr r1, 8009120 <_printf_i+0x40>)
 800911c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009120:	08009179 	.word	0x08009179
 8009124:	0800918d 	.word	0x0800918d
 8009128:	08009109 	.word	0x08009109
 800912c:	08009109 	.word	0x08009109
 8009130:	08009109 	.word	0x08009109
 8009134:	08009109 	.word	0x08009109
 8009138:	0800918d 	.word	0x0800918d
 800913c:	08009109 	.word	0x08009109
 8009140:	08009109 	.word	0x08009109
 8009144:	08009109 	.word	0x08009109
 8009148:	08009109 	.word	0x08009109
 800914c:	08009291 	.word	0x08009291
 8009150:	080091b9 	.word	0x080091b9
 8009154:	0800924b 	.word	0x0800924b
 8009158:	08009109 	.word	0x08009109
 800915c:	08009109 	.word	0x08009109
 8009160:	080092b3 	.word	0x080092b3
 8009164:	08009109 	.word	0x08009109
 8009168:	080091b9 	.word	0x080091b9
 800916c:	08009109 	.word	0x08009109
 8009170:	08009109 	.word	0x08009109
 8009174:	08009253 	.word	0x08009253
 8009178:	682b      	ldr	r3, [r5, #0]
 800917a:	1d1a      	adds	r2, r3, #4
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	602a      	str	r2, [r5, #0]
 8009180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009188:	2301      	movs	r3, #1
 800918a:	e09f      	b.n	80092cc <_printf_i+0x1ec>
 800918c:	6820      	ldr	r0, [r4, #0]
 800918e:	682b      	ldr	r3, [r5, #0]
 8009190:	0607      	lsls	r7, r0, #24
 8009192:	f103 0104 	add.w	r1, r3, #4
 8009196:	6029      	str	r1, [r5, #0]
 8009198:	d501      	bpl.n	800919e <_printf_i+0xbe>
 800919a:	681e      	ldr	r6, [r3, #0]
 800919c:	e003      	b.n	80091a6 <_printf_i+0xc6>
 800919e:	0646      	lsls	r6, r0, #25
 80091a0:	d5fb      	bpl.n	800919a <_printf_i+0xba>
 80091a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091a6:	2e00      	cmp	r6, #0
 80091a8:	da03      	bge.n	80091b2 <_printf_i+0xd2>
 80091aa:	232d      	movs	r3, #45	; 0x2d
 80091ac:	4276      	negs	r6, r6
 80091ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091b2:	485a      	ldr	r0, [pc, #360]	; (800931c <_printf_i+0x23c>)
 80091b4:	230a      	movs	r3, #10
 80091b6:	e012      	b.n	80091de <_printf_i+0xfe>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	6820      	ldr	r0, [r4, #0]
 80091bc:	1d19      	adds	r1, r3, #4
 80091be:	6029      	str	r1, [r5, #0]
 80091c0:	0605      	lsls	r5, r0, #24
 80091c2:	d501      	bpl.n	80091c8 <_printf_i+0xe8>
 80091c4:	681e      	ldr	r6, [r3, #0]
 80091c6:	e002      	b.n	80091ce <_printf_i+0xee>
 80091c8:	0641      	lsls	r1, r0, #25
 80091ca:	d5fb      	bpl.n	80091c4 <_printf_i+0xe4>
 80091cc:	881e      	ldrh	r6, [r3, #0]
 80091ce:	4853      	ldr	r0, [pc, #332]	; (800931c <_printf_i+0x23c>)
 80091d0:	2f6f      	cmp	r7, #111	; 0x6f
 80091d2:	bf0c      	ite	eq
 80091d4:	2308      	moveq	r3, #8
 80091d6:	230a      	movne	r3, #10
 80091d8:	2100      	movs	r1, #0
 80091da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091de:	6865      	ldr	r5, [r4, #4]
 80091e0:	60a5      	str	r5, [r4, #8]
 80091e2:	2d00      	cmp	r5, #0
 80091e4:	bfa2      	ittt	ge
 80091e6:	6821      	ldrge	r1, [r4, #0]
 80091e8:	f021 0104 	bicge.w	r1, r1, #4
 80091ec:	6021      	strge	r1, [r4, #0]
 80091ee:	b90e      	cbnz	r6, 80091f4 <_printf_i+0x114>
 80091f0:	2d00      	cmp	r5, #0
 80091f2:	d04b      	beq.n	800928c <_printf_i+0x1ac>
 80091f4:	4615      	mov	r5, r2
 80091f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80091fa:	fb03 6711 	mls	r7, r3, r1, r6
 80091fe:	5dc7      	ldrb	r7, [r0, r7]
 8009200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009204:	4637      	mov	r7, r6
 8009206:	42bb      	cmp	r3, r7
 8009208:	460e      	mov	r6, r1
 800920a:	d9f4      	bls.n	80091f6 <_printf_i+0x116>
 800920c:	2b08      	cmp	r3, #8
 800920e:	d10b      	bne.n	8009228 <_printf_i+0x148>
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	07de      	lsls	r6, r3, #31
 8009214:	d508      	bpl.n	8009228 <_printf_i+0x148>
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	6861      	ldr	r1, [r4, #4]
 800921a:	4299      	cmp	r1, r3
 800921c:	bfde      	ittt	le
 800921e:	2330      	movle	r3, #48	; 0x30
 8009220:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009224:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009228:	1b52      	subs	r2, r2, r5
 800922a:	6122      	str	r2, [r4, #16]
 800922c:	f8cd a000 	str.w	sl, [sp]
 8009230:	464b      	mov	r3, r9
 8009232:	aa03      	add	r2, sp, #12
 8009234:	4621      	mov	r1, r4
 8009236:	4640      	mov	r0, r8
 8009238:	f7ff fee4 	bl	8009004 <_printf_common>
 800923c:	3001      	adds	r0, #1
 800923e:	d14a      	bne.n	80092d6 <_printf_i+0x1f6>
 8009240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009244:	b004      	add	sp, #16
 8009246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	f043 0320 	orr.w	r3, r3, #32
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	4833      	ldr	r0, [pc, #204]	; (8009320 <_printf_i+0x240>)
 8009254:	2778      	movs	r7, #120	; 0x78
 8009256:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	6829      	ldr	r1, [r5, #0]
 800925e:	061f      	lsls	r7, r3, #24
 8009260:	f851 6b04 	ldr.w	r6, [r1], #4
 8009264:	d402      	bmi.n	800926c <_printf_i+0x18c>
 8009266:	065f      	lsls	r7, r3, #25
 8009268:	bf48      	it	mi
 800926a:	b2b6      	uxthmi	r6, r6
 800926c:	07df      	lsls	r7, r3, #31
 800926e:	bf48      	it	mi
 8009270:	f043 0320 	orrmi.w	r3, r3, #32
 8009274:	6029      	str	r1, [r5, #0]
 8009276:	bf48      	it	mi
 8009278:	6023      	strmi	r3, [r4, #0]
 800927a:	b91e      	cbnz	r6, 8009284 <_printf_i+0x1a4>
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	f023 0320 	bic.w	r3, r3, #32
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	2310      	movs	r3, #16
 8009286:	e7a7      	b.n	80091d8 <_printf_i+0xf8>
 8009288:	4824      	ldr	r0, [pc, #144]	; (800931c <_printf_i+0x23c>)
 800928a:	e7e4      	b.n	8009256 <_printf_i+0x176>
 800928c:	4615      	mov	r5, r2
 800928e:	e7bd      	b.n	800920c <_printf_i+0x12c>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	6826      	ldr	r6, [r4, #0]
 8009294:	6961      	ldr	r1, [r4, #20]
 8009296:	1d18      	adds	r0, r3, #4
 8009298:	6028      	str	r0, [r5, #0]
 800929a:	0635      	lsls	r5, r6, #24
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	d501      	bpl.n	80092a4 <_printf_i+0x1c4>
 80092a0:	6019      	str	r1, [r3, #0]
 80092a2:	e002      	b.n	80092aa <_printf_i+0x1ca>
 80092a4:	0670      	lsls	r0, r6, #25
 80092a6:	d5fb      	bpl.n	80092a0 <_printf_i+0x1c0>
 80092a8:	8019      	strh	r1, [r3, #0]
 80092aa:	2300      	movs	r3, #0
 80092ac:	6123      	str	r3, [r4, #16]
 80092ae:	4615      	mov	r5, r2
 80092b0:	e7bc      	b.n	800922c <_printf_i+0x14c>
 80092b2:	682b      	ldr	r3, [r5, #0]
 80092b4:	1d1a      	adds	r2, r3, #4
 80092b6:	602a      	str	r2, [r5, #0]
 80092b8:	681d      	ldr	r5, [r3, #0]
 80092ba:	6862      	ldr	r2, [r4, #4]
 80092bc:	2100      	movs	r1, #0
 80092be:	4628      	mov	r0, r5
 80092c0:	f7f6 ff5e 	bl	8000180 <memchr>
 80092c4:	b108      	cbz	r0, 80092ca <_printf_i+0x1ea>
 80092c6:	1b40      	subs	r0, r0, r5
 80092c8:	6060      	str	r0, [r4, #4]
 80092ca:	6863      	ldr	r3, [r4, #4]
 80092cc:	6123      	str	r3, [r4, #16]
 80092ce:	2300      	movs	r3, #0
 80092d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d4:	e7aa      	b.n	800922c <_printf_i+0x14c>
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	462a      	mov	r2, r5
 80092da:	4649      	mov	r1, r9
 80092dc:	4640      	mov	r0, r8
 80092de:	47d0      	blx	sl
 80092e0:	3001      	adds	r0, #1
 80092e2:	d0ad      	beq.n	8009240 <_printf_i+0x160>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	079b      	lsls	r3, r3, #30
 80092e8:	d413      	bmi.n	8009312 <_printf_i+0x232>
 80092ea:	68e0      	ldr	r0, [r4, #12]
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	4298      	cmp	r0, r3
 80092f0:	bfb8      	it	lt
 80092f2:	4618      	movlt	r0, r3
 80092f4:	e7a6      	b.n	8009244 <_printf_i+0x164>
 80092f6:	2301      	movs	r3, #1
 80092f8:	4632      	mov	r2, r6
 80092fa:	4649      	mov	r1, r9
 80092fc:	4640      	mov	r0, r8
 80092fe:	47d0      	blx	sl
 8009300:	3001      	adds	r0, #1
 8009302:	d09d      	beq.n	8009240 <_printf_i+0x160>
 8009304:	3501      	adds	r5, #1
 8009306:	68e3      	ldr	r3, [r4, #12]
 8009308:	9903      	ldr	r1, [sp, #12]
 800930a:	1a5b      	subs	r3, r3, r1
 800930c:	42ab      	cmp	r3, r5
 800930e:	dcf2      	bgt.n	80092f6 <_printf_i+0x216>
 8009310:	e7eb      	b.n	80092ea <_printf_i+0x20a>
 8009312:	2500      	movs	r5, #0
 8009314:	f104 0619 	add.w	r6, r4, #25
 8009318:	e7f5      	b.n	8009306 <_printf_i+0x226>
 800931a:	bf00      	nop
 800931c:	08009b4d 	.word	0x08009b4d
 8009320:	08009b5e 	.word	0x08009b5e

08009324 <__malloc_lock>:
 8009324:	4801      	ldr	r0, [pc, #4]	; (800932c <__malloc_lock+0x8>)
 8009326:	f7ff bc65 	b.w	8008bf4 <__retarget_lock_acquire_recursive>
 800932a:	bf00      	nop
 800932c:	20000578 	.word	0x20000578

08009330 <__malloc_unlock>:
 8009330:	4801      	ldr	r0, [pc, #4]	; (8009338 <__malloc_unlock+0x8>)
 8009332:	f7ff bc60 	b.w	8008bf6 <__retarget_lock_release_recursive>
 8009336:	bf00      	nop
 8009338:	20000578 	.word	0x20000578

0800933c <_realloc_r>:
 800933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009340:	4680      	mov	r8, r0
 8009342:	4614      	mov	r4, r2
 8009344:	460e      	mov	r6, r1
 8009346:	b921      	cbnz	r1, 8009352 <_realloc_r+0x16>
 8009348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800934c:	4611      	mov	r1, r2
 800934e:	f7ff bdd9 	b.w	8008f04 <_malloc_r>
 8009352:	b92a      	cbnz	r2, 8009360 <_realloc_r+0x24>
 8009354:	f000 f84c 	bl	80093f0 <_free_r>
 8009358:	4625      	mov	r5, r4
 800935a:	4628      	mov	r0, r5
 800935c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009360:	f000 f890 	bl	8009484 <_malloc_usable_size_r>
 8009364:	4284      	cmp	r4, r0
 8009366:	4607      	mov	r7, r0
 8009368:	d802      	bhi.n	8009370 <_realloc_r+0x34>
 800936a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800936e:	d812      	bhi.n	8009396 <_realloc_r+0x5a>
 8009370:	4621      	mov	r1, r4
 8009372:	4640      	mov	r0, r8
 8009374:	f7ff fdc6 	bl	8008f04 <_malloc_r>
 8009378:	4605      	mov	r5, r0
 800937a:	2800      	cmp	r0, #0
 800937c:	d0ed      	beq.n	800935a <_realloc_r+0x1e>
 800937e:	42bc      	cmp	r4, r7
 8009380:	4622      	mov	r2, r4
 8009382:	4631      	mov	r1, r6
 8009384:	bf28      	it	cs
 8009386:	463a      	movcs	r2, r7
 8009388:	f7ff fc36 	bl	8008bf8 <memcpy>
 800938c:	4631      	mov	r1, r6
 800938e:	4640      	mov	r0, r8
 8009390:	f000 f82e 	bl	80093f0 <_free_r>
 8009394:	e7e1      	b.n	800935a <_realloc_r+0x1e>
 8009396:	4635      	mov	r5, r6
 8009398:	e7df      	b.n	800935a <_realloc_r+0x1e>

0800939a <memmove>:
 800939a:	4288      	cmp	r0, r1
 800939c:	b510      	push	{r4, lr}
 800939e:	eb01 0402 	add.w	r4, r1, r2
 80093a2:	d902      	bls.n	80093aa <memmove+0x10>
 80093a4:	4284      	cmp	r4, r0
 80093a6:	4623      	mov	r3, r4
 80093a8:	d807      	bhi.n	80093ba <memmove+0x20>
 80093aa:	1e43      	subs	r3, r0, #1
 80093ac:	42a1      	cmp	r1, r4
 80093ae:	d008      	beq.n	80093c2 <memmove+0x28>
 80093b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093b8:	e7f8      	b.n	80093ac <memmove+0x12>
 80093ba:	4402      	add	r2, r0
 80093bc:	4601      	mov	r1, r0
 80093be:	428a      	cmp	r2, r1
 80093c0:	d100      	bne.n	80093c4 <memmove+0x2a>
 80093c2:	bd10      	pop	{r4, pc}
 80093c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093cc:	e7f7      	b.n	80093be <memmove+0x24>
	...

080093d0 <_sbrk_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4d06      	ldr	r5, [pc, #24]	; (80093ec <_sbrk_r+0x1c>)
 80093d4:	2300      	movs	r3, #0
 80093d6:	4604      	mov	r4, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	602b      	str	r3, [r5, #0]
 80093dc:	f7f7 ffcc 	bl	8001378 <_sbrk>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_sbrk_r+0x1a>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_sbrk_r+0x1a>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	20000584 	.word	0x20000584

080093f0 <_free_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4605      	mov	r5, r0
 80093f4:	2900      	cmp	r1, #0
 80093f6:	d041      	beq.n	800947c <_free_r+0x8c>
 80093f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fc:	1f0c      	subs	r4, r1, #4
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bfb8      	it	lt
 8009402:	18e4      	addlt	r4, r4, r3
 8009404:	f7ff ff8e 	bl	8009324 <__malloc_lock>
 8009408:	4a1d      	ldr	r2, [pc, #116]	; (8009480 <_free_r+0x90>)
 800940a:	6813      	ldr	r3, [r2, #0]
 800940c:	b933      	cbnz	r3, 800941c <_free_r+0x2c>
 800940e:	6063      	str	r3, [r4, #4]
 8009410:	6014      	str	r4, [r2, #0]
 8009412:	4628      	mov	r0, r5
 8009414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009418:	f7ff bf8a 	b.w	8009330 <__malloc_unlock>
 800941c:	42a3      	cmp	r3, r4
 800941e:	d908      	bls.n	8009432 <_free_r+0x42>
 8009420:	6820      	ldr	r0, [r4, #0]
 8009422:	1821      	adds	r1, r4, r0
 8009424:	428b      	cmp	r3, r1
 8009426:	bf01      	itttt	eq
 8009428:	6819      	ldreq	r1, [r3, #0]
 800942a:	685b      	ldreq	r3, [r3, #4]
 800942c:	1809      	addeq	r1, r1, r0
 800942e:	6021      	streq	r1, [r4, #0]
 8009430:	e7ed      	b.n	800940e <_free_r+0x1e>
 8009432:	461a      	mov	r2, r3
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	b10b      	cbz	r3, 800943c <_free_r+0x4c>
 8009438:	42a3      	cmp	r3, r4
 800943a:	d9fa      	bls.n	8009432 <_free_r+0x42>
 800943c:	6811      	ldr	r1, [r2, #0]
 800943e:	1850      	adds	r0, r2, r1
 8009440:	42a0      	cmp	r0, r4
 8009442:	d10b      	bne.n	800945c <_free_r+0x6c>
 8009444:	6820      	ldr	r0, [r4, #0]
 8009446:	4401      	add	r1, r0
 8009448:	1850      	adds	r0, r2, r1
 800944a:	4283      	cmp	r3, r0
 800944c:	6011      	str	r1, [r2, #0]
 800944e:	d1e0      	bne.n	8009412 <_free_r+0x22>
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	6053      	str	r3, [r2, #4]
 8009456:	4408      	add	r0, r1
 8009458:	6010      	str	r0, [r2, #0]
 800945a:	e7da      	b.n	8009412 <_free_r+0x22>
 800945c:	d902      	bls.n	8009464 <_free_r+0x74>
 800945e:	230c      	movs	r3, #12
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	e7d6      	b.n	8009412 <_free_r+0x22>
 8009464:	6820      	ldr	r0, [r4, #0]
 8009466:	1821      	adds	r1, r4, r0
 8009468:	428b      	cmp	r3, r1
 800946a:	bf04      	itt	eq
 800946c:	6819      	ldreq	r1, [r3, #0]
 800946e:	685b      	ldreq	r3, [r3, #4]
 8009470:	6063      	str	r3, [r4, #4]
 8009472:	bf04      	itt	eq
 8009474:	1809      	addeq	r1, r1, r0
 8009476:	6021      	streq	r1, [r4, #0]
 8009478:	6054      	str	r4, [r2, #4]
 800947a:	e7ca      	b.n	8009412 <_free_r+0x22>
 800947c:	bd38      	pop	{r3, r4, r5, pc}
 800947e:	bf00      	nop
 8009480:	2000057c 	.word	0x2000057c

08009484 <_malloc_usable_size_r>:
 8009484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009488:	1f18      	subs	r0, r3, #4
 800948a:	2b00      	cmp	r3, #0
 800948c:	bfbc      	itt	lt
 800948e:	580b      	ldrlt	r3, [r1, r0]
 8009490:	18c0      	addlt	r0, r0, r3
 8009492:	4770      	bx	lr

08009494 <_init>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	bf00      	nop
 8009498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949a:	bc08      	pop	{r3}
 800949c:	469e      	mov	lr, r3
 800949e:	4770      	bx	lr

080094a0 <_fini>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	bf00      	nop
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr
